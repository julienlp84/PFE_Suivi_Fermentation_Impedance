
impedance_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800cc30  0800cc30  0001cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c8  0800d2c8  000205d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c8  0800d2c8  0001d2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d0  0800d2d0  000205d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d0  0800d2d0  0001d2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2d4  0800d2d4  0001d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005d8  20000000  0800d2d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200005d8  0800d8b0  000205d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  0800d8b0  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114ec  00000000  00000000  0002064b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028dc  00000000  00000000  00031b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b82  00000000  00000000  000352a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9a7  00000000  00000000  00035e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116bb  00000000  00000000  000517c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f6d1  00000000  00000000  00062e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005118  00000000  00000000  00102558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00107670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005d8 	.word	0x200005d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc14 	.word	0x0800cc14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005dc 	.word	0x200005dc
 80001dc:	0800cc14 	.word	0x0800cc14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b970 	b.w	80011ac <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9e08      	ldr	r6, [sp, #32]
 8000eea:	460d      	mov	r5, r1
 8000eec:	4604      	mov	r4, r0
 8000eee:	460f      	mov	r7, r1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d14a      	bne.n	8000f8a <__udivmoddi4+0xa6>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	d965      	bls.n	8000fc6 <__udivmoddi4+0xe2>
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	b143      	cbz	r3, 8000f12 <__udivmoddi4+0x2e>
 8000f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f04:	f1c3 0220 	rsb	r2, r3, #32
 8000f08:	409f      	lsls	r7, r3
 8000f0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0e:	4317      	orrs	r7, r2
 8000f10:	409c      	lsls	r4, r3
 8000f12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f16:	fa1f f58c 	uxth.w	r5, ip
 8000f1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f1e:	0c22      	lsrs	r2, r4, #16
 8000f20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f28:	fb01 f005 	mul.w	r0, r1, r5
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	d90a      	bls.n	8000f46 <__udivmoddi4+0x62>
 8000f30:	eb1c 0202 	adds.w	r2, ip, r2
 8000f34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f38:	f080 811c 	bcs.w	8001174 <__udivmoddi4+0x290>
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	f240 8119 	bls.w	8001174 <__udivmoddi4+0x290>
 8000f42:	3902      	subs	r1, #2
 8000f44:	4462      	add	r2, ip
 8000f46:	1a12      	subs	r2, r2, r0
 8000f48:	b2a4      	uxth	r4, r4
 8000f4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f56:	fb00 f505 	mul.w	r5, r0, r5
 8000f5a:	42a5      	cmp	r5, r4
 8000f5c:	d90a      	bls.n	8000f74 <__udivmoddi4+0x90>
 8000f5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f66:	f080 8107 	bcs.w	8001178 <__udivmoddi4+0x294>
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	f240 8104 	bls.w	8001178 <__udivmoddi4+0x294>
 8000f70:	4464      	add	r4, ip
 8000f72:	3802      	subs	r0, #2
 8000f74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f78:	1b64      	subs	r4, r4, r5
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	b11e      	cbz	r6, 8000f86 <__udivmoddi4+0xa2>
 8000f7e:	40dc      	lsrs	r4, r3
 8000f80:	2300      	movs	r3, #0
 8000f82:	e9c6 4300 	strd	r4, r3, [r6]
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0xbc>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	f000 80ed 	beq.w	800116e <__udivmoddi4+0x28a>
 8000f94:	2100      	movs	r1, #0
 8000f96:	e9c6 0500 	strd	r0, r5, [r6]
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa0:	fab3 f183 	clz	r1, r3
 8000fa4:	2900      	cmp	r1, #0
 8000fa6:	d149      	bne.n	800103c <__udivmoddi4+0x158>
 8000fa8:	42ab      	cmp	r3, r5
 8000faa:	d302      	bcc.n	8000fb2 <__udivmoddi4+0xce>
 8000fac:	4282      	cmp	r2, r0
 8000fae:	f200 80f8 	bhi.w	80011a2 <__udivmoddi4+0x2be>
 8000fb2:	1a84      	subs	r4, r0, r2
 8000fb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4617      	mov	r7, r2
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	d0e2      	beq.n	8000f86 <__udivmoddi4+0xa2>
 8000fc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000fc4:	e7df      	b.n	8000f86 <__udivmoddi4+0xa2>
 8000fc6:	b902      	cbnz	r2, 8000fca <__udivmoddi4+0xe6>
 8000fc8:	deff      	udf	#255	; 0xff
 8000fca:	fab2 f382 	clz	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 8090 	bne.w	80010f4 <__udivmoddi4+0x210>
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fda:	fa1f fe8c 	uxth.w	lr, ip
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000fe4:	fb07 2015 	mls	r0, r7, r5, r2
 8000fe8:	0c22      	lsrs	r2, r4, #16
 8000fea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fee:	fb0e f005 	mul.w	r0, lr, r5
 8000ff2:	4290      	cmp	r0, r2
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x124>
 8000ff6:	eb1c 0202 	adds.w	r2, ip, r2
 8000ffa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffe:	d202      	bcs.n	8001006 <__udivmoddi4+0x122>
 8001000:	4290      	cmp	r0, r2
 8001002:	f200 80cb 	bhi.w	800119c <__udivmoddi4+0x2b8>
 8001006:	4645      	mov	r5, r8
 8001008:	1a12      	subs	r2, r2, r0
 800100a:	b2a4      	uxth	r4, r4
 800100c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001010:	fb07 2210 	mls	r2, r7, r0, r2
 8001014:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001018:	fb0e fe00 	mul.w	lr, lr, r0
 800101c:	45a6      	cmp	lr, r4
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x14e>
 8001020:	eb1c 0404 	adds.w	r4, ip, r4
 8001024:	f100 32ff 	add.w	r2, r0, #4294967295
 8001028:	d202      	bcs.n	8001030 <__udivmoddi4+0x14c>
 800102a:	45a6      	cmp	lr, r4
 800102c:	f200 80bb 	bhi.w	80011a6 <__udivmoddi4+0x2c2>
 8001030:	4610      	mov	r0, r2
 8001032:	eba4 040e 	sub.w	r4, r4, lr
 8001036:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800103a:	e79f      	b.n	8000f7c <__udivmoddi4+0x98>
 800103c:	f1c1 0720 	rsb	r7, r1, #32
 8001040:	408b      	lsls	r3, r1
 8001042:	fa22 fc07 	lsr.w	ip, r2, r7
 8001046:	ea4c 0c03 	orr.w	ip, ip, r3
 800104a:	fa05 f401 	lsl.w	r4, r5, r1
 800104e:	fa20 f307 	lsr.w	r3, r0, r7
 8001052:	40fd      	lsrs	r5, r7
 8001054:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001058:	4323      	orrs	r3, r4
 800105a:	fbb5 f8f9 	udiv	r8, r5, r9
 800105e:	fa1f fe8c 	uxth.w	lr, ip
 8001062:	fb09 5518 	mls	r5, r9, r8, r5
 8001066:	0c1c      	lsrs	r4, r3, #16
 8001068:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800106c:	fb08 f50e 	mul.w	r5, r8, lr
 8001070:	42a5      	cmp	r5, r4
 8001072:	fa02 f201 	lsl.w	r2, r2, r1
 8001076:	fa00 f001 	lsl.w	r0, r0, r1
 800107a:	d90b      	bls.n	8001094 <__udivmoddi4+0x1b0>
 800107c:	eb1c 0404 	adds.w	r4, ip, r4
 8001080:	f108 3aff 	add.w	sl, r8, #4294967295
 8001084:	f080 8088 	bcs.w	8001198 <__udivmoddi4+0x2b4>
 8001088:	42a5      	cmp	r5, r4
 800108a:	f240 8085 	bls.w	8001198 <__udivmoddi4+0x2b4>
 800108e:	f1a8 0802 	sub.w	r8, r8, #2
 8001092:	4464      	add	r4, ip
 8001094:	1b64      	subs	r4, r4, r5
 8001096:	b29d      	uxth	r5, r3
 8001098:	fbb4 f3f9 	udiv	r3, r4, r9
 800109c:	fb09 4413 	mls	r4, r9, r3, r4
 80010a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x1da>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f103 35ff 	add.w	r5, r3, #4294967295
 80010b4:	d26c      	bcs.n	8001190 <__udivmoddi4+0x2ac>
 80010b6:	45a6      	cmp	lr, r4
 80010b8:	d96a      	bls.n	8001190 <__udivmoddi4+0x2ac>
 80010ba:	3b02      	subs	r3, #2
 80010bc:	4464      	add	r4, ip
 80010be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010c2:	fba3 9502 	umull	r9, r5, r3, r2
 80010c6:	eba4 040e 	sub.w	r4, r4, lr
 80010ca:	42ac      	cmp	r4, r5
 80010cc:	46c8      	mov	r8, r9
 80010ce:	46ae      	mov	lr, r5
 80010d0:	d356      	bcc.n	8001180 <__udivmoddi4+0x29c>
 80010d2:	d053      	beq.n	800117c <__udivmoddi4+0x298>
 80010d4:	b156      	cbz	r6, 80010ec <__udivmoddi4+0x208>
 80010d6:	ebb0 0208 	subs.w	r2, r0, r8
 80010da:	eb64 040e 	sbc.w	r4, r4, lr
 80010de:	fa04 f707 	lsl.w	r7, r4, r7
 80010e2:	40ca      	lsrs	r2, r1
 80010e4:	40cc      	lsrs	r4, r1
 80010e6:	4317      	orrs	r7, r2
 80010e8:	e9c6 7400 	strd	r7, r4, [r6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f4:	f1c3 0120 	rsb	r1, r3, #32
 80010f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010fc:	fa20 f201 	lsr.w	r2, r0, r1
 8001100:	fa25 f101 	lsr.w	r1, r5, r1
 8001104:	409d      	lsls	r5, r3
 8001106:	432a      	orrs	r2, r5
 8001108:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110c:	fa1f fe8c 	uxth.w	lr, ip
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1510 	mls	r5, r7, r0, r1
 8001118:	0c11      	lsrs	r1, r2, #16
 800111a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800111e:	fb00 f50e 	mul.w	r5, r0, lr
 8001122:	428d      	cmp	r5, r1
 8001124:	fa04 f403 	lsl.w	r4, r4, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x258>
 800112a:	eb1c 0101 	adds.w	r1, ip, r1
 800112e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001132:	d22f      	bcs.n	8001194 <__udivmoddi4+0x2b0>
 8001134:	428d      	cmp	r5, r1
 8001136:	d92d      	bls.n	8001194 <__udivmoddi4+0x2b0>
 8001138:	3802      	subs	r0, #2
 800113a:	4461      	add	r1, ip
 800113c:	1b49      	subs	r1, r1, r5
 800113e:	b292      	uxth	r2, r2
 8001140:	fbb1 f5f7 	udiv	r5, r1, r7
 8001144:	fb07 1115 	mls	r1, r7, r5, r1
 8001148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800114c:	fb05 f10e 	mul.w	r1, r5, lr
 8001150:	4291      	cmp	r1, r2
 8001152:	d908      	bls.n	8001166 <__udivmoddi4+0x282>
 8001154:	eb1c 0202 	adds.w	r2, ip, r2
 8001158:	f105 38ff 	add.w	r8, r5, #4294967295
 800115c:	d216      	bcs.n	800118c <__udivmoddi4+0x2a8>
 800115e:	4291      	cmp	r1, r2
 8001160:	d914      	bls.n	800118c <__udivmoddi4+0x2a8>
 8001162:	3d02      	subs	r5, #2
 8001164:	4462      	add	r2, ip
 8001166:	1a52      	subs	r2, r2, r1
 8001168:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800116c:	e738      	b.n	8000fe0 <__udivmoddi4+0xfc>
 800116e:	4631      	mov	r1, r6
 8001170:	4630      	mov	r0, r6
 8001172:	e708      	b.n	8000f86 <__udivmoddi4+0xa2>
 8001174:	4639      	mov	r1, r7
 8001176:	e6e6      	b.n	8000f46 <__udivmoddi4+0x62>
 8001178:	4610      	mov	r0, r2
 800117a:	e6fb      	b.n	8000f74 <__udivmoddi4+0x90>
 800117c:	4548      	cmp	r0, r9
 800117e:	d2a9      	bcs.n	80010d4 <__udivmoddi4+0x1f0>
 8001180:	ebb9 0802 	subs.w	r8, r9, r2
 8001184:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001188:	3b01      	subs	r3, #1
 800118a:	e7a3      	b.n	80010d4 <__udivmoddi4+0x1f0>
 800118c:	4645      	mov	r5, r8
 800118e:	e7ea      	b.n	8001166 <__udivmoddi4+0x282>
 8001190:	462b      	mov	r3, r5
 8001192:	e794      	b.n	80010be <__udivmoddi4+0x1da>
 8001194:	4640      	mov	r0, r8
 8001196:	e7d1      	b.n	800113c <__udivmoddi4+0x258>
 8001198:	46d0      	mov	r8, sl
 800119a:	e77b      	b.n	8001094 <__udivmoddi4+0x1b0>
 800119c:	3d02      	subs	r5, #2
 800119e:	4462      	add	r2, ip
 80011a0:	e732      	b.n	8001008 <__udivmoddi4+0x124>
 80011a2:	4608      	mov	r0, r1
 80011a4:	e70a      	b.n	8000fbc <__udivmoddi4+0xd8>
 80011a6:	4464      	add	r4, ip
 80011a8:	3802      	subs	r0, #2
 80011aa:	e742      	b.n	8001032 <__udivmoddi4+0x14e>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <AD5940_ReadWriteNBytes>:
	@param length :{0 - 0xFFFFFFFF}
      - Data length in SendBuffer.
	@return None.
**/
void AD5940_ReadWriteNBytes(unsigned char *pSendBuffer,unsigned char *pRecvBuff,unsigned long length)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  HAL_SPI_TransmitReceive(&SpiHandle, pSendBuffer, pRecvBuff, length, (uint32_t)-1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	68f9      	ldr	r1, [r7, #12]
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <AD5940_ReadWriteNBytes+0x28>)
 80011cc:	f006 fb65 	bl	800789a <HAL_SPI_TransmitReceive>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200005f4 	.word	0x200005f4

080011dc <AD5940_CsClr>:

void AD5940_CsClr(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(AD5940_CS_GPIO_PORT, AD5940_CS_PIN, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	; 0x40
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <AD5940_CsClr+0x14>)
 80011e6:	f005 fe53 	bl	8006e90 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020400 	.word	0x40020400

080011f4 <AD5940_CsSet>:

void AD5940_CsSet(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(AD5940_CS_GPIO_PORT, AD5940_CS_PIN, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <AD5940_CsSet+0x14>)
 80011fe:	f005 fe47 	bl	8006e90 <HAL_GPIO_WritePin>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020400 	.word	0x40020400

0800120c <AD5940_RstSet>:

void AD5940_RstSet(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(AD5940_RST_GPIO_PORT, AD5940_RST_PIN, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2101      	movs	r1, #1
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <AD5940_RstSet+0x14>)
 8001216:	f005 fe3b 	bl	8006e90 <HAL_GPIO_WritePin>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020400 	.word	0x40020400

08001224 <AD5940_RstClr>:

void AD5940_RstClr(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(AD5940_RST_GPIO_PORT, AD5940_RST_PIN, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2101      	movs	r1, #1
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <AD5940_RstClr+0x14>)
 800122e:	f005 fe2f 	bl	8006e90 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020400 	.word	0x40020400

0800123c <AD5940_Delay10us>:

void AD5940_Delay10us(uint32_t time)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  time/=100;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <AD5940_Delay10us+0x2c>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	095b      	lsrs	r3, r3, #5
 800124e:	607b      	str	r3, [r7, #4]
  if(time == 0) time =1;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <AD5940_Delay10us+0x1e>
 8001256:	2301      	movs	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
  HAL_Delay(time);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f004 ffee 	bl	800623c <HAL_Delay>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	51eb851f 	.word	0x51eb851f

0800126c <AD5940_GetMCUIntFlag>:

uint32_t AD5940_GetMCUIntFlag(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	return ucInterrupted;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <AD5940_GetMCUIntFlag+0x14>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	2000064c 	.word	0x2000064c

08001284 <AD5940_ClrMCUIntFlag>:

uint32_t AD5940_ClrMCUIntFlag(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	ucInterrupted = 0;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <AD5940_ClrMCUIntFlag+0x18>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
	return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000064c 	.word	0x2000064c

080012a0 <AD5940_MCUResourceInit>:

uint32_t AD5940_MCUResourceInit(void *pCfg)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Step1, initialize SPI peripheral and its GPIOs for CS/RST */
  AD5940_SCK_GPIO_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a6d      	ldr	r2, [pc, #436]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	623b      	str	r3, [r7, #32]
 80012c2:	6a3b      	ldr	r3, [r7, #32]
  AD5940_MISO_GPIO_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	4b67      	ldr	r3, [pc, #412]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a66      	ldr	r2, [pc, #408]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b64      	ldr	r3, [pc, #400]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]
  AD5940_MOSI_GPIO_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a5f      	ldr	r2, [pc, #380]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]
  AD5940_CS_GPIO_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	4b59      	ldr	r3, [pc, #356]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
  AD5940_RST_GPIO_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
  /* Enable SPI clock */
  AD5940_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800133e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001342:	6453      	str	r3, [r2, #68]	; 0x44
 8001344:	4b48      	ldr	r3, [pc, #288]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin       = AD5940_SCK_PIN;
 8001350:	2320      	movs	r3, #32
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8001358:	2302      	movs	r3, #2
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = AD5940_SCK_AF;
 8001360:	2305      	movs	r3, #5
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AD5940_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	4840      	ldr	r0, [pc, #256]	; (800146c <AD5940_MCUResourceInit+0x1cc>)
 800136c:	f005 fc0c 	bl	8006b88 <HAL_GPIO_Init>

  /* SPI MISO GPIO pin configuration  */
  GPIO_InitStruct.Pin = AD5940_MISO_PIN;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AD5940_MISO_AF;
 8001374:	2305      	movs	r3, #5
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AD5940_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	483b      	ldr	r0, [pc, #236]	; (800146c <AD5940_MCUResourceInit+0x1cc>)
 8001380:	f005 fc02 	bl	8006b88 <HAL_GPIO_Init>

  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = AD5940_MOSI_PIN;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = AD5940_MOSI_AF;
 8001388:	2305      	movs	r3, #5
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AD5940_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4836      	ldr	r0, [pc, #216]	; (800146c <AD5940_MCUResourceInit+0x1cc>)
 8001394:	f005 fbf8 	bl	8006b88 <HAL_GPIO_Init>
  /* SPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin = AD5940_CS_PIN;
 8001398:	2340      	movs	r3, #64	; 0x40
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD5940_CS_GPIO_PORT, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4832      	ldr	r0, [pc, #200]	; (8001470 <AD5940_MCUResourceInit+0x1d0>)
 80013a8:	f005 fbee 	bl	8006b88 <HAL_GPIO_Init>

  /* SPI RST GPIO pin configuration  */
  GPIO_InitStruct.Pin = AD5940_RST_PIN;
 80013ac:	2301      	movs	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD5940_RST_GPIO_PORT, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	482e      	ldr	r0, [pc, #184]	; (8001470 <AD5940_MCUResourceInit+0x1d0>)
 80013b8:	f005 fbe6 	bl	8006b88 <HAL_GPIO_Init>

  AD5940_CsSet();
 80013bc:	f7ff ff1a 	bl	80011f4 <AD5940_CsSet>
  AD5940_RstSet();
 80013c0:	f7ff ff24 	bl	800120c <AD5940_RstSet>

  /* Set the SPI parameters */
  SpiHandle.Instance               = AD5940SPI;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013c6:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <AD5940_MCUResourceInit+0x1d8>)
 80013c8:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; //SPI clock should be < AD5940_SystemClock
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013cc:	2210      	movs	r2, #16
 80013ce:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 8001402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001406:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 800140a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800140e:	605a      	str	r2, [r3, #4]
  HAL_SPI_Init(&SpiHandle);
 8001410:	4818      	ldr	r0, [pc, #96]	; (8001474 <AD5940_MCUResourceInit+0x1d4>)
 8001412:	f006 f9af 	bl	8007774 <HAL_SPI_Init>

  /* Step 2: Configure external interrupot line */
  AD5940_GP0INT_GPIO_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <AD5940_MCUResourceInit+0x1c8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStruct.Pin       = AD5940_GP0INT_PIN;
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode      = GPIO_MODE_IT_FALLING;
 8001438:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(AD5940_GP0INT_GPIO_PORT, &GPIO_InitStruct);
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	4619      	mov	r1, r3
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <AD5940_MCUResourceInit+0x1cc>)
 8001452:	f005 fb99 	bl	8006b88 <HAL_GPIO_Init>

  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
  HAL_NVIC_EnableIRQ(AD5940_GP0INT_IRQn);
 8001456:	2028      	movs	r0, #40	; 0x28
 8001458:	f005 f80b 	bl	8006472 <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_SetPriority(AD5940_GP0INT_IRQn, 0, 0);
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3738      	adds	r7, #56	; 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	200005f4 	.word	0x200005f4
 8001478:	40013000 	.word	0x40013000

0800147c <EXTI15_10_IRQHandler>:

/* MCU related external line interrupt service routine */
void EXTI15_10_IRQHandler()
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  ucInterrupted = 1;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <EXTI15_10_IRQHandler+0x1c>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
  __HAL_GPIO_EXTI_CLEAR_IT(AD5940_GP0INT_PIN);
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <EXTI15_10_IRQHandler+0x20>)
 8001488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148c:	615a      	str	r2, [r3, #20]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	2000064c 	.word	0x2000064c
 800149c:	40013c00 	.word	0x40013c00

080014a0 <AD5940_SEQGenInsert>:
 * @brief Manually input a command to sequencer generator.
 * @param CmdWord: The 32-bit width sequencer command word. @ref Sequencer_Helper can be used to generate commands.
 * @return None;
*/
void AD5940_SEQGenInsert(uint32_t CmdWord)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t temp;
  temp  = SeqGenDB.RegCount + SeqGenDB.SeqLen;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
  /* Generate Sequence command */
  if(temp < SeqGenDB.BufferSize)
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d20d      	bcs.n	80014da <AD5940_SEQGenInsert+0x3a>
  {
    SeqGenDB.pSeqBuff[SeqGenDB.SeqLen] = CmdWord;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	601a      	str	r2, [r3, #0]
    SeqGenDB.SeqLen ++;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014d6:	60d3      	str	r3, [r2, #12]
  }
  else  /* There is no buffer */
    SeqGenDB.LastError = AD5940ERR_BUFF;
}
 80014d8:	e003      	b.n	80014e2 <AD5940_SEQGenInsert+0x42>
    SeqGenDB.LastError = AD5940ERR_BUFF;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <AD5940_SEQGenInsert+0x50>)
 80014dc:	f06f 0203 	mvn.w	r2, #3
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000650 	.word	0x20000650

080014f4 <AD5940_SEQGenSearchReg>:
 * @param RegAddr: The register address.
 * @param pIndex: Pointer to a variable that used to store index of found register-info.
 * @return Return AD5940ERR_OK if register found in data-base. Otherwise return AD5940ERR_SEQREG.
*/
static AD5940Err AD5940_SEQGenSearchReg(uint32_t RegAddr, uint32_t *pIndex)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t i;

  RegAddr = (RegAddr>>2)&0xff;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	607b      	str	r3, [r7, #4]
  for(i=0;i<SeqGenDB.RegCount;i++)
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e011      	b.n	8001530 <AD5940_SEQGenSearchReg+0x3c>
  {
    if(RegAddr == SeqGenDB.pRegInfo[i].RegAddr)
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <AD5940_SEQGenSearchReg+0x58>)
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4293      	cmp	r3, r2
 800151e:	d104      	bne.n	800152a <AD5940_SEQGenSearchReg+0x36>
    {
      *pIndex = i;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
      return AD5940ERR_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e009      	b.n	800153e <AD5940_SEQGenSearchReg+0x4a>
  for(i=0;i<SeqGenDB.RegCount;i++)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <AD5940_SEQGenSearchReg+0x58>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3e8      	bcc.n	800150c <AD5940_SEQGenSearchReg+0x18>
    }
  }
  return AD5940ERR_SEQREG;
 800153a:	f06f 0306 	mvn.w	r3, #6
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000650 	.word	0x20000650

08001550 <AD5940_SEQGenGetRegDefault>:
 * @param RegAddr: The register address.
 * @param pRegData: Pointer to a variable to store register default value.
 * @return Return AD5940ERR_OK.
*/
static AD5940Err AD5940_SEQGenGetRegDefault(uint32_t RegAddr, uint32_t *pRegData)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
#ifdef CHIPSEL_M355
  *pRegData = AD5940_D2DReadReg(RegAddr);
#else
  *pRegData = AD5940_SPIReadReg(RegAddr);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ff28 	bl	80023b4 <AD5940_SPIReadReg>
 8001564:	4602      	mov	r2, r0
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	601a      	str	r2, [r3, #0]
#endif
  return AD5940ERR_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <AD5940_SEQRegInfoInsert>:
 * @param RegAddr: The register address.
 * @param RegData: The register data
 * @return Return None.
*/
static void AD5940_SEQRegInfoInsert(uint16_t RegAddr, uint32_t RegData)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	80fb      	strh	r3, [r7, #6]
  uint32_t temp;
  temp = SeqGenDB.RegCount + SeqGenDB.SeqLen;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  if(temp < SeqGenDB.BufferSize)
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	429a      	cmp	r2, r3
 8001594:	d21a      	bcs.n	80015cc <AD5940_SEQRegInfoInsert+0x58>
  {
    SeqGenDB.pRegInfo --; /* Move back */
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	3b04      	subs	r3, #4
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 800159e:	6113      	str	r3, [r2, #16]
    SeqGenDB.pRegInfo[0].RegAddr = (RegAddr>>2)&0xff;
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
    SeqGenDB.pRegInfo[0].RegValue = RegData&0x00ffffff;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80015b8:	6813      	ldr	r3, [r2, #0]
 80015ba:	f361 231f 	bfi	r3, r1, #8, #24
 80015be:	6013      	str	r3, [r2, #0]
    SeqGenDB.RegCount ++;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 80015c8:	6153      	str	r3, [r2, #20]
  }
  else  /* There is no more buffer  */
  {
    SeqGenDB.LastError = AD5940ERR_BUFF;
  }
}
 80015ca:	e003      	b.n	80015d4 <AD5940_SEQRegInfoInsert+0x60>
    SeqGenDB.LastError = AD5940ERR_BUFF;
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <AD5940_SEQRegInfoInsert+0x6c>)
 80015ce:	f06f 0203 	mvn.w	r2, #3
 80015d2:	619a      	str	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	20000650 	.word	0x20000650

080015e4 <AD5940_SEQReadReg>:
 * @brief Get current register value. If we have record in data-base, read it. Otherwise, return the register default value.
 * @param RegAddr: The register address.
 * @return Return register value.
*/
static uint32_t AD5940_SEQReadReg(uint16_t RegAddr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  uint32_t RegIndex, RegData;

  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) != AD5940ERR_OK)
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff7c 	bl	80014f4 <AD5940_SEQGenSearchReg>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00d      	beq.n	800161e <AD5940_SEQReadReg+0x3a>
  {
    /* There is no record in data-base, read the default value. */
    AD5940_SEQGenGetRegDefault(RegAddr, &RegData);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffa0 	bl	8001550 <AD5940_SEQGenGetRegDefault>
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffac 	bl	8001574 <AD5940_SEQRegInfoInsert>
 800161c:	e008      	b.n	8001630 <AD5940_SEQReadReg+0x4c>
  }
  else
  {
    /* return the current register value stored in data-base */
    RegData = SeqGenDB.pRegInfo[RegIndex].RegValue;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <AD5940_SEQReadReg+0x58>)
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800162e:	60bb      	str	r3, [r7, #8]
  }

  return RegData;
 8001630:	68bb      	ldr	r3, [r7, #8]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000650 	.word	0x20000650

08001640 <AD5940_SEQWriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register value.
 * @return Return None.
*/
static void AD5940_SEQWriteReg(uint16_t RegAddr, uint32_t RegData)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
  uint32_t RegIndex;

  if(RegAddr > 0x21ff)
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	f5b3 5f08 	cmp.w	r3, #8704	; 0x2200
 8001652:	d304      	bcc.n	800165e <AD5940_SEQWriteReg+0x1e>
  {
    SeqGenDB.LastError = AD5940ERR_ADDROR;  /* address out of range  */
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <AD5940_SEQWriteReg+0x98>)
 8001656:	f06f 0204 	mvn.w	r2, #4
 800165a:	619a      	str	r2, [r3, #24]
 800165c:	e039      	b.n	80016d2 <AD5940_SEQWriteReg+0x92>
    return;
  }

  if(AD5940_SEQGenSearchReg(RegAddr, &RegIndex) == AD5940ERR_OK)
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ff44 	bl	80014f4 <AD5940_SEQGenSearchReg>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11b      	bne.n	80016aa <AD5940_SEQWriteReg+0x6a>
  {
    /* Store register value */
    SeqGenDB.pRegInfo[RegIndex].RegValue = RegData;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <AD5940_SEQWriteReg+0x98>)
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	441a      	add	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f361 231f 	bfi	r3, r1, #8, #24
 8001688:	6013      	str	r3, [r2, #0]
    /* Generate Sequence command */
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	b29b      	uxth	r3, r3
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	f003 42fe 	and.w	r2, r3, #2130706432	; 0x7f000000
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800169c:	4313      	orrs	r3, r2
 800169e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fefc 	bl	80014a0 <AD5940_SEQGenInsert>
 80016a8:	e013      	b.n	80016d2 <AD5940_SEQWriteReg+0x92>
  }
  else
  {
    AD5940_SEQRegInfoInsert(RegAddr, RegData);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff60 	bl	8001574 <AD5940_SEQRegInfoInsert>
    /* Generate Sequence command */
    AD5940_SEQGenInsert(SEQ_WR(RegAddr, RegData));
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	f003 42fe 	and.w	r2, r3, #2130706432	; 0x7f000000
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016c6:	4313      	orrs	r3, r2
 80016c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fee7 	bl	80014a0 <AD5940_SEQGenInsert>
  }
}
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000650 	.word	0x20000650

080016dc <AD5940_SEQGenInit>:
 * @param pBuffer: Pointer to the buffer.
 * @param BufferSize: The buffer length.
 * @return Return None.
*/
void AD5940_SEQGenInit(uint32_t *pBuffer, uint32_t BufferSize)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  if(BufferSize < 2) return;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d91b      	bls.n	8001724 <AD5940_SEQGenInit+0x48>
  SeqGenDB.BufferSize = BufferSize;
 80016ec:	4a10      	ldr	r2, [pc, #64]	; (8001730 <AD5940_SEQGenInit+0x54>)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6053      	str	r3, [r2, #4]
  SeqGenDB.pSeqBuff = pBuffer;
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <AD5940_SEQGenInit+0x54>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6093      	str	r3, [r2, #8]
  SeqGenDB.pRegInfo = (SEQGenRegInfo_Type*)pBuffer + BufferSize - 1; /* Point to the last element in buffer */
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016fe:	3b01      	subs	r3, #1
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <AD5940_SEQGenInit+0x54>)
 8001708:	6113      	str	r3, [r2, #16]
  SeqGenDB.SeqLen = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <AD5940_SEQGenInit+0x54>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]

  SeqGenDB.RegCount = 0;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <AD5940_SEQGenInit+0x54>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  SeqGenDB.LastError = AD5940ERR_OK;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <AD5940_SEQGenInit+0x54>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  SeqGenDB.EngineStart = bFALSE;
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <AD5940_SEQGenInit+0x54>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e000      	b.n	8001726 <AD5940_SEQGenInit+0x4a>
  if(BufferSize < 2) return;
 8001724:	bf00      	nop
}
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	20000650 	.word	0x20000650

08001734 <AD5940_SEQGenFetchSeq>:
 * @param ppSeqCmd: Pointer to a variable(pointer) used to store the pointer to generated sequencer command.
 * @param pSeqLen: Pointer to a variable that used to store how many commands available in buffer.
 * @return Return lasterror.
*/
AD5940Err AD5940_SEQGenFetchSeq(const uint32_t **ppSeqCmd, uint32_t *pSeqLen)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  AD5940Err lasterror;

  if(ppSeqCmd)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <AD5940_SEQGenFetchSeq+0x18>
    *ppSeqCmd = SeqGenDB.pSeqBuff;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <AD5940_SEQGenFetchSeq+0x3c>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	601a      	str	r2, [r3, #0]
  if(pSeqLen)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <AD5940_SEQGenFetchSeq+0x26>
    *pSeqLen = SeqGenDB.SeqLen;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <AD5940_SEQGenFetchSeq+0x3c>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	601a      	str	r2, [r3, #0]

  //SeqGenDB.SeqLen = 0;  /* Start a new sequence */
  lasterror = SeqGenDB.LastError;
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <AD5940_SEQGenFetchSeq+0x3c>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	60fb      	str	r3, [r7, #12]
  //SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
  return lasterror;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000650 	.word	0x20000650

08001774 <AD5940_SEQGenCtrl>:
 *        Once it's disabled, the register write is written to AD5940 directly by SPI bus.
 * @param bFlag: Enable or disable sequencer generator.
 * @return Return None.
*/
void AD5940_SEQGenCtrl(BoolFlag bFlag)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if(bFlag == bFALSE) /* Disable sequence generator */
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d103      	bne.n	800178c <AD5940_SEQGenCtrl+0x18>
  {
    SeqGenDB.EngineStart = bFALSE;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <AD5940_SEQGenCtrl+0x38>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
  {
    SeqGenDB.SeqLen = 0;
    SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
    SeqGenDB.EngineStart = bTRUE;
  }
}
 800178a:	e008      	b.n	800179e <AD5940_SEQGenCtrl+0x2a>
    SeqGenDB.SeqLen = 0;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <AD5940_SEQGenCtrl+0x38>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    SeqGenDB.LastError = AD5940ERR_OK;  /* Clear error message */
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <AD5940_SEQGenCtrl+0x38>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
    SeqGenDB.EngineStart = bTRUE;
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <AD5940_SEQGenCtrl+0x38>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000650 	.word	0x20000650

080017b0 <AD5940_SEQCycleTime>:
/**
 * @brief Calculate the number of cycles in the sequence
 * @return Return Number of ACLK Cycles that a generated sequence will take.
*/
uint32_t AD5940_SEQCycleTime(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  uint32_t i, Cycles, Cmd;
  Cycles = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
  for(i=0;i<SeqGenDB.RegCount;i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e027      	b.n	8001810 <AD5940_SEQCycleTime+0x60>
  {
    Cmd = (SeqGenDB.pSeqBuff[i]  >> 30) & 0x3;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <AD5940_SEQCycleTime+0x78>)
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0f9b      	lsrs	r3, r3, #30
 80017ce:	607b      	str	r3, [r7, #4]
    if (Cmd & 0x2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <AD5940_SEQCycleTime+0x32>
    {
      /* A write command */
      Cycles += 1;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e013      	b.n	800180a <AD5940_SEQCycleTime+0x5a>
    }
    else
    {
      if (Cmd & 0x1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <AD5940_SEQCycleTime+0x44>
      {
        /* Timeout Command */
        Cycles += 1;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	e00a      	b.n	800180a <AD5940_SEQCycleTime+0x5a>
      }
      else
        {
          /* Wait command */
          Cycles += SeqGenDB.pSeqBuff[i] & 0x3FFFFFFF;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <AD5940_SEQCycleTime+0x78>)
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  for(i=0;i<SeqGenDB.RegCount;i++)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <AD5940_SEQCycleTime+0x78>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3d2      	bcc.n	80017c0 <AD5940_SEQCycleTime+0x10>
        }
    }
  }
  return Cycles;
 800181a:	68bb      	ldr	r3, [r7, #8]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000650 	.word	0x20000650

0800182c <_is_value_in_table>:

/**
 * Check if an uint8_t value exist in table.
*/
static int32_t _is_value_in_table(uint8_t value, const uint8_t *table, uint8_t len, uint8_t *index)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	4613      	mov	r3, r2
 800183c:	73bb      	strb	r3, [r7, #14]
  for(int i=0; i<len; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e00f      	b.n	8001864 <_is_value_in_table+0x38>
  {
    if(value == table[i])
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4413      	add	r3, r2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	429a      	cmp	r2, r3
 8001850:	d105      	bne.n	800185e <_is_value_in_table+0x32>
    {
      *index = i;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 800185a:	2301      	movs	r3, #1
 800185c:	e007      	b.n	800186e <_is_value_in_table+0x42>
  for(int i=0; i<len; i++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbeb      	blt.n	8001844 <_is_value_in_table+0x18>
    }
  }
  return bFALSE;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <AD5940_Notch50HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, only need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 50Hz filter is available.
*/
BoolFlag AD5940_Notch50HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08e      	sub	sp, #56	; 0x38
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d103      	bne.n	8001896 <AD5940_Notch50HzAvailable+0x1a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d007      	beq.n	80018a6 <AD5940_Notch50HzAvailable+0x2a>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12a      	bne.n	80018f4 <AD5940_Notch50HzAvailable+0x78>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d026      	beq.n	80018f4 <AD5940_Notch50HzAvailable+0x78>
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_533, ADCSINC2OSR_667,ADCSINC2OSR_800, ADCSINC2OSR_889, ADCSINC2OSR_1333};
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <AD5940_Notch50HzAvailable+0x14c>)
 80018a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b0:	6018      	str	r0, [r3, #0]
 80018b2:	3304      	adds	r3, #4
 80018b4:	7019      	strb	r1, [r3, #0]
    const uint8_t dl_50Hz[] = {15,12,10,9,6};
 80018b6:	4a45      	ldr	r2, [pc, #276]	; (80019cc <AD5940_Notch50HzAvailable+0x150>)
 80018b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c0:	6018      	str	r0, [r3, #0]
 80018c2:	3304      	adds	r3, #4
 80018c4:	7019      	strb	r1, [r3, #0]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80018d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80018d4:	2205      	movs	r2, #5
 80018d6:	f7ff ffa9 	bl	800182c <_is_value_in_table>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d067      	beq.n	80019b0 <AD5940_Notch50HzAvailable+0x134>
    {
      *dl = dl_50Hz[index];
 80018e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e4:	3338      	adds	r3, #56	; 0x38
 80018e6:	443b      	add	r3, r7
 80018e8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e064      	b.n	80019be <AD5940_Notch50HzAvailable+0x142>
    }
  }
  else if(pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d12b      	bne.n	8001954 <AD5940_Notch50HzAvailable+0xd8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d127      	bne.n	8001954 <AD5940_Notch50HzAvailable+0xd8>
  {
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1067, ADCSINC2OSR_1333};
 8001904:	4a32      	ldr	r2, [pc, #200]	; (80019d0 <AD5940_Notch50HzAvailable+0x154>)
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	4611      	mov	r1, r2
 800190e:	8019      	strh	r1, [r3, #0]
 8001910:	3302      	adds	r3, #2
 8001912:	0c12      	lsrs	r2, r2, #16
 8001914:	701a      	strb	r2, [r3, #0]
    const uint8_t dl_50Hz[] = {18,15,12};
 8001916:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <AD5940_Notch50HzAvailable+0x158>)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4611      	mov	r1, r2
 8001920:	8019      	strh	r1, [r3, #0]
 8001922:	3302      	adds	r3, #2
 8001924:	0c12      	lsrs	r2, r2, #16
 8001926:	701a      	strb	r2, [r3, #0]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	b2d8      	uxtb	r0, r3
 800192e:	f107 031f 	add.w	r3, r7, #31
 8001932:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001936:	2203      	movs	r2, #3
 8001938:	f7ff ff78 	bl	800182c <_is_value_in_table>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d038      	beq.n	80019b4 <AD5940_Notch50HzAvailable+0x138>
    {
      *dl = dl_50Hz[index];
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	3338      	adds	r3, #56	; 0x38
 8001946:	443b      	add	r3, r7
 8001948:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 8001950:	2301      	movs	r3, #1
 8001952:	e034      	b.n	80019be <AD5940_Notch50HzAvailable+0x142>
    }
  }
  else if(pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d12c      	bne.n	80019b6 <AD5940_Notch50HzAvailable+0x13a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d028      	beq.n	80019b6 <AD5940_Notch50HzAvailable+0x13a>
  {
    //this combination suits for filter:
    //SINC3 OSR4 and OSR5 for 800kSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_640,\
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <AD5940_Notch50HzAvailable+0x15c>)
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196e:	6018      	str	r0, [r3, #0]
 8001970:	3304      	adds	r3, #4
 8001972:	8019      	strh	r1, [r3, #0]
                                    ADCSINC2OSR_800, ADCSINC2OSR_1067};
    const uint8_t dl_50Hz[] = {18,12,6,5,4,3};
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <AD5940_Notch50HzAvailable+0x160>)
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800197e:	6018      	str	r0, [r3, #0]
 8001980:	3304      	adds	r3, #4
 8001982:	8019      	strh	r1, [r3, #0]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	f107 030f 	add.w	r3, r7, #15
 800198e:	f107 0118 	add.w	r1, r7, #24
 8001992:	2206      	movs	r2, #6
 8001994:	f7ff ff4a 	bl	800182c <_is_value_in_table>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <AD5940_Notch50HzAvailable+0x13a>
    {
      *dl = dl_50Hz[index];
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3338      	adds	r3, #56	; 0x38
 80019a2:	443b      	add	r3, r7
 80019a4:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e006      	b.n	80019be <AD5940_Notch50HzAvailable+0x142>
  {
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <AD5940_Notch50HzAvailable+0x13a>
  {
 80019b4:	bf00      	nop
    }
  }
  *dl = 0;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
  return bFALSE;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3738      	adds	r7, #56	; 0x38
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800cc30 	.word	0x0800cc30
 80019cc:	0800cc38 	.word	0x0800cc38
 80019d0:	0800cc40 	.word	0x0800cc40
 80019d4:	0800cc44 	.word	0x0800cc44
 80019d8:	0800cc48 	.word	0x0800cc48
 80019dc:	0800cc50 	.word	0x0800cc50

080019e0 <AD5940_Notch60HzAvailable>:
 *        If it's not availabe, hardware automatically bypass Notch even if it's enabled.
 * @param pFilterInfo the filter configuration, need sinc2/sinc3 osr and adc data rate information.
 * @return return bTRUE if notch 60Hz filter is available.
*/
BoolFlag AD5940_Notch60HzAvailable(ADCFilterCfg_Type *pFilterInfo, uint8_t *dl)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d103      	bne.n	80019fa <AD5940_Notch60HzAvailable+0x1a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d007      	beq.n	8001a0a <AD5940_Notch60HzAvailable+0x2a>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  if((pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)||\
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d120      	bne.n	8001a44 <AD5940_Notch60HzAvailable+0x64>
      (pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d01c      	beq.n	8001a44 <AD5940_Notch60HzAvailable+0x64>
  {
    //this combination suits for filter:
    //SINC3 OSR2, for 800kSPS
    //and SINC3 OSR4 and OSR5 for 1.6MSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_667, ADCSINC2OSR_1333};
 8001a0a:	f640 3307 	movw	r3, #2823	; 0xb07
 8001a0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const uint8_t dl_60Hz[] = {10,5};
 8001a10:	f240 530a 	movw	r3, #1290	; 0x50a
 8001a14:	853b      	strh	r3, [r7, #40]	; 0x28
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	b2d8      	uxtb	r0, r3
 8001a1c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001a20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001a24:	2202      	movs	r2, #2
 8001a26:	f7ff ff01 	bl	800182c <_is_value_in_table>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d05b      	beq.n	8001ae8 <AD5940_Notch60HzAvailable+0x108>
    {
      *dl = dl_60Hz[index];
 8001a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a34:	3330      	adds	r3, #48	; 0x30
 8001a36:	443b      	add	r3, r7
 8001a38:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e058      	b.n	8001af6 <AD5940_Notch60HzAvailable+0x116>
    }
  }
  else if(pFilterInfo->ADCRate == ADCRATE_1P6MHZ && pFilterInfo->ADCSinc3Osr == ADCSINC3OSR_2)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d11f      	bne.n	8001a8c <AD5940_Notch60HzAvailable+0xac>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d11b      	bne.n	8001a8c <AD5940_Notch60HzAvailable+0xac>
  {
    //this combination suits for filter:
    //SINC3 OSR2 for 1.6MSPS
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_889, ADCSINC2OSR_1333};
 8001a54:	f640 3309 	movw	r3, #2825	; 0xb09
 8001a58:	84bb      	strh	r3, [r7, #36]	; 0x24
    const uint8_t dl_60Hz[] = {15,10};
 8001a5a:	f640 230f 	movw	r3, #2575	; 0xa0f
 8001a5e:	843b      	strh	r3, [r7, #32]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	b2d8      	uxtb	r0, r3
 8001a66:	f107 031f 	add.w	r3, r7, #31
 8001a6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f7ff fedc 	bl	800182c <_is_value_in_table>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d038      	beq.n	8001aec <AD5940_Notch60HzAvailable+0x10c>
    {
      *dl = dl_60Hz[index];
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
 8001a7c:	3330      	adds	r3, #48	; 0x30
 8001a7e:	443b      	add	r3, r7
 8001a80:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e034      	b.n	8001af6 <AD5940_Notch60HzAvailable+0x116>
    }
  }
  else if(pFilterInfo->ADCRate == ADCRATE_800KHZ && pFilterInfo->ADCSinc3Osr != ADCSINC3OSR_2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d12c      	bne.n	8001aee <AD5940_Notch60HzAvailable+0x10e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d028      	beq.n	8001aee <AD5940_Notch60HzAvailable+0x10e>
  {
    //this combination suits for filter:
    //SINC3 OSR4 and OSR5 for 800kSPS,
    const uint8_t available_sinc2_osr[] = {ADCSINC2OSR_178, ADCSINC2OSR_267, ADCSINC2OSR_533, ADCSINC2OSR_667,\
 8001a9c:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <AD5940_Notch60HzAvailable+0x120>)
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa6:	6018      	str	r0, [r3, #0]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	8019      	strh	r1, [r3, #0]
                                    ADCSINC2OSR_889, ADCSINC2OSR_1333};
    const uint8_t dl_60Hz[] = {15,10,5,4,3,2};
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <AD5940_Notch60HzAvailable+0x124>)
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab6:	6018      	str	r0, [r3, #0]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	8019      	strh	r1, [r3, #0]
    uint8_t index;
    if(_is_value_in_table(pFilterInfo->ADCSinc2Osr, available_sinc2_osr, sizeof(available_sinc2_osr), &index))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	b2d8      	uxtb	r0, r3
 8001ac2:	f107 030f 	add.w	r3, r7, #15
 8001ac6:	f107 0118 	add.w	r1, r7, #24
 8001aca:	2206      	movs	r2, #6
 8001acc:	f7ff feae 	bl	800182c <_is_value_in_table>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <AD5940_Notch60HzAvailable+0x10e>
    {
      *dl = dl_60Hz[index];
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3330      	adds	r3, #48	; 0x30
 8001ada:	443b      	add	r3, r7
 8001adc:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	701a      	strb	r2, [r3, #0]
      return bTRUE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e006      	b.n	8001af6 <AD5940_Notch60HzAvailable+0x116>
  {
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <AD5940_Notch60HzAvailable+0x10e>
  {
 8001aec:	bf00      	nop
    }
  }
  *dl = 0;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
  return bFALSE;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3730      	adds	r7, #48	; 0x30
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800cc58 	.word	0x0800cc58
 8001b04:	0800cc60 	.word	0x0800cc60

08001b08 <AD5940_ClksCalculate>:
 * @param pFilterInfo: Pointer to configuration structure.
 * @param pClocks: pointer used to store results.
 * @return return none.
*/
void AD5940_ClksCalculate(ClksCalInfo_Type *pFilterInfo, uint32_t *pClocks)
{
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b09c      	sub	sp, #112	; 0x70
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t temp = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	66bb      	str	r3, [r7, #104]	; 0x68
  const uint32_t sinc2osr_table[] = {22,44,89,178,267,533,640,667,800,889,1067,1333,0};
 8001b16:	4ba4      	ldr	r3, [pc, #656]	; (8001da8 <AD5940_ClksCalculate+0x2a0>)
 8001b18:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	6023      	str	r3, [r4, #0]
  const uint32_t sinc3osr_table[] = {5,4,2,0};
 8001b2e:	4b9f      	ldr	r3, [pc, #636]	; (8001dac <AD5940_ClksCalculate+0x2a4>)
 8001b30:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  *pClocks = 0;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
  if(pFilterInfo == NULL) return;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8123 	beq.w	8001d8e <AD5940_ClksCalculate+0x286>
  if(pClocks == NULL) return;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8121 	beq.w	8001d92 <AD5940_ClksCalculate+0x28a>
  if(pFilterInfo->ADCSinc2Osr > ADCSINC2OSR_1333) return;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b0b      	cmp	r3, #11
 8001b56:	f200 811e 	bhi.w	8001d96 <AD5940_ClksCalculate+0x28e>
  if(pFilterInfo->ADCSinc3Osr > 2)  return; /* 0: OSR5, 1:OSR4, 2:OSR2 */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	f200 811b 	bhi.w	8001d9a <AD5940_ClksCalculate+0x292>
  if(pFilterInfo->ADCAvgNum > ADCAVGNUM_16) return; /* Average number index:0,1,2,3 */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	f200 8118 	bhi.w	8001d9e <AD5940_ClksCalculate+0x296>
  switch(pFilterInfo->DataType)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	f200 8106 	bhi.w	8001d84 <AD5940_ClksCalculate+0x27c>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <AD5940_ClksCalculate+0x78>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b95 	.word	0x08001b95
 8001b84:	08001bbf 	.word	0x08001bbf
 8001b88:	08001c09 	.word	0x08001c09
 8001b8c:	08001ce5 	.word	0x08001ce5
 8001b90:	08001c4b 	.word	0x08001c4b
  {
    case DATATYPE_ADCRAW:
      temp = (uint32_t)(20*pFilterInfo->DataCount*pFilterInfo->RatioSys2AdcClk);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001bbc:	e0e3      	b.n	8001d86 <AD5940_ClksCalculate+0x27e>
    case DATATYPE_SINC3:
      temp = (uint32_t)(((pFilterInfo->DataCount+2)*sinc3osr_table[pFilterInfo->ADCSinc3Osr]+1)*20*pFilterInfo->RatioSys2AdcClk + 0.5f);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	3370      	adds	r3, #112	; 0x70
 8001bd6:	443b      	add	r3, r7
 8001bd8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	3314      	adds	r3, #20
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001c06:	e0be      	b.n	8001d86 <AD5940_ClksCalculate+0x27e>
    case DATATYPE_SINC2:
      temp = (pFilterInfo->DataCount+1)*sinc2osr_table[pFilterInfo->ADCSinc2Osr] + 1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3370      	adds	r3, #112	; 0x70
 8001c16:	443b      	add	r3, r7
 8001c18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	66bb      	str	r3, [r7, #104]	; 0x68
      pFilterInfo->DataType = DATATYPE_SINC3;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
      pFilterInfo->DataCount = temp;
 8001c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]
      AD5940_ClksCalculate(pFilterInfo, &temp);
 8001c30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ff66 	bl	8001b08 <AD5940_ClksCalculate>
      pFilterInfo->DataType = DATATYPE_SINC2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
      temp += 15;   /* Need extra 15 clocks for FIFO etc. Just to be safe. */
 8001c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c44:	330f      	adds	r3, #15
 8001c46:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001c48:	e09d      	b.n	8001d86 <AD5940_ClksCalculate+0x27e>
    case DATATYPE_NOTCH:
    {
      ADCFilterCfg_Type filter;
      filter.ADCRate = pFilterInfo->ADCRate;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7e1b      	ldrb	r3, [r3, #24]
 8001c4e:	61fb      	str	r3, [r7, #28]
      filter.ADCSinc3Osr = pFilterInfo->ADCSinc3Osr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	613b      	str	r3, [r7, #16]
      filter.ADCSinc2Osr = pFilterInfo->ADCSinc2Osr;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	617b      	str	r3, [r7, #20]
      uint8_t dl=0, dl_50, dl_60;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      if(AD5940_Notch50HzAvailable(&filter, &dl_50)){
 8001c62:	f107 020f 	add.w	r2, r7, #15
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe05 	bl	800187c <AD5940_Notch50HzAvailable>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <AD5940_ClksCalculate+0x180>
        dl += dl_50 - 1;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      if(AD5940_Notch60HzAvailable(&filter, &dl_60)){
 8001c88:	f107 020e 	add.w	r2, r7, #14
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fea4 	bl	80019e0 <AD5940_Notch60HzAvailable>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <AD5940_ClksCalculate+0x1a6>
        dl += dl_60 - 1;
 8001c9e:	7bba      	ldrb	r2, [r7, #14]
 8001ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ca4:	4413      	add	r3, r2
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      pFilterInfo->DataType = DATATYPE_SINC2;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	601a      	str	r2, [r3, #0]
      pFilterInfo->DataCount += dl; //DL is the extra data input needed for filter to output first data.
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
      AD5940_ClksCalculate(pFilterInfo,&temp);
 8001cc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff1d 	bl	8001b08 <AD5940_ClksCalculate>
      //restore the filter info.
      pFilterInfo->DataType = DATATYPE_NOTCH;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	601a      	str	r2, [r3, #0]
      pFilterInfo->DataCount -= dl;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cdc:	1ad2      	subs	r2, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	605a      	str	r2, [r3, #4]
      break;
 8001ce2:	e050      	b.n	8001d86 <AD5940_ClksCalculate+0x27e>
    }
    case DATATYPE_DFT:
      switch(pFilterInfo->DftSrc)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d843      	bhi.n	8001d74 <AD5940_ClksCalculate+0x26c>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <AD5940_ClksCalculate+0x1ec>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d2d 	.word	0x08001d2d
 8001cf8:	08001d19 	.word	0x08001d19
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d51 	.word	0x08001d51
      {
        case DFTSRC_ADCRAW:
          pFilterInfo->DataType = DATATYPE_ADCRAW;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
 8001d0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fef9 	bl	8001b08 <AD5940_ClksCalculate>
          break;
 8001d16:	e02e      	b.n	8001d76 <AD5940_ClksCalculate+0x26e>
        case DFTSRC_SINC3:
          pFilterInfo->DataType = DATATYPE_SINC3;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
 8001d1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff feef 	bl	8001b08 <AD5940_ClksCalculate>
          break;
 8001d2a:	e024      	b.n	8001d76 <AD5940_ClksCalculate+0x26e>
        case DFTSRC_SINC2NOTCH:
          if(pFilterInfo->BpNotch)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7e5b      	ldrb	r3, [r3, #25]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <AD5940_ClksCalculate+0x234>
            pFilterInfo->DataType = DATATYPE_SINC2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e002      	b.n	8001d42 <AD5940_ClksCalculate+0x23a>
          else
            pFilterInfo->DataType = DATATYPE_NOTCH;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	601a      	str	r2, [r3, #0]
          AD5940_ClksCalculate(pFilterInfo, &temp);
 8001d42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d46:	4619      	mov	r1, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff fedd 	bl	8001b08 <AD5940_ClksCalculate>
          break;
 8001d4e:	e012      	b.n	8001d76 <AD5940_ClksCalculate+0x26e>
        case DFTSRC_AVG:
          pFilterInfo->DataType = DATATYPE_SINC3;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
          pFilterInfo->DataCount *= 1L<<(pFilterInfo->ADCAvgNum+1); /* 0: average2, 1: average4, 2: average8, 3: average16 */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	605a      	str	r2, [r3, #4]
          AD5940_ClksCalculate(pFilterInfo, &temp);
 8001d66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fecb 	bl	8001b08 <AD5940_ClksCalculate>
          break;
 8001d72:	e000      	b.n	8001d76 <AD5940_ClksCalculate+0x26e>
        default:
          break;
 8001d74:	bf00      	nop
      }
      pFilterInfo->DataType = DATATYPE_DFT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	601a      	str	r2, [r3, #0]
      temp += 25; /* add margin */
 8001d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7e:	3319      	adds	r3, #25
 8001d80:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8001d82:	e000      	b.n	8001d86 <AD5940_ClksCalculate+0x27e>
    default:
    break;
 8001d84:	bf00      	nop
  }
  *pClocks = temp;
 8001d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e008      	b.n	8001da0 <AD5940_ClksCalculate+0x298>
  if(pFilterInfo == NULL) return;
 8001d8e:	bf00      	nop
 8001d90:	e006      	b.n	8001da0 <AD5940_ClksCalculate+0x298>
  if(pClocks == NULL) return;
 8001d92:	bf00      	nop
 8001d94:	e004      	b.n	8001da0 <AD5940_ClksCalculate+0x298>
  if(pFilterInfo->ADCSinc2Osr > ADCSINC2OSR_1333) return;
 8001d96:	bf00      	nop
 8001d98:	e002      	b.n	8001da0 <AD5940_ClksCalculate+0x298>
  if(pFilterInfo->ADCSinc3Osr > 2)  return; /* 0: OSR5, 1:OSR4, 2:OSR2 */
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <AD5940_ClksCalculate+0x298>
  if(pFilterInfo->ADCAvgNum > ADCAVGNUM_16) return; /* Average number index:0,1,2,3 */
 8001d9e:	bf00      	nop
}
 8001da0:	3770      	adds	r7, #112	; 0x70
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bdb0      	pop	{r4, r5, r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0800cc68 	.word	0x0800cc68
 8001dac:	0800cc9c 	.word	0x0800cc9c

08001db0 <AD5940_SweepNext>:
   @brief void AD5940_SweepNext(SoftSweepCfg_Type *pSweepCfg, float *pNextFreq)
          For sweep function, calculate next frequency point according to pSweepCfg info.
   @return Return next frequency point in Hz.
*/
void AD5940_SweepNext(SoftSweepCfg_Type *pSweepCfg, float *pNextFreq)
{
 8001db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
   float frequency;

   if(pSweepCfg->SweepLog)/* Log step */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7c1b      	ldrb	r3, [r3, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80c9 	beq.w	8001f58 <AD5940_SweepNext+0x1a8>
   {
      if(pSweepCfg->SweepStart<pSweepCfg->SweepStop) /* Normal */
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d55e      	bpl.n	8001e9a <AD5940_SweepNext+0xea>
      {
         if(++pSweepCfg->SweepIndex == pSweepCfg->SweepPoints)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d102      	bne.n	8001df8 <AD5940_SweepNext+0x48>
            pSweepCfg->SweepIndex = 0;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
         frequency = pSweepCfg->SweepStart*pow(10,pSweepCfg->SweepIndex*log10(pSweepCfg->SweepStop/pSweepCfg->SweepStart)/(pSweepCfg->SweepPoints-1));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fbab 	bl	8000558 <__aeabi_f2d>
 8001e02:	4604      	mov	r4, r0
 8001e04:	460d      	mov	r5, r1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb82 	bl	8000514 <__aeabi_ui2d>
 8001e10:	4680      	mov	r8, r0
 8001e12:	4689      	mov	r9, r1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e24:	ee16 0a90 	vmov	r0, s13
 8001e28:	f7fe fb96 	bl	8000558 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	ec43 2b10 	vmov	d0, r2, r3
 8001e34:	f009 fa8c 	bl	800b350 <log10>
 8001e38:	ec53 2b10 	vmov	r2, r3, d0
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	f7fe fbe2 	bl	8000608 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4690      	mov	r8, r2
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb5e 	bl	8000514 <__aeabi_ui2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4640      	mov	r0, r8
 8001e5e:	4649      	mov	r1, r9
 8001e60:	f7fe fcfc 	bl	800085c <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ec43 2b17 	vmov	d7, r2, r3
 8001e6c:	eeb0 1a47 	vmov.f32	s2, s14
 8001e70:	eef0 1a67 	vmov.f32	s3, s15
 8001e74:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80020b8 <AD5940_SweepNext+0x308>
 8001e78:	f009 faa8 	bl	800b3cc <pow>
 8001e7c:	ec53 2b10 	vmov	r2, r3, d0
 8001e80:	4620      	mov	r0, r4
 8001e82:	4629      	mov	r1, r5
 8001e84:	f7fe fbc0 	bl	8000608 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe feb2 	bl	8000bf8 <__aeabi_d2f>
 8001e94:	4603      	mov	r3, r0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e104      	b.n	80020a4 <AD5940_SweepNext+0x2f4>
      }
      else
      {
         pSweepCfg->SweepIndex --;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]
         if(pSweepCfg->SweepIndex >= pSweepCfg->SweepPoints)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d304      	bcc.n	8001eba <AD5940_SweepNext+0x10a>
            pSweepCfg->SweepIndex = pSweepCfg->SweepPoints-1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	1e5a      	subs	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	615a      	str	r2, [r3, #20]
         frequency = pSweepCfg->SweepStop*pow(10,pSweepCfg->SweepIndex*
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb4a 	bl	8000558 <__aeabi_f2d>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb21 	bl	8000514 <__aeabi_ui2d>
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	4689      	mov	r9, r1
                                     (log10(pSweepCfg->SweepStart/pSweepCfg->SweepStop)/(pSweepCfg->SweepPoints-1)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ee2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ee6:	ee16 0a90 	vmov	r0, s13
 8001eea:	f7fe fb35 	bl	8000558 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	ec43 2b10 	vmov	d0, r2, r3
 8001ef6:	f009 fa2b 	bl	800b350 <log10>
 8001efa:	ec5b ab10 	vmov	sl, fp, d0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb05 	bl	8000514 <__aeabi_ui2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4650      	mov	r0, sl
 8001f10:	4659      	mov	r1, fp
 8001f12:	f7fe fca3 	bl	800085c <__aeabi_ddiv>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
         frequency = pSweepCfg->SweepStop*pow(10,pSweepCfg->SweepIndex*
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	f7fe fb73 	bl	8000608 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	ec43 2b17 	vmov	d7, r2, r3
 8001f2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f2e:	eef0 1a67 	vmov.f32	s3, s15
 8001f32:	ed9f 0b61 	vldr	d0, [pc, #388]	; 80020b8 <AD5940_SweepNext+0x308>
 8001f36:	f009 fa49 	bl	800b3cc <pow>
 8001f3a:	ec53 2b10 	vmov	r2, r3, d0
 8001f3e:	4620      	mov	r0, r4
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7fe fb61 	bl	8000608 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fe53 	bl	8000bf8 <__aeabi_d2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e0a5      	b.n	80020a4 <AD5940_SweepNext+0x2f4>
      }
   }
   else/* Linear step */
   {
      if(pSweepCfg->SweepStart<pSweepCfg->SweepStop) /* Normal */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6c:	d54c      	bpl.n	8002008 <AD5940_SweepNext+0x258>
      {
         if(++pSweepCfg->SweepIndex == pSweepCfg->SweepPoints)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d102      	bne.n	8001f8a <AD5940_SweepNext+0x1da>
            pSweepCfg->SweepIndex = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
         frequency = pSweepCfg->SweepStart + pSweepCfg->SweepIndex*(double)(pSweepCfg->SweepStop-pSweepCfg->SweepStart)/(pSweepCfg->SweepPoints-1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fae2 	bl	8000558 <__aeabi_f2d>
 8001f94:	4604      	mov	r4, r0
 8001f96:	460d      	mov	r5, r1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fab9 	bl	8000514 <__aeabi_ui2d>
 8001fa2:	4680      	mov	r8, r0
 8001fa4:	4689      	mov	r9, r1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	ee17 0a90 	vmov	r0, s15
 8001fba:	f7fe facd 	bl	8000558 <__aeabi_f2d>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4640      	mov	r0, r8
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	f7fe fb1f 	bl	8000608 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4690      	mov	r8, r2
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa9b 	bl	8000514 <__aeabi_ui2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	f7fe fc39 	bl	800085c <__aeabi_ddiv>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4620      	mov	r0, r4
 8001ff0:	4629      	mov	r1, r5
 8001ff2:	f7fe f953 	bl	800029c <__adddf3>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fdfb 	bl	8000bf8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e04d      	b.n	80020a4 <AD5940_SweepNext+0x2f4>
      }
      else
      {
         pSweepCfg->SweepIndex --;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	1e5a      	subs	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	615a      	str	r2, [r3, #20]
         if(pSweepCfg->SweepIndex >= pSweepCfg->SweepPoints)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d304      	bcc.n	8002028 <AD5940_SweepNext+0x278>
            pSweepCfg->SweepIndex = pSweepCfg->SweepPoints-1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	615a      	str	r2, [r3, #20]
         frequency = pSweepCfg->SweepStop + pSweepCfg->SweepIndex*(double)(pSweepCfg->SweepStart - pSweepCfg->SweepStop)/(pSweepCfg->SweepPoints-1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa93 	bl	8000558 <__aeabi_f2d>
 8002032:	4604      	mov	r4, r0
 8002034:	460d      	mov	r5, r1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa6a 	bl	8000514 <__aeabi_ui2d>
 8002040:	4680      	mov	r8, r0
 8002042:	4689      	mov	r9, r1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	ed93 7a01 	vldr	s14, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002054:	ee17 0a90 	vmov	r0, s15
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4640      	mov	r0, r8
 8002062:	4649      	mov	r1, r9
 8002064:	f7fe fad0 	bl	8000608 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4690      	mov	r8, r2
 800206e:	4699      	mov	r9, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	3b01      	subs	r3, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa4c 	bl	8000514 <__aeabi_ui2d>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe fbea 	bl	800085c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f904 	bl	800029c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fdac 	bl	8000bf8 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
      }
   }

   *pNextFreq = frequency;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b4:	f3af 8000 	nop.w
 80020b8:	00000000 	.word	0x00000000
 80020bc:	40240000 	.word	0x40240000

080020c0 <AD5940_StructInit>:
  @param pStruct: Pointer to the structure.
  @param StructSize: The structure size in Byte.
  @return Return None.
**/
void AD5940_StructInit(void *pStruct, uint32_t StructSize)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  memset(pStruct, 0, StructSize);
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	2100      	movs	r1, #0
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f007 fa80 	bl	80095d4 <memset>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <AD5940_ComplexDivInt>:
 * @param a: The dividend.
 * @param b: The divisor.
 * @return Return result.
**/
fImpCar_Type AD5940_ComplexDivInt(iImpCar_Type *a, iImpCar_Type *b)
{
 80020dc:	b480      	push	{r7}
 80020de:	b08b      	sub	sp, #44	; 0x2c
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
  fImpCar_Type res;
  float temp;
  temp = (float)b->Real*b->Real + (float)b->Image*b->Image;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002122:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  res.Real = (float)a->Real*b->Real + (float)a->Image*b->Image;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc7 7a05 	vstr	s15, [r7, #20]
  res.Real /= temp;
 8002166:	edd7 6a05 	vldr	s13, [r7, #20]
 800216a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002172:	edc7 7a05 	vstr	s15, [r7, #20]
  res.Image = (float)a->Image*b->Real - (float)a->Real*b->Image;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b2:	edc7 7a06 	vstr	s15, [r7, #24]
  res.Image /= temp;
 80021b6:	edd7 6a06 	vldr	s13, [r7, #24]
 80021ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c2:	edc7 7a06 	vstr	s15, [r7, #24]
  return res;
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	f107 0214 	add.w	r2, r7, #20
 80021ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	ee07 2a10 	vmov	s14, r2
 80021de:	ee07 3a90 	vmov	s15, r3
}
 80021e2:	eeb0 0a47 	vmov.f32	s0, s14
 80021e6:	eef0 0a67 	vmov.f32	s1, s15
 80021ea:	372c      	adds	r7, #44	; 0x2c
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <AD5940_ComplexMag>:
 * @brief Calculate the complex number magnitude.
 * @param a: The complex number.
 * @return Return magnitude.
**/
float AD5940_ComplexMag(fImpCar_Type *a)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return sqrt(a->Real*a->Real + a->Image*a->Image);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edd3 7a01 	vldr	s15, [r3, #4]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	ee17 0a90 	vmov	r0, s15
 8002224:	f7fe f998 	bl	8000558 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	ec43 2b10 	vmov	d0, r2, r3
 8002230:	f009 f93c 	bl	800b4ac <sqrt>
 8002234:	ec53 2b10 	vmov	r2, r3, d0
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fcdc 	bl	8000bf8 <__aeabi_d2f>
 8002240:	4603      	mov	r3, r0
 8002242:	ee07 3a90 	vmov	s15, r3
}
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <AD5940_ComplexPhase>:
 * @brief Calculate the complex number phase.
 * @param a: The complex number.
 * @return Return phase.
**/
float AD5940_ComplexPhase(fImpCar_Type *a)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return atan2(a->Image, a->Real);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f97b 	bl	8000558 <__aeabi_f2d>
 8002262:	4604      	mov	r4, r0
 8002264:	460d      	mov	r5, r1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f974 	bl	8000558 <__aeabi_f2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	ec43 2b11 	vmov	d1, r2, r3
 8002278:	ec45 4b10 	vmov	d0, r4, r5
 800227c:	f009 f866 	bl	800b34c <atan2>
 8002280:	ec53 2b10 	vmov	r2, r3, d0
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fcb6 	bl	8000bf8 <__aeabi_d2f>
 800228c:	4603      	mov	r3, r0
 800228e:	ee07 3a90 	vmov	s15, r3
}
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bdb0      	pop	{r4, r5, r7, pc}

0800229c <AD5940_ReadWrite8B>:
  @brief Using SPI to transmit one byte and return the received byte.
  @param data: The 8-bit data SPI will transmit.
  @return received data.
**/
static unsigned char AD5940_ReadWrite8B(unsigned char data)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
   uint8_t tx[1], rx[1];
   tx[0] = data;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	733b      	strb	r3, [r7, #12]
   AD5940_ReadWriteNBytes(tx,rx,1);
 80022aa:	f107 0108 	add.w	r1, r7, #8
 80022ae:	f107 030c 	add.w	r3, r7, #12
 80022b2:	2201      	movs	r2, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe ff7b 	bl	80011b0 <AD5940_ReadWriteNBytes>
   return rx[0];
 80022ba:	7a3b      	ldrb	r3, [r7, #8]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <AD5940_ReadWrite16B>:
  @brief Using SPI to transmit two bytes and return the received bytes.
  @param data: The 16-bit data SPI will transmit.
  @return received data.
**/
static uint16_t AD5940_ReadWrite16B(uint16_t data)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
   uint8_t SendBuffer[2];
   uint8_t RecvBuffer[2];
   SendBuffer[0] = data>>8;
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	733b      	strb	r3, [r7, #12]
   SendBuffer[1] = data&0xff;
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	737b      	strb	r3, [r7, #13]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,2);
 80022de:	f107 0108 	add.w	r1, r7, #8
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	2202      	movs	r2, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe ff61 	bl	80011b0 <AD5940_ReadWriteNBytes>
   return (((uint16_t)RecvBuffer[0])<<8)|RecvBuffer[1];
 80022ee:	7a3b      	ldrb	r3, [r7, #8]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	7a7b      	ldrb	r3, [r7, #9]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	b29b      	uxth	r3, r3
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <AD5940_ReadWrite32B>:
 * @brief Using SPI to transmit four bytes and return the received bytes.
 * @param data: The 32-bit data SPI will transmit.
 * @return received data.
**/
static uint32_t AD5940_ReadWrite32B(uint32_t data)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   uint8_t SendBuffer[4];
   uint8_t RecvBuffer[4];

   SendBuffer[0] = (data>>24)&0xff;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0e1b      	lsrs	r3, r3, #24
 8002312:	b2db      	uxtb	r3, r3
 8002314:	733b      	strb	r3, [r7, #12]
   SendBuffer[1] = (data>>16)&0xff;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	b2db      	uxtb	r3, r3
 800231c:	737b      	strb	r3, [r7, #13]
   SendBuffer[2] = (data>> 8)&0xff;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	b2db      	uxtb	r3, r3
 8002324:	73bb      	strb	r3, [r7, #14]
   SendBuffer[3] = (data    )&0xff;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	73fb      	strb	r3, [r7, #15]
   AD5940_ReadWriteNBytes(SendBuffer,RecvBuffer,4);
 800232c:	f107 0108 	add.w	r1, r7, #8
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	2204      	movs	r2, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ff3a 	bl	80011b0 <AD5940_ReadWriteNBytes>
   return (((uint32_t)RecvBuffer[0])<<24)|(((uint32_t)RecvBuffer[1])<<16)|(((uint32_t)RecvBuffer[2])<<8)|RecvBuffer[3];
 800233c:	7a3b      	ldrb	r3, [r7, #8]
 800233e:	061a      	lsls	r2, r3, #24
 8002340:	7a7b      	ldrb	r3, [r7, #9]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	431a      	orrs	r2, r3
 8002346:	7abb      	ldrb	r3, [r7, #10]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	4313      	orrs	r3, r2
 800234c:	7afa      	ldrb	r2, [r7, #11]
 800234e:	4313      	orrs	r3, r2
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <AD5940_SPIWriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
static void AD5940_SPIWriteReg(uint16_t RegAddr, uint32_t RegData)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	80fb      	strh	r3, [r7, #6]
  /* Set register address */
  AD5940_CsClr();
 8002364:	f7fe ff3a 	bl	80011dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
 8002368:	2020      	movs	r0, #32
 800236a:	f7ff ff97 	bl	800229c <AD5940_ReadWrite8B>
  AD5940_ReadWrite16B(RegAddr);
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ffa7 	bl	80022c4 <AD5940_ReadWrite16B>
  AD5940_CsSet();
 8002376:	f7fe ff3d 	bl	80011f4 <AD5940_CsSet>
  /* Add delay here to meet the SPI timing. */
  AD5940_CsClr();
 800237a:	f7fe ff2f 	bl	80011dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_WRITEREG);
 800237e:	202d      	movs	r0, #45	; 0x2d
 8002380:	f7ff ff8c 	bl	800229c <AD5940_ReadWrite8B>
  if(((RegAddr>=0x1000)&&(RegAddr<=0x3014)))
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	d308      	bcc.n	800239e <AD5940_SPIWriteReg+0x46>
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f243 0214 	movw	r2, #12308	; 0x3014
 8002392:	4293      	cmp	r3, r2
 8002394:	d803      	bhi.n	800239e <AD5940_SPIWriteReg+0x46>
    AD5940_ReadWrite32B(RegData);
 8002396:	6838      	ldr	r0, [r7, #0]
 8002398:	f7ff ffb5 	bl	8002306 <AD5940_ReadWrite32B>
 800239c:	e004      	b.n	80023a8 <AD5940_SPIWriteReg+0x50>
  else
    AD5940_ReadWrite16B(RegData);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff8e 	bl	80022c4 <AD5940_ReadWrite16B>
  AD5940_CsSet();
 80023a8:	f7fe ff24 	bl	80011f4 <AD5940_CsSet>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <AD5940_SPIReadReg>:
 * @brief Read register through SPI.
 * @param RegAddr: The register address.
 * @return Return register data.
**/
static uint32_t AD5940_SPIReadReg(uint16_t RegAddr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
  uint32_t Data = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Set register address that we want to read */
  AD5940_CsClr();
 80023c2:	f7fe ff0b 	bl	80011dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_SETADDR);
 80023c6:	2020      	movs	r0, #32
 80023c8:	f7ff ff68 	bl	800229c <AD5940_ReadWrite8B>
  AD5940_ReadWrite16B(RegAddr);
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff78 	bl	80022c4 <AD5940_ReadWrite16B>
  AD5940_CsSet();
 80023d4:	f7fe ff0e 	bl	80011f4 <AD5940_CsSet>
  /* Read it */
  AD5940_CsClr();
 80023d8:	f7fe ff00 	bl	80011dc <AD5940_CsClr>
  AD5940_ReadWrite8B(SPICMD_READREG);
 80023dc:	206d      	movs	r0, #109	; 0x6d
 80023de:	f7ff ff5d 	bl	800229c <AD5940_ReadWrite8B>
  AD5940_ReadWrite8B(0);  //Dummy read
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff ff5a 	bl	800229c <AD5940_ReadWrite8B>
  /* The real data is coming */
  if((RegAddr>=0x1000)&&(RegAddr<=0x3014))
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ee:	d309      	bcc.n	8002404 <AD5940_SPIReadReg+0x50>
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	f243 0214 	movw	r2, #12308	; 0x3014
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d804      	bhi.n	8002404 <AD5940_SPIReadReg+0x50>
    Data = AD5940_ReadWrite32B(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff ff83 	bl	8002306 <AD5940_ReadWrite32B>
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	e004      	b.n	800240e <AD5940_SPIReadReg+0x5a>
  else
    Data = AD5940_ReadWrite16B(0);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff ff5d 	bl	80022c4 <AD5940_ReadWrite16B>
 800240a:	4603      	mov	r3, r0
 800240c:	60fb      	str	r3, [r7, #12]
  AD5940_CsSet();
 800240e:	f7fe fef1 	bl	80011f4 <AD5940_CsSet>
  return Data;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <AD5940_FIFORd>:
  @param pBuffer: Pointer to a buffer that used to store data read back.
  @param uiReadCount: How much data to be read.
  @return none.
**/
void AD5940_FIFORd(uint32_t *pBuffer, uint32_t uiReadCount)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  /* Use function AD5940_SPIReadReg to read REG_AFE_DATAFIFORD is also one method. */
   uint32_t i;

   if(uiReadCount < 3)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d828      	bhi.n	800247e <AD5940_FIFORd+0x62>
   {
      /* This method is more efficient when readcount < 3 */
      uint32_t i;
      AD5940_CsClr();
 800242c:	f7fe fed6 	bl	80011dc <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_SETADDR);
 8002430:	2020      	movs	r0, #32
 8002432:	f7ff ff33 	bl	800229c <AD5940_ReadWrite8B>
      AD5940_ReadWrite16B(REG_AFE_DATAFIFORD);
 8002436:	f242 006c 	movw	r0, #8300	; 0x206c
 800243a:	f7ff ff43 	bl	80022c4 <AD5940_ReadWrite16B>
      AD5940_CsSet();
 800243e:	f7fe fed9 	bl	80011f4 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	e015      	b.n	8002474 <AD5940_FIFORd+0x58>
      {
         AD5940_CsClr();
 8002448:	f7fe fec8 	bl	80011dc <AD5940_CsClr>
         AD5940_ReadWrite8B(SPICMD_READREG);
 800244c:	206d      	movs	r0, #109	; 0x6d
 800244e:	f7ff ff25 	bl	800229c <AD5940_ReadWrite8B>
         AD5940_ReadWrite8B(0);//Write Host status/Don't care
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ff22 	bl	800229c <AD5940_ReadWrite8B>
         pBuffer[i] = AD5940_ReadWrite32B(0);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	18d4      	adds	r4, r2, r3
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff ff50 	bl	8002306 <AD5940_ReadWrite32B>
 8002466:	4603      	mov	r3, r0
 8002468:	6023      	str	r3, [r4, #0]
         AD5940_CsSet();
 800246a:	f7fe fec3 	bl	80011f4 <AD5940_CsSet>
      for(i=0;i<uiReadCount;i++)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d3e5      	bcc.n	8002448 <AD5940_FIFORd+0x2c>
      /* Read back last two FIFO data with none-zero offset*/
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
      AD5940_CsSet();
   }
}
 800247c:	e03c      	b.n	80024f8 <AD5940_FIFORd+0xdc>
      AD5940_CsClr();
 800247e:	f7fe fead 	bl	80011dc <AD5940_CsClr>
      AD5940_ReadWrite8B(SPICMD_READFIFO);
 8002482:	205f      	movs	r0, #95	; 0x5f
 8002484:	f7ff ff0a 	bl	800229c <AD5940_ReadWrite8B>
      for(i=0;i<6;i++)
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e005      	b.n	800249a <AD5940_FIFORd+0x7e>
         AD5940_ReadWrite8B(0);
 800248e:	2000      	movs	r0, #0
 8002490:	f7ff ff04 	bl	800229c <AD5940_ReadWrite8B>
      for(i=0;i<6;i++)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d9f6      	bls.n	800248e <AD5940_FIFORd+0x72>
      for(i=0;i<uiReadCount-2;i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e00b      	b.n	80024be <AD5940_FIFORd+0xa2>
         pBuffer[i] = AD5940_ReadWrite32B(0); /*Offset is 0, so we always read DATAFIFORD register */
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	18d4      	adds	r4, r2, r3
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff ff29 	bl	8002306 <AD5940_ReadWrite32B>
 80024b4:	4603      	mov	r3, r0
 80024b6:	6023      	str	r3, [r4, #0]
      for(i=0;i<uiReadCount-2;i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	3b02      	subs	r3, #2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3ee      	bcc.n	80024a6 <AD5940_FIFORd+0x8a>
      pBuffer[i++] = AD5940_ReadWrite32B(0x44444444);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60fa      	str	r2, [r7, #12]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	18d4      	adds	r4, r2, r3
 80024d4:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
 80024d8:	f7ff ff15 	bl	8002306 <AD5940_ReadWrite32B>
 80024dc:	4603      	mov	r3, r0
 80024de:	6023      	str	r3, [r4, #0]
      pBuffer[i] = AD5940_ReadWrite32B(0x44444444);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	18d4      	adds	r4, r2, r3
 80024e8:	f04f 3044 	mov.w	r0, #1145324612	; 0x44444444
 80024ec:	f7ff ff0b 	bl	8002306 <AD5940_ReadWrite32B>
 80024f0:	4603      	mov	r3, r0
 80024f2:	6023      	str	r3, [r4, #0]
      AD5940_CsSet();
 80024f4:	f7fe fe7e 	bl	80011f4 <AD5940_CsSet>
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <AD5940_WriteReg>:
 * @param RegAddr: The register address.
 * @param RegData: The register data.
 * @return Return None.
**/
void AD5940_WriteReg(uint16_t RegAddr, uint32_t RegData)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	80fb      	strh	r3, [r7, #6]
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <AD5940_WriteReg+0x34>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <AD5940_WriteReg+0x20>
    AD5940_SEQWriteReg(RegAddr, RegData);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff f891 	bl	8001640 <AD5940_SEQWriteReg>
#ifdef CHIPSEL_M355
    AD5940_D2DWriteReg(RegAddr, RegData);
#else
    AD5940_SPIWriteReg(RegAddr, RegData);
#endif
}
 800251e:	e004      	b.n	800252a <AD5940_WriteReg+0x2a>
    AD5940_SPIWriteReg(RegAddr, RegData);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff17 	bl	8002358 <AD5940_SPIWriteReg>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000650 	.word	0x20000650

08002538 <AD5940_ReadReg>:
 *        Otherwise, read register value by SPI.
 * @param RegAddr: The register address.
 * @return Return register value.
**/
uint32_t AD5940_ReadReg(uint16_t RegAddr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	80fb      	strh	r3, [r7, #6]
#ifdef SEQUENCE_GENERATOR
  if(SeqGenDB.EngineStart == bTRUE)
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <AD5940_ReadReg+0x30>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <AD5940_ReadReg+0x1e>
    return AD5940_SEQReadReg(RegAddr);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff f849 	bl	80015e4 <AD5940_SEQReadReg>
 8002552:	4603      	mov	r3, r0
 8002554:	e004      	b.n	8002560 <AD5940_ReadReg+0x28>
  else
#endif
#ifdef CHIPSEL_M355
    return AD5940_D2DReadReg(RegAddr);
#else
    return AD5940_SPIReadReg(RegAddr);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff2b 	bl	80023b4 <AD5940_SPIReadReg>
 800255e:	4603      	mov	r3, r0
#endif
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000650 	.word	0x20000650

0800256c <AD5940_Initialize>:
 * @brief Initialize AD5940. This function must be called whenever there is reset(Software Reset or Hardware reset or Power up) happened.
 *        This function is used to put AD5940 to correct state.
 * @return return None
**/
void AD5940_Initialize(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b09e      	sub	sp, #120	; 0x78
 8002570:	af00      	add	r7, sp, #0
  /* Write following registers with its data sequentially whenever there is a reset happened. */
  const struct
  {
    uint16_t reg_addr;
    uint32_t reg_data;
  }RegTable[]=
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <AD5940_Initialize+0xa8>)
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4611      	mov	r1, r2
 8002578:	2270      	movs	r2, #112	; 0x70
 800257a:	4618      	mov	r0, r3
 800257c:	f007 f8a9 	bl	80096d2 <memcpy>
    {0x2250, 0x103F},
    {0x22B0, 0x203C},
    {0x2230, 0xDE87A5A0},
  };
  //initialize global variables
  SeqGenDB.SeqLen = 0;
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <AD5940_Initialize+0xac>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
  SeqGenDB.RegCount = 0;
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <AD5940_Initialize+0xac>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  SeqGenDB.LastError = AD5940ERR_OK;
 800258c:	4b22      	ldr	r3, [pc, #136]	; (8002618 <AD5940_Initialize+0xac>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  SeqGenDB.EngineStart = bFALSE;
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <AD5940_Initialize+0xac>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
#ifndef CHIPSEL_M355
  AD5940_CsSet(); /* Pull high CS in case it's low */
 8002598:	f7fe fe2c 	bl	80011f4 <AD5940_CsSet>
#endif
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
 800259c:	2300      	movs	r3, #0
 800259e:	677b      	str	r3, [r7, #116]	; 0x74
 80025a0:	e012      	b.n	80025c8 <AD5940_Initialize+0x5c>
    AD5940_WriteReg(RegTable[i].reg_addr, RegTable[i].reg_data);
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	3378      	adds	r3, #120	; 0x78
 80025a8:	443b      	add	r3, r7
 80025aa:	f833 2c74 	ldrh.w	r2, [r3, #-116]
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	3378      	adds	r3, #120	; 0x78
 80025b4:	443b      	add	r3, r7
 80025b6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7ff ff9f 	bl	8002500 <AD5940_WriteReg>
  for(i=0; i<sizeof(RegTable)/sizeof(RegTable[0]); i++)
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	3301      	adds	r3, #1
 80025c6:	677b      	str	r3, [r7, #116]	; 0x74
 80025c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ca:	2b0d      	cmp	r3, #13
 80025cc:	d9e9      	bls.n	80025a2 <AD5940_Initialize+0x36>
  i = AD5940_ReadReg(REG_AFECON_CHIPID);
 80025ce:	f240 4004 	movw	r0, #1028	; 0x404
 80025d2:	f7ff ffb1 	bl	8002538 <AD5940_ReadReg>
 80025d6:	4603      	mov	r3, r0
 80025d8:	677b      	str	r3, [r7, #116]	; 0x74
  if(i == 0x5501)
 80025da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025dc:	f245 5201 	movw	r2, #21761	; 0x5501
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d103      	bne.n	80025ec <AD5940_Initialize+0x80>
    bIsS2silicon = bTRUE;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <AD5940_Initialize+0xb0>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
  ADI_Print("This AD594x!\n");
#endif
  ADI_Print("Note: Current Silicon is %s\n", bIsS2silicon?"S2":"S1");
  ADI_Print("AD5940LIB Version:v%d.%d.%d\n", AD5940LIB_VER_MAJOR, AD5940LIB_VER_MINOR, AD5940LIB_VER_PATCH);
#endif
}
 80025ea:	e00f      	b.n	800260c <AD5940_Initialize+0xa0>
  else if(i == 0x5502)  /* S3 chip-id is 0x5502. The is no difference with S2. */
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	f245 5202 	movw	r2, #21762	; 0x5502
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d103      	bne.n	80025fe <AD5940_Initialize+0x92>
    bIsS2silicon = bTRUE;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <AD5940_Initialize+0xb0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
}
 80025fc:	e006      	b.n	800260c <AD5940_Initialize+0xa0>
  else if(i == 0x5500)
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	f5b3 4faa 	cmp.w	r3, #21760	; 0x5500
 8002604:	d102      	bne.n	800260c <AD5940_Initialize+0xa0>
    bIsS2silicon = bFALSE;
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <AD5940_Initialize+0xb0>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	3778      	adds	r7, #120	; 0x78
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	0800cd14 	.word	0x0800cd14
 8002618:	20000650 	.word	0x20000650
 800261c:	2000064d 	.word	0x2000064d

08002620 <AD5940_AFECtrlS>:
 *        - bFALSE: Disable or power down selected block(s).
 *        - bTRUE:  Enable all selected block(s).
   @return return none.
*/
void AD5940_AFECtrlS(uint32_t AfeCtrlSet, BoolFlag State)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
  /* Check parameters */
  uint32_t tempreg;
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
 800262c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002630:	f7ff ff82 	bl	8002538 <AD5940_ReadReg>
 8002634:	60f8      	str	r0, [r7, #12]
  if (State == bTRUE) {
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d11e      	bne.n	800267a <AD5940_AFECtrlS+0x5a>
    /* Clear bits to enable HPREF and ALDOLimit*/
    if (AfeCtrlSet & AFECTRL_HPREFPWR) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <AD5940_AFECtrlS+0x36>
        tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0320 	bic.w	r3, r3, #32
 800264c:	60fb      	str	r3, [r7, #12]
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f023 0320 	bic.w	r3, r3, #32
 8002654:	607b      	str	r3, [r7, #4]
    }
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <AD5940_AFECtrlS+0x50>
    {
      tempreg &= ~BITM_AFE_AFECON_ALDOILIMITEN;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002666:	60fb      	str	r3, [r7, #12]
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800266e:	607b      	str	r3, [r7, #4]
    }
    tempreg |= AfeCtrlSet;
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	e01e      	b.n	80026b8 <AD5940_AFECtrlS+0x98>
  }
  else
  {
    /* Set bits to Disable HPREF and ALDOLimit*/
    if(AfeCtrlSet & AFECTRL_HPREFPWR)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <AD5940_AFECtrlS+0x74>
    {
        tempreg |= BITM_AFE_AFECON_HPREFDIS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f043 0320 	orr.w	r3, r3, #32
 800268a:	60fb      	str	r3, [r7, #12]
        AfeCtrlSet &= ~AFECTRL_HPREFPWR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f023 0320 	bic.w	r3, r3, #32
 8002692:	607b      	str	r3, [r7, #4]
    }
    if(AfeCtrlSet & AFECTRL_ALDOLIMIT)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <AD5940_AFECtrlS+0x8e>
    {
      tempreg |= BITM_AFE_AFECON_ALDOILIMITEN;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026a4:	60fb      	str	r3, [r7, #12]
      AfeCtrlSet &= ~AFECTRL_ALDOLIMIT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026ac:	607b      	str	r3, [r7, #4]
    }
    tempreg &= ~AfeCtrlSet;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  }
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026be:	f7ff ff1f 	bl	8002500 <AD5940_WriteReg>
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <AD5940_AFEPwrBW>:
          - AFEBW_100KHZ: Set system bandwidth to 100kHz.
          - AFEBW_250KHZ: Set system bandwidth to 250kHz.
   @return return none.
*/
void AD5940_AFEPwrBW(uint32_t AfePwr, uint32_t AfeBw)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  //check parameters
  uint32_t tempreg;
  tempreg = AfePwr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60fb      	str	r3, [r7, #12]
  tempreg |= AfeBw << BITP_AFE_PMBW_SYSBW;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_PMBW, tempreg);
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	f242 20f0 	movw	r0, #8944	; 0x22f0
 80026e8:	f7ff ff0a 	bl	8002500 <AD5940_WriteReg>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <AD5940_REFCfgS>:
   @brief Configure reference buffer include 1.8V/1.1V high/low power buffers.
   @param pBufCfg :Pointer to buffer configure structure;
   @return return none.
*/
void AD5940_REFCfgS(AFERefCfg_Type *pBufCfg)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* HP Reference(bandgap) */
  tempreg = AD5940_ReadReg(REG_AFE_AFECON);
 80026fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002700:	f7ff ff1a 	bl	8002538 <AD5940_ReadReg>
 8002704:	60f8      	str	r0, [r7, #12]
  tempreg &= ~BITM_AFE_AFECON_HPREFDIS;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f023 0320 	bic.w	r3, r3, #32
 800270c:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->HpBandgapEn == bFALSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <AD5940_REFCfgS+0x2a>
    tempreg |= BITM_AFE_AFECON_HPREFDIS;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f043 0320 	orr.w	r3, r3, #32
 800271c:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_AFECON, tempreg);
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002724:	f7ff feec 	bl	8002500 <AD5940_WriteReg>
  /* Reference buffer configure */
  tempreg = AD5940_ReadReg(REG_AFE_BUFSENCON);
 8002728:	f44f 5006 	mov.w	r0, #8576	; 0x2180
 800272c:	f7ff ff04 	bl	8002538 <AD5940_ReadReg>
 8002730:	60f8      	str	r0, [r7, #12]
  if(pBufCfg->Hp1V8BuffEn == bTRUE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d103      	bne.n	8002742 <AD5940_REFCfgS+0x4e>
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCEN;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Hp1V1BuffEn == bTRUE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d103      	bne.n	8002752 <AD5940_REFCfgS+0x5e>
    tempreg |= BITM_AFE_BUFSENCON_V1P1HPADCEN;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f043 0310 	orr.w	r3, r3, #16
 8002750:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Lp1V8BuffEn == bTRUE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	78db      	ldrb	r3, [r3, #3]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d103      	bne.n	8002762 <AD5940_REFCfgS+0x6e>
    tempreg |= BITM_AFE_BUFSENCON_V1P8LPADCEN;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Lp1V1BuffEn == bTRUE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	791b      	ldrb	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d103      	bne.n	8002772 <AD5940_REFCfgS+0x7e>
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCEN;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f043 0320 	orr.w	r3, r3, #32
 8002770:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Hp1V8ThemBuff == bTRUE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7a5b      	ldrb	r3, [r3, #9]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d103      	bne.n	8002782 <AD5940_REFCfgS+0x8e>
    tempreg |= BITM_AFE_BUFSENCON_V1P8THERMSTEN;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Hp1V8Ilimit == bTRUE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7a9b      	ldrb	r3, [r3, #10]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d103      	bne.n	8002792 <AD5940_REFCfgS+0x9e>
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCILIMITEN;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Disc1V8Cap == bTRUE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7adb      	ldrb	r3, [r3, #11]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d103      	bne.n	80027a2 <AD5940_REFCfgS+0xae>
    tempreg |= BITM_AFE_BUFSENCON_V1P8HPADCCHGDIS;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->Disc1V1Cap == bTRUE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7b1b      	ldrb	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d103      	bne.n	80027b2 <AD5940_REFCfgS+0xbe>
    tempreg |= BITM_AFE_BUFSENCON_V1P1LPADCCHGDIS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b0:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_BUFSENCON, tempreg);
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	f44f 5006 	mov.w	r0, #8576	; 0x2180
 80027b8:	f7ff fea2 	bl	8002500 <AD5940_WriteReg>

  /* LPREFBUFCON */
  tempreg = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->LpRefBufEn == bFALSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	799b      	ldrb	r3, [r3, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <AD5940_REFCfgS+0xdc>
    tempreg |= BITM_AFE_LPREFBUFCON_LPBUF2P5DIS;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->LpBandgapEn == bFALSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	795b      	ldrb	r3, [r3, #5]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <AD5940_REFCfgS+0xec>
    tempreg |= BITM_AFE_LPREFBUFCON_LPREFDIS;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
  if(pBufCfg->LpRefBoostEn == bTRUE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	79db      	ldrb	r3, [r3, #7]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d103      	bne.n	80027f0 <AD5940_REFCfgS+0xfc>
    tempreg |= BITM_AFE_LPREFBUFCON_BOOSTCURRENT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_LPREFBUFCON, tempreg);
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	f242 0050 	movw	r0, #8272	; 0x2050
 80027f6:	f7ff fe83 	bl	8002500 <AD5940_WriteReg>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <AD5940_HSLoopCfgS>:
          called excitation loop). This configuration includes HSDAC, HSTIA and Switch matrix.
   @param pHsLoopCfg : Pointer to configure structure;
   @return return none.
*/
void AD5940_HSLoopCfgS(HSLoopCfg_Type *pHsLoopCfg)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  AD5940_HSDacCfgS(&pHsLoopCfg->HsDacCfg);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3310      	adds	r3, #16
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f83c 	bl	800288c <AD5940_HSDacCfgS>
  AD5940_HSTIACfgS(&pHsLoopCfg->HsTiaCfg);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3350      	adds	r3, #80	; 0x50
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f8a7 	bl	800296c <AD5940_HSTIACfgS>
  AD5940_SWMatrixCfgS(&pHsLoopCfg->SWMatCfg);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f809 	bl	8002838 <AD5940_SWMatrixCfgS>
  AD5940_WGCfgS(&pHsLoopCfg->WgCfg);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	331c      	adds	r3, #28
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f8ec 	bl	8002a08 <AD5940_WGCfgS>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <AD5940_SWMatrixCfgS>:
   @brief Initialize switch matrix
   @param pSwMatrix: Pointer to configuration structure
   @return return none.
*/
void AD5940_SWMatrixCfgS(SWMatrixCfg_Type *pSwMatrix)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  AD5940_WriteReg(REG_AFE_DSWFULLCON, pSwMatrix->Dswitch);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f242 1050 	movw	r0, #8528	; 0x2150
 800284a:	f7ff fe59 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_PSWFULLCON, pSwMatrix->Pswitch);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4619      	mov	r1, r3
 8002854:	f242 1058 	movw	r0, #8536	; 0x2158
 8002858:	f7ff fe52 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_NSWFULLCON, pSwMatrix->Nswitch);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4619      	mov	r1, r3
 8002862:	f242 1054 	movw	r0, #8532	; 0x2154
 8002866:	f7ff fe4b 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_TSWFULLCON, pSwMatrix->Tswitch);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4619      	mov	r1, r3
 8002870:	f242 105c 	movw	r0, #8540	; 0x215c
 8002874:	f7ff fe44 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_SWCON, BITM_AFE_SWCON_SWSOURCESEL); /* Update switch configuration */
 8002878:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800287c:	f242 000c 	movw	r0, #8204	; 0x200c
 8002880:	f7ff fe3e 	bl	8002500 <AD5940_WriteReg>
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <AD5940_HSDacCfgS>:
   @brief Initialize HSDAC
   @param pHsDacCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_HSDacCfgS(HSDACCfg_Type *pHsDacCfg)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  //Check parameters
  tempreg = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  if(pHsDacCfg->ExcitBufGain == EXCITBUFGAIN_0P25)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d103      	bne.n	80028a8 <AD5940_HSDacCfgS+0x1c>
    tempreg |= BITM_AFE_HSDACCON_INAMPGNMDE; /* Enable attenuator */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a6:	60fb      	str	r3, [r7, #12]
  if(pHsDacCfg->HsDacGain == HSDACGAIN_0P2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d103      	bne.n	80028b8 <AD5940_HSDacCfgS+0x2c>
    tempreg |= BITM_AFE_HSDACCON_ATTENEN; /* Enable attenuator */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
  tempreg |= (pHsDacCfg->HsDacUpdateRate&0xff)<<BITP_AFE_HSDACCON_RATE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_HSDACCON, tempreg);
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	f242 0010 	movw	r0, #8208	; 0x2010
 80028ce:	f7ff fe17 	bl	8002500 <AD5940_WriteReg>
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <__AD5940_SetDExRTIA>:


static void __AD5940_SetDExRTIA(uint32_t DExPin, uint32_t DeRtia, uint32_t DeRload)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08b      	sub	sp, #44	; 0x2c
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tempreg;
  /* deal with HSTIA DE RTIA */
  if(DeRtia >= HSTIADERTIA_OPEN)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b0a      	cmp	r3, #10
 80028ec:	d902      	bls.n	80028f4 <__AD5940_SetDExRTIA+0x18>
    tempreg = 0x1f << 3;  /* bit field HPTIRES03CON[7:3] */
 80028ee:	23f8      	movs	r3, #248	; 0xf8
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e022      	b.n	800293a <__AD5940_SetDExRTIA+0x5e>
  else if(DeRtia >= HSTIADERTIA_1K)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d904      	bls.n	8002904 <__AD5940_SetDExRTIA+0x28>
  {
    tempreg = (DeRtia - 3 + 11) << 3;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3308      	adds	r3, #8
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
 8002902:	e01a      	b.n	800293a <__AD5940_SetDExRTIA+0x5e>
  }
  else  /* DERTIA 50/100/200Ohm */
  {
    const uint8_t DeRtiaTable[3][5] =
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <__AD5940_SetDExRTIA+0x8c>)
 8002906:	f107 0414 	add.w	r4, r7, #20
 800290a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800290c:	c407      	stmia	r4!, {r0, r1, r2}
 800290e:	8023      	strh	r3, [r4, #0]
 8002910:	3402      	adds	r4, #2
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	7023      	strb	r3, [r4, #0]
//Rload  0      10    30    50    100
			{0x00, 0x01, 0x02, 0x03, 0x06}, /* RTIA 50Ohm */
			{0x03, 0x04, 0x05, 0x06, 0x07}, /* RTIA 100Ohm */
			{0x07, 0x07, 0x09, 0x09, 0x0a}, /* RTIA 200Ohm */
    };
    if(DeRload < HSTIADERLOAD_OPEN)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d80c      	bhi.n	8002936 <__AD5940_SetDExRTIA+0x5a>
      tempreg = (uint32_t)(DeRtiaTable[DeRtia][DeRload])<<3;
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3328      	adds	r3, #40	; 0x28
 8002926:	19da      	adds	r2, r3, r7
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	3b14      	subs	r3, #20
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e001      	b.n	800293a <__AD5940_SetDExRTIA+0x5e>
    else
      tempreg = (0x1f)<<3;  /* Set it to HSTIADERTIA_OPEN. This setting is illegal */
 8002936:	23f8      	movs	r3, #248	; 0xf8
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* deal with HSTIA Rload */
  tempreg |= DeRload;
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4313      	orrs	r3, r2
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
  if(DExPin) //DE1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <__AD5940_SetDExRTIA+0x78>
    AD5940_WriteReg(REG_AFE_DE1RESCON, tempreg);
 8002948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800294a:	f242 00f4 	movw	r0, #8436	; 0x20f4
 800294e:	f7ff fdd7 	bl	8002500 <AD5940_WriteReg>
  else  //DE0
    AD5940_WriteReg(REG_AFE_DE0RESCON, tempreg);
}
 8002952:	e004      	b.n	800295e <__AD5940_SetDExRTIA+0x82>
    AD5940_WriteReg(REG_AFE_DE0RESCON, tempreg);
 8002954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002956:	f242 00f8 	movw	r0, #8440	; 0x20f8
 800295a:	f7ff fdd1 	bl	8002500 <AD5940_WriteReg>
}
 800295e:	bf00      	nop
 8002960:	372c      	adds	r7, #44	; 0x2c
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	0800cd84 	.word	0x0800cd84

0800296c <AD5940_HSTIACfgS>:
   @brief Initialize High speed TIA amplifier
   @param pHsTiaCfg: Pointer to configuration structure
   @return return none.
*/
AD5940Err AD5940_HSTIACfgS(HSTIACfg_Type *pHsTiaCfg)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  //Check parameters
  if(pHsTiaCfg == NULL) return AD5940ERR_NULLP;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <AD5940_HSTIACfgS+0x14>
 800297a:	f06f 0302 	mvn.w	r3, #2
 800297e:	e03f      	b.n	8002a00 <AD5940_HSTIACfgS+0x94>
    /* Available parameter is 1k, 5k,...,160k, short, OPEN */
  if(pHsTiaCfg->HstiaDeRtia < HSTIADERTIA_1K)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d802      	bhi.n	800298e <AD5940_HSTIACfgS+0x22>
    return AD5940ERR_PARA;
 8002988:	f06f 0301 	mvn.w	r3, #1
 800298c:	e038      	b.n	8002a00 <AD5940_HSTIACfgS+0x94>
  if(pHsTiaCfg->HstiaDeRtia > HSTIADERTIA_OPEN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b0b      	cmp	r3, #11
 8002994:	d902      	bls.n	800299c <AD5940_HSTIACfgS+0x30>
    return AD5940ERR_PARA;  /* Parameter is invalid */
 8002996:	f06f 0301 	mvn.w	r3, #1
 800299a:	e031      	b.n	8002a00 <AD5940_HSTIACfgS+0x94>

  if(pHsTiaCfg->HstiaDeRload > HSTIADERLOAD_OPEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d902      	bls.n	80029aa <AD5940_HSTIACfgS+0x3e>
    return AD5940ERR_PARA;  /* Available parameter is OPEN, 0R,..., 100R */
 80029a4:	f06f 0301 	mvn.w	r3, #1
 80029a8:	e02a      	b.n	8002a00 <AD5940_HSTIACfgS+0x94>

  tempreg = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
  tempreg |= pHsTiaCfg->HstiaBias;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_HSTIACON, tempreg);
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	f242 00fc 	movw	r0, #8444	; 0x20fc
 80029be:	f7ff fd9f 	bl	8002500 <AD5940_WriteReg>
  /* HSRTIACON */
  /* Calculate CTIA value */
  tempreg = pHsTiaCfg->HstiaCtia << BITP_AFE_HSRTIACON_CTIACON;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	60fb      	str	r3, [r7, #12]
  tempreg |= pHsTiaCfg->HstiaRtiaSel;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  if(pHsTiaCfg->DiodeClose == bTRUE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d103      	bne.n	80029e4 <AD5940_HSTIACfgS+0x78>
    tempreg |= BITM_AFE_HSRTIACON_TIASW6CON; /* Close switch 6 */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_HSRTIACON, tempreg);
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	f242 00f0 	movw	r0, #8432	; 0x20f0
 80029ea:	f7ff fd89 	bl	8002500 <AD5940_WriteReg>
  /* DExRESCON */
  __AD5940_SetDExRTIA(0, pHsTiaCfg->HstiaDeRtia, pHsTiaCfg->HstiaDeRload);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6919      	ldr	r1, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	461a      	mov	r2, r3
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff ff6f 	bl	80028dc <__AD5940_SetDExRTIA>
#ifdef CHIPSEL_M355
  __AD5940_SetDExRTIA(1, pHsTiaCfg->HstiaDe1Rtia, pHsTiaCfg->HstiaDe1Rload);
#endif

  /* Done */
  return AD5940ERR_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <AD5940_WGCfgS>:
 * @brief Initialize waveform generator
 * @param pWGInit: Pointer to configuration structure
 * @return return none.
*/
void AD5940_WGCfgS(WGCfg_Type *pWGInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  //Check parameters
  uint32_t tempreg;
  if(pWGInit->WgType == WGTYPE_SIN)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d11c      	bne.n	8002a52 <AD5940_WGCfgS+0x4a>
  {
    /* Configure Sine wave Generator */
    AD5940_WriteReg(REG_AFE_WGFCW, pWGInit->SinCfg.SinFreqWord);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f242 0030 	movw	r0, #8240	; 0x2030
 8002a22:	f7ff fd6d 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGAMPLITUDE, pWGInit->SinCfg.SinAmplitudeWord);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f242 003c 	movw	r0, #8252	; 0x203c
 8002a30:	f7ff fd66 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGOFFSET, pWGInit->SinCfg.SinOffsetWord);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f242 0038 	movw	r0, #8248	; 0x2038
 8002a3e:	f7ff fd5f 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGPHASE, pWGInit->SinCfg.SinPhaseWord);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	4619      	mov	r1, r3
 8002a48:	f242 0034 	movw	r0, #8244	; 0x2034
 8002a4c:	f7ff fd58 	bl	8002500 <AD5940_WriteReg>
 8002a50:	e035      	b.n	8002abe <AD5940_WGCfgS+0xb6>
  }
  else if(pWGInit->WgType == WGTYPE_TRAPZ)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d12a      	bne.n	8002ab0 <AD5940_WGCfgS+0xa8>
  {
    /* Configure Trapezoid Generator */
    AD5940_WriteReg(REG_AFE_WGDCLEVEL1, pWGInit->TrapzCfg.WGTrapzDCLevel1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f242 0018 	movw	r0, #8216	; 0x2018
 8002a64:	f7ff fd4c 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDCLEVEL2, pWGInit->TrapzCfg.WGTrapzDCLevel2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f242 001c 	movw	r0, #8220	; 0x201c
 8002a72:	f7ff fd45 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY1, pWGInit->TrapzCfg.WGTrapzDelay1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f242 0020 	movw	r0, #8224	; 0x2020
 8002a80:	f7ff fd3e 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGDELAY2, pWGInit->TrapzCfg.WGTrapzDelay2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f242 0028 	movw	r0, #8232	; 0x2028
 8002a8e:	f7ff fd37 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE1, pWGInit->TrapzCfg.WGTrapzSlope1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4619      	mov	r1, r3
 8002a98:	f242 0024 	movw	r0, #8228	; 0x2024
 8002a9c:	f7ff fd30 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_WGSLOPE2, pWGInit->TrapzCfg.WGTrapzSlope2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f242 002c 	movw	r0, #8236	; 0x202c
 8002aaa:	f7ff fd29 	bl	8002500 <AD5940_WriteReg>
 8002aae:	e006      	b.n	8002abe <AD5940_WGCfgS+0xb6>
  }
  else
  {
    /* Write DAC data. It's only have effect when WgType set to WGTYPE_MMR */
    AD5940_WriteReg(REG_AFE_HSDACDAT, pWGInit->WgCode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f242 0048 	movw	r0, #8264	; 0x2048
 8002aba:	f7ff fd21 	bl	8002500 <AD5940_WriteReg>
  }
  tempreg = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]

  if(pWGInit->GainCalEn == bTRUE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d103      	bne.n	8002ad2 <AD5940_WGCfgS+0xca>
    tempreg |= BITM_AFE_WGCON_DACGAINCAL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f043 0320 	orr.w	r3, r3, #32
 8002ad0:	60fb      	str	r3, [r7, #12]
  if(pWGInit->OffsetCalEn == bTRUE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	795b      	ldrb	r3, [r3, #5]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d103      	bne.n	8002ae2 <AD5940_WGCfgS+0xda>
    tempreg |= BITM_AFE_WGCON_DACOFFSETCAL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f043 0310 	orr.w	r3, r3, #16
 8002ae0:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWGInit->WgType) << BITP_AFE_WGCON_TYPESEL;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_WGCON, tempreg);
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	f242 0014 	movw	r0, #8212	; 0x2014
 8002af4:	f7ff fd04 	bl	8002500 <AD5940_WriteReg>
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <AD5940_WGFreqCtrlS>:
 * @param SinFreqHz: The desired frequency in Hz.
 * @param WGClock: The clock for WG. It's same as system clock and the default value is internal 16MHz HSOSC.
 * @return return none.
*/
void AD5940_WGFreqCtrlS(float SinFreqHz, float WGClock)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b0a:	edc7 0a00 	vstr	s1, [r7]
  uint32_t freq_word;
  freq_word = AD5940_WGFreqWordCal(SinFreqHz, WGClock);
 8002b0e:	edd7 0a00 	vldr	s1, [r7]
 8002b12:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b16:	f000 f80b 	bl	8002b30 <AD5940_WGFreqWordCal>
 8002b1a:	60f8      	str	r0, [r7, #12]
  AD5940_WriteReg(REG_AFE_WGFCW, freq_word);
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	f242 0030 	movw	r0, #8240	; 0x2030
 8002b22:	f7ff fced 	bl	8002500 <AD5940_WriteReg>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <AD5940_WGFreqWordCal>:
   @param SinFreqHz : Target frequency in Hz unit.
   @param WGClock: Waveform generator clock frequency in Hz unit. The clock is sourced from system clock, default value is 16MHz HFOSC.
   @return return none.
*/
uint32_t AD5940_WGFreqWordCal(float SinFreqHz, float WGClock)
{
 8002b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b3a:	edc7 0a00 	vstr	s1, [r7]
  uint32_t temp;
  uint32_t __BITWIDTH_WGFCW = 26;
 8002b3e:	211a      	movs	r1, #26
 8002b40:	60b9      	str	r1, [r7, #8]
  if(bIsS2silicon == bTRUE)
 8002b42:	4928      	ldr	r1, [pc, #160]	; (8002be4 <AD5940_WGFreqWordCal+0xb4>)
 8002b44:	7809      	ldrb	r1, [r1, #0]
 8002b46:	2901      	cmp	r1, #1
 8002b48:	d101      	bne.n	8002b4e <AD5940_WGFreqWordCal+0x1e>
    __BITWIDTH_WGFCW = 30;
 8002b4a:	211e      	movs	r1, #30
 8002b4c:	60b9      	str	r1, [r7, #8]
  if(WGClock == 0) return 0;
 8002b4e:	edd7 7a00 	vldr	s15, [r7]
 8002b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d101      	bne.n	8002b60 <AD5940_WGFreqWordCal+0x30>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e03c      	b.n	8002bda <AD5940_WGFreqWordCal+0xaa>
  temp = (uint32_t)(SinFreqHz*(1LL<<__BITWIDTH_WGFCW)/WGClock + 0.5f);
 8002b60:	f04f 0001 	mov.w	r0, #1
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	68bc      	ldr	r4, [r7, #8]
 8002b6a:	f1a4 0620 	sub.w	r6, r4, #32
 8002b6e:	f1c4 0520 	rsb	r5, r4, #32
 8002b72:	fa01 f304 	lsl.w	r3, r1, r4
 8002b76:	fa00 f606 	lsl.w	r6, r0, r6
 8002b7a:	4333      	orrs	r3, r6
 8002b7c:	fa20 f505 	lsr.w	r5, r0, r5
 8002b80:	432b      	orrs	r3, r5
 8002b82:	fa00 f204 	lsl.w	r2, r0, r4
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f7fe f955 	bl	8000e38 <__aeabi_l2f>
 8002b8e:	ee07 0a10 	vmov	s14, r0
 8002b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b9a:	ed97 7a00 	vldr	s14, [r7]
 8002b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	ee17 3a90 	vmov	r3, s15
 8002bb2:	60fb      	str	r3, [r7, #12]
  if(temp > ((__BITWIDTH_WGFCW == 26)?0xfffff:0xffffff))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b1a      	cmp	r3, #26
 8002bb8:	d101      	bne.n	8002bbe <AD5940_WGFreqWordCal+0x8e>
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <AD5940_WGFreqWordCal+0xb8>)
 8002bbc:	e001      	b.n	8002bc2 <AD5940_WGFreqWordCal+0x92>
 8002bbe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d207      	bcs.n	8002bd8 <AD5940_WGFreqWordCal+0xa8>
    temp = (__BITWIDTH_WGFCW == 26)?0xfffff:0xffffff;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b1a      	cmp	r3, #26
 8002bcc:	d101      	bne.n	8002bd2 <AD5940_WGFreqWordCal+0xa2>
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <AD5940_WGFreqWordCal+0xb8>)
 8002bd0:	e001      	b.n	8002bd6 <AD5940_WGFreqWordCal+0xa6>
 8002bd2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002bd6:	60fb      	str	r3, [r7, #12]

  return temp;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000064d 	.word	0x2000064d
 8002be8:	000fffff 	.word	0x000fffff

08002bec <AD5940_LPLoopCfgS>:
   @brief Configure low power loop include LPDAC LPAmp(PA and TIA)
   @param pLpLoopCfg: Pointer to configure structure;
   @return return none.
*/
void AD5940_LPLoopCfgS(LPLoopCfg_Type *pLpLoopCfg)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  AD5940_LPDACCfgS(&pLpLoopCfg->LpDacCfg);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 f809 	bl	8002c0e <AD5940_LPDACCfgS>
  AD5940_LPAMPCfgS(&pLpLoopCfg->LpAmpCfg);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3320      	adds	r3, #32
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f8a1 	bl	8002d48 <AD5940_LPAMPCfgS>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <AD5940_LPDACCfgS>:
   @brief Initialize LPDAC
   @param pLpDacCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_LPDACCfgS(LPDACCfg_Type *pLpDacCfg)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  tempreg = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  tempreg = (pLpDacCfg->LpDacSrc)<<BITP_AFE_LPDACCON0_WAVETYPE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	019b      	lsls	r3, r3, #6
 8002c20:	60fb      	str	r3, [r7, #12]
  tempreg |= (pLpDacCfg->LpDacVzeroMux)<<BITP_AFE_LPDACCON0_VZEROMUX;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  tempreg |= (pLpDacCfg->LpDacVbiasMux)<<BITP_AFE_LPDACCON0_VBIASMUX;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  tempreg |= (pLpDacCfg->LpDacRef)<<BITP_AFE_LPDACCON0_REFSEL;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  if(pLpDacCfg->DataRst == bFALSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e1b      	ldrb	r3, [r3, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <AD5940_LPDACCfgS+0x48>
    tempreg |= BITM_AFE_LPDACCON0_RSTEN;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
  if(pLpDacCfg->PowerEn == bFALSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7e5b      	ldrb	r3, [r3, #25]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <AD5940_LPDACCfgS+0x58>
    tempreg |= BITM_AFE_LPDACCON0_PWDEN;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	60fb      	str	r3, [r7, #12]
  if(pLpDacCfg->LpdacSel == LPDAC0)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d117      	bne.n	8002c9e <AD5940_LPDACCfgS+0x90>
  {
    AD5940_WriteReg(REG_AFE_LPDACCON0, tempreg);
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	f242 1028 	movw	r0, #8488	; 0x2128
 8002c74:	f7ff fc44 	bl	8002500 <AD5940_WriteReg>
    AD5940_LPDAC0WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8b5a      	ldrh	r2, [r3, #26]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8b9b      	ldrh	r3, [r3, #28]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f000 f825 	bl	8002cd4 <AD5940_LPDAC0WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW0, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f043 0320 	orr.w	r3, r3, #32
 8002c92:	4619      	mov	r1, r3
 8002c94:	f242 1024 	movw	r0, #8484	; 0x2124
 8002c98:	f7ff fc32 	bl	8002500 <AD5940_WriteReg>
  {
    AD5940_WriteReg(REG_AFE_LPDACCON1, tempreg);
    AD5940_LPDAC1WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
  }
}
 8002c9c:	e016      	b.n	8002ccc <AD5940_LPDACCfgS+0xbe>
    AD5940_WriteReg(REG_AFE_LPDACCON1, tempreg);
 8002c9e:	68f9      	ldr	r1, [r7, #12]
 8002ca0:	f242 1034 	movw	r0, #8500	; 0x2134
 8002ca4:	f7ff fc2c 	bl	8002500 <AD5940_WriteReg>
    AD5940_LPDAC1WriteS(pLpDacCfg->DacData12Bit, pLpDacCfg->DacData6Bit);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8b5a      	ldrh	r2, [r3, #26]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8b9b      	ldrh	r3, [r3, #28]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 f82a 	bl	8002d0e <AD5940_LPDAC1WriteS>
    AD5940_WriteReg(REG_AFE_LPDACSW1, pLpDacCfg->LpDacSW|BITM_AFE_LPDACSW0_LPMODEDIS);  /* Overwrite LPDACSW settings. On Si1, this register is not accessible. */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f043 0320 	orr.w	r3, r3, #32
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f242 1030 	movw	r0, #8496	; 0x2130
 8002cc8:	f7ff fc1a 	bl	8002500 <AD5940_WriteReg>
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <AD5940_LPDAC0WriteS>:
   @param Data12Bit: 12Bit DAC data
   @param Data6Bit: 6Bit DAC data
   @return return none.
*/
void AD5940_LPDAC0WriteS(uint16_t Data12Bit, uint8_t Data6Bit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460a      	mov	r2, r1
 8002cde:	80fb      	strh	r3, [r7, #6]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	717b      	strb	r3, [r7, #5]
  /* Check parameter */
  Data6Bit &= 0x3f;
 8002ce4:	797b      	ldrb	r3, [r7, #5]
 8002ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cea:	717b      	strb	r3, [r7, #5]
  Data12Bit &= 0xfff;
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf2:	80fb      	strh	r3, [r7, #6]
  AD5940_WriteReg(REG_AFE_LPDACDAT0, ((uint32_t)Data6Bit<<12)|Data12Bit);
 8002cf4:	797b      	ldrb	r3, [r7, #5]
 8002cf6:	031a      	lsls	r2, r3, #12
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f242 1020 	movw	r0, #8480	; 0x2120
 8002d02:	f7ff fbfd 	bl	8002500 <AD5940_WriteReg>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <AD5940_LPDAC1WriteS>:
   @param Data12Bit: 12Bit DAC data
   @param Data6Bit: 6Bit DAC data
   @return return none.
*/
void AD5940_LPDAC1WriteS(uint16_t Data12Bit, uint8_t Data6Bit)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	460a      	mov	r2, r1
 8002d18:	80fb      	strh	r3, [r7, #6]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	717b      	strb	r3, [r7, #5]
  /* Check parameter */
  Data6Bit &= 0x3f;
 8002d1e:	797b      	ldrb	r3, [r7, #5]
 8002d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d24:	717b      	strb	r3, [r7, #5]
  Data12Bit &= 0xfff;
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	80fb      	strh	r3, [r7, #6]
  AD5940_WriteReg(REG_AFE_LPDACDAT1, ((uint32_t)Data6Bit<<12)|Data12Bit);
 8002d2e:	797b      	ldrb	r3, [r7, #5]
 8002d30:	031a      	lsls	r2, r3, #12
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f242 102c 	movw	r0, #8492	; 0x212c
 8002d3c:	f7ff fbe0 	bl	8002500 <AD5940_WriteReg>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <AD5940_LPAMPCfgS>:
   @brief Initialize LP TIA and PA
   @param pLpAmpCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_LPAMPCfgS(LPAmpCfg_Type *pLpAmpCfg)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  //check parameters
  uint32_t tempreg;

  tempreg = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  if(pLpAmpCfg->LpPaPwrEn == bFALSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <AD5940_LPAMPCfgS+0x1c>
    tempreg |= BITM_AFE_LPTIACON0_PAPDEN;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	60fb      	str	r3, [r7, #12]
  if(pLpAmpCfg->LpTiaPwrEn == bFALSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e5b      	ldrb	r3, [r3, #25]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <AD5940_LPAMPCfgS+0x2c>
    tempreg |= BITM_AFE_LPTIACON0_TIAPDEN;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
  if(pLpAmpCfg->LpAmpPwrMod == LPAMPPWR_HALF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d104      	bne.n	8002d86 <AD5940_LPAMPCfgS+0x3e>
    tempreg |= BITM_AFE_LPTIACON0_HALFPWR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e005      	b.n	8002d92 <AD5940_LPAMPCfgS+0x4a>
  else
  {
    tempreg |= pLpAmpCfg->LpAmpPwrMod<<BITP_AFE_LPTIACON0_IBOOST;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }
  tempreg |= pLpAmpCfg->LpTiaRtia<<BITP_AFE_LPTIACON0_TIAGAIN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  tempreg |= pLpAmpCfg->LpTiaRload<<BITP_AFE_LPTIACON0_TIARL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  tempreg |= pLpAmpCfg->LpTiaRf<<BITP_AFE_LPTIACON0_TIARF;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	035b      	lsls	r3, r3, #13
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  if(pLpAmpCfg->LpAmpSel == LPAMP0)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <AD5940_LPAMPCfgS+0x90>
  {
    AD5940_WriteReg(REG_AFE_LPTIACON0, tempreg);
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	f242 00ec 	movw	r0, #8428	; 0x20ec
 8002dc4:	f7ff fb9c 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW0, pLpAmpCfg->LpTiaSW);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f242 00e4 	movw	r0, #8420	; 0x20e4
 8002dd2:	f7ff fb95 	bl	8002500 <AD5940_WriteReg>
  else
  {
    AD5940_WriteReg(REG_AFE_LPTIACON1, tempreg);
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
  }
}
 8002dd6:	e00b      	b.n	8002df0 <AD5940_LPAMPCfgS+0xa8>
    AD5940_WriteReg(REG_AFE_LPTIACON1, tempreg);
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	f242 00e8 	movw	r0, #8424	; 0x20e8
 8002dde:	f7ff fb8f 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_LPTIASW1, pLpAmpCfg->LpTiaSW);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4619      	mov	r1, r3
 8002de8:	f242 00e0 	movw	r0, #8416	; 0x20e0
 8002dec:	f7ff fb88 	bl	8002500 <AD5940_WriteReg>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <AD5940_DSPCfgS>:
   @brief Configure low power loop include LPDAC LPAmp(PA and TIA)
   @param pDSPCfg: Pointer to configure structure;
   @return return none.
*/
void AD5940_DSPCfgS(DSPCfg_Type *pDSPCfg)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  AD5940_ADCBaseCfgS(&pDSPCfg->ADCBaseCfg);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f862 	bl	8002ecc <AD5940_ADCBaseCfgS>
  AD5940_ADCFilterCfgS(&pDSPCfg->ADCFilterCfg);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f87b 	bl	8002f08 <AD5940_ADCFilterCfgS>
  AD5940_ADCDigCompCfgS(&pDSPCfg->ADCDigCompCfg);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3320      	adds	r3, #32
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f8de 	bl	8002fd8 <AD5940_ADCDigCompCfgS>
  AD5940_DFTCfgS(&pDSPCfg->DftCfg);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3328      	adds	r3, #40	; 0x28
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f920 	bl	8003066 <AD5940_DFTCfgS>
  AD5940_StatisticCfgS(&pDSPCfg->StatCfg);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3334      	adds	r3, #52	; 0x34
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f8f8 	bl	8003020 <AD5940_StatisticCfgS>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <AD5940_ReadAfeResult>:
          - AFERESULT_SINC2: Read SINC2+NOTCH filter result, when Notch filter is bypassed, the result is SINC2
          - AFERESULT_STATSVAR: Statistic variance result
   @return return data read back.
*/
uint32_t AD5940_ReadAfeResult(uint32_t AfeResultSel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t rd = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  //PARA_CHECK((AfeResultSel));
  switch (AfeResultSel)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d83a      	bhi.n	8002ec0 <AD5940_ReadAfeResult+0x88>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <AD5940_ReadAfeResult+0x18>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e6d 	.word	0x08002e6d
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e85 	.word	0x08002e85
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002e9d 	.word	0x08002e9d
 8002e64:	08002ea9 	.word	0x08002ea9
 8002e68:	08002eb5 	.word	0x08002eb5
  {
    case AFERESULT_SINC3:
      rd = AD5940_ReadReg(REG_AFE_ADCDAT);
 8002e6c:	f242 0074 	movw	r0, #8308	; 0x2074
 8002e70:	f7ff fb62 	bl	8002538 <AD5940_ReadReg>
 8002e74:	60f8      	str	r0, [r7, #12]
      break;
 8002e76:	e023      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_SINC2:
      rd = AD5940_ReadReg(REG_AFE_SINC2DAT);
 8002e78:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8002e7c:	f7ff fb5c 	bl	8002538 <AD5940_ReadReg>
 8002e80:	60f8      	str	r0, [r7, #12]
      break;
 8002e82:	e01d      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_TEMPSENSOR:
      rd = AD5940_ReadReg(REG_AFE_TEMPSENSDAT);
 8002e84:	f242 0084 	movw	r0, #8324	; 0x2084
 8002e88:	f7ff fb56 	bl	8002538 <AD5940_ReadReg>
 8002e8c:	60f8      	str	r0, [r7, #12]
      break;
 8002e8e:	e017      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_DFTREAL:
      rd = AD5940_ReadReg(REG_AFE_DFTREAL);
 8002e90:	f242 0078 	movw	r0, #8312	; 0x2078
 8002e94:	f7ff fb50 	bl	8002538 <AD5940_ReadReg>
 8002e98:	60f8      	str	r0, [r7, #12]
      break;
 8002e9a:	e011      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_DFTIMAGE:
      rd = AD5940_ReadReg(REG_AFE_DFTIMAG);
 8002e9c:	f242 007c 	movw	r0, #8316	; 0x207c
 8002ea0:	f7ff fb4a 	bl	8002538 <AD5940_ReadReg>
 8002ea4:	60f8      	str	r0, [r7, #12]
      break;
 8002ea6:	e00b      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_STATSMEAN:
      rd = AD5940_ReadReg(REG_AFE_STATSMEAN);
 8002ea8:	f242 10c8 	movw	r0, #8648	; 0x21c8
 8002eac:	f7ff fb44 	bl	8002538 <AD5940_ReadReg>
 8002eb0:	60f8      	str	r0, [r7, #12]
      break;
 8002eb2:	e005      	b.n	8002ec0 <AD5940_ReadAfeResult+0x88>
    case AFERESULT_STATSVAR:
      rd = AD5940_ReadReg(REG_AFE_STATSVAR);
 8002eb4:	f44f 5007 	mov.w	r0, #8640	; 0x21c0
 8002eb8:	f7ff fb3e 	bl	8002538 <AD5940_ReadReg>
 8002ebc:	60f8      	str	r0, [r7, #12]
      break;
 8002ebe:	bf00      	nop
  }

  return rd;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop

08002ecc <AD5940_ADCBaseCfgS>:
   @brief Initializes ADC peripheral according to the specified parameters in the pADCInit.
   @param pADCInit: Pointer to ADC initialize structure.
   @return return none.
*/
void AD5940_ADCBaseCfgS(ADCBaseCfg_Type *pADCInit)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  //PARA_CHECK(IS_ADCMUXP(pADCInit->ADCMuxP));
  //PARA_CHECK(IS_ADCMUXN(pADCInit->ADCMuxN));
  PARA_CHECK(IS_ADCPGA(pADCInit->ADCPga));
  PARA_CHECK(IS_ADCAAF(pADCInit->ADCAAF));

  tempreg = pADCInit->ADCMuxP;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
  tempreg |= (uint32_t)(pADCInit->ADCMuxN)<<BITP_AFE_ADCCON_MUXSELN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  //if(pADCInit->OffCancEnable == bTRUE)
  //  tempreg |= BITM_AFE_ADCCON_GNOFSELPGA;
  tempreg |= (uint32_t)(pADCInit->ADCPga)<<BITP_AFE_ADCCON_GNPGA;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	f242 10a8 	movw	r0, #8616	; 0x21a8
 8002efc:	f7ff fb00 	bl	8002500 <AD5940_WriteReg>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <AD5940_ADCFilterCfgS>:
   @brief Initializes ADC filter according to the specified parameters in the pFiltCfg.
   @param pFiltCfg: Pointer to filter initialize structure.
   @return return none.
*/
void AD5940_ADCFilterCfgS(ADCFilterCfg_Type *pFiltCfg)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  PARA_CHECK(IS_ADCSINC3OSR(pFiltCfg->ADCSinc3Osr));
  PARA_CHECK(IS_ADCSINC2OSR(pFiltCfg->ADCSinc2Osr));
  PARA_CHECK(IS_ADCAVGNUM(pFiltCfg->ADCAvgNum));
  PARA_CHECK(IS_ADCRATE(pFiltCfg->ADCRate));

  tempreg = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
 8002f10:	f242 0044 	movw	r0, #8260	; 0x2044
 8002f14:	f7ff fb10 	bl	8002538 <AD5940_ReadReg>
 8002f18:	60f8      	str	r0, [r7, #12]
  tempreg &= BITM_AFE_ADCFILTERCON_AVRGEN; /* Keep this bit setting. */
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	60fb      	str	r3, [r7, #12]

  tempreg |= pFiltCfg->ADCRate;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  if(pFiltCfg->BpNotch == bTRUE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7c1b      	ldrb	r3, [r3, #16]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d103      	bne.n	8002f3c <AD5940_ADCFilterCfgS+0x34>
    tempreg |= BITM_AFE_ADCFILTERCON_LPFBYPEN;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f043 0310 	orr.w	r3, r3, #16
 8002f3a:	60fb      	str	r3, [r7, #12]
  if(pFiltCfg->BpSinc3 == bTRUE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7c5b      	ldrb	r3, [r3, #17]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d103      	bne.n	8002f4c <AD5940_ADCFilterCfgS+0x44>
    tempreg |= BITM_AFE_ADCFILTERCON_SINC3BYP;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f4a:	60fb      	str	r3, [r7, #12]
   * Average filter is enabled when DFT source is @ref DFTSRC_AVG in function @ref AD5940_DFTCfgS.
   * Once average function is enabled, it's automatically set as DFT source, register DFTCON.DFTINSEL is ignored.
   */
  //if(pFiltCfg->AverageEnable == bTRUE)
  //  tempreg |= BITM_AFE_ADCFILTERCON_AVRGEN;
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc2Osr)<<BITP_AFE_ADCFILTERCON_SINC2OSR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  tempreg |= (uint32_t)(pFiltCfg->ADCSinc3Osr)<<BITP_AFE_ADCFILTERCON_SINC3OSR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	031b      	lsls	r3, r3, #12
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  tempreg |= (uint32_t)(pFiltCfg->ADCAvgNum)<<BITP_AFE_ADCFILTERCON_AVRGNUM;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	039b      	lsls	r3, r3, #14
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  AD5940_WriteReg(REG_AFE_ADCFILTERCON, tempreg);
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	f242 0044 	movw	r0, #8260	; 0x2044
 8002f76:	f7ff fac3 	bl	8002500 <AD5940_WriteReg>

  /* SINC2+Notch has a block enable/disable bit in AFECON register */
  if(pFiltCfg->Sinc2NotchEnable)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7c9b      	ldrb	r3, [r3, #18]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <AD5940_ADCFilterCfgS+0x84>
  {
    AD5940_AFECtrlS(AFECTRL_SINC2NOTCH,bTRUE);
 8002f82:	2101      	movs	r1, #1
 8002f84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002f88:	f7ff fb4a 	bl	8002620 <AD5940_AFECtrlS>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <AD5940_ADCMuxCfgS>:
          - ADCMUXP_P_NODE: Excitation loop P node

   @return return none.
*/
void AD5940_ADCMuxCfgS(uint32_t ADCMuxP, uint32_t ADCMuxN)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tempreg;
  //PARA_CHECK(IS_ADCMUXP(ADCMuxP));
  //PARA_CHECK(IS_ADCMUXN(ADCMuxN));

  tempreg = AD5940_ReadReg(REG_AFE_ADCCON);
 8002f9e:	f242 10a8 	movw	r0, #8616	; 0x21a8
 8002fa2:	f7ff fac9 	bl	8002538 <AD5940_ReadReg>
 8002fa6:	60f8      	str	r0, [r7, #12]
  tempreg &= ~(BITM_AFE_ADCCON_MUXSELN|BITM_AFE_ADCCON_MUXSELP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 53f9 	bic.w	r3, r3, #7968	; 0x1f20
 8002fae:	f023 031f 	bic.w	r3, r3, #31
 8002fb2:	60fb      	str	r3, [r7, #12]
  tempreg |= ADCMuxP<<BITP_AFE_ADCCON_MUXSELP;
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  tempreg |= ADCMuxN<<BITP_AFE_ADCCON_MUXSELN;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_ADCCON, tempreg);
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	f242 10a8 	movw	r0, #8616	; 0x21a8
 8002fcc:	f7ff fa98 	bl	8002500 <AD5940_WriteReg>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <AD5940_ADCDigCompCfgS>:
   @brief Set ADC digital comparator function
   @param pCompCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_ADCDigCompCfgS(ADCDigComp_Type *pCompCfg)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  //PARA_CHECK((AfeResultSel));
  AD5940_WriteReg(REG_AFE_ADCMIN, pCompCfg->ADCMin);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f242 00a8 	movw	r0, #8360	; 0x20a8
 8002fea:	f7ff fa89 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMINSM, pCompCfg->ADCMinHys);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	885b      	ldrh	r3, [r3, #2]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f242 00ac 	movw	r0, #8364	; 0x20ac
 8002ff8:	f7ff fa82 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAX, pCompCfg->ADCMax);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	889b      	ldrh	r3, [r3, #4]
 8003000:	4619      	mov	r1, r3
 8003002:	f242 00b0 	movw	r0, #8368	; 0x20b0
 8003006:	f7ff fa7b 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_ADCMAXSMEN, pCompCfg->ADCMaxHys);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	88db      	ldrh	r3, [r3, #6]
 800300e:	4619      	mov	r1, r3
 8003010:	f242 00b4 	movw	r0, #8372	; 0x20b4
 8003014:	f7ff fa74 	bl	8002500 <AD5940_WriteReg>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <AD5940_StatisticCfgS>:
   @brief Configure statistic functions
   @param pStatCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_StatisticCfgS(StatCfg_Type *pStatCfg)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  //check parameters
  tempreg = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  if(pStatCfg->StatEnable == bTRUE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7a1b      	ldrb	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d103      	bne.n	800303c <AD5940_StatisticCfgS+0x1c>
    tempreg |= BITM_AFE_STATSCON_STATSEN;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
  tempreg |= (pStatCfg->StatSample) << BITP_AFE_STATSCON_SAMPLENUM;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
  tempreg |= (pStatCfg->StatDev) << BITP_AFE_STATSCON_STDDEV;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	01db      	lsls	r3, r3, #7
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_STATSCON, tempreg);
 8003054:	68f9      	ldr	r1, [r7, #12]
 8003056:	f242 10c4 	movw	r0, #8644	; 0x21c4
 800305a:	f7ff fa51 	bl	8002500 <AD5940_WriteReg>
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <AD5940_DFTCfgS>:
   @brief Configure DFT number and source and hanning window
   @param pDftCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_DFTCfgS(DFTCfg_Type *pDftCfg)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint32_t reg_dftcon, reg_adcfilter;

  reg_dftcon = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  /* Deal with DFTSRC_AVG. Once average function is enabled, it's automatically set as DFT source */
  reg_adcfilter = AD5940_ReadReg(REG_AFE_ADCFILTERCON);
 8003072:	f242 0044 	movw	r0, #8260	; 0x2044
 8003076:	f7ff fa5f 	bl	8002538 <AD5940_ReadReg>
 800307a:	60b8      	str	r0, [r7, #8]
  if(pDftCfg->DftSrc == DFTSRC_AVG)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d109      	bne.n	8003098 <AD5940_DFTCfgS+0x32>
  {
    reg_adcfilter |= BITM_AFE_ADCFILTERCON_AVRGEN;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308a:	60bb      	str	r3, [r7, #8]
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	f242 0044 	movw	r0, #8260	; 0x2044
 8003092:	f7ff fa35 	bl	8002500 <AD5940_WriteReg>
 8003096:	e00e      	b.n	80030b6 <AD5940_DFTCfgS+0x50>
  }
  else
  {
    /* Disable Average function and set correct DFT source */
    reg_adcfilter &= ~BITM_AFE_ADCFILTERCON_AVRGEN;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309e:	60bb      	str	r3, [r7, #8]
    AD5940_WriteReg(REG_AFE_ADCFILTERCON, reg_adcfilter);
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	f242 0044 	movw	r0, #8260	; 0x2044
 80030a6:	f7ff fa2b 	bl	8002500 <AD5940_WriteReg>

    /* Set new DFT source */
    reg_dftcon |= (pDftCfg->DftSrc) << BITP_AFE_DFTCON_DFTINSEL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	051b      	lsls	r3, r3, #20
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }
  /* Set DFT number */
  reg_dftcon |= (pDftCfg->DftNum) << BITP_AFE_DFTCON_DFTNUM;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  if(pDftCfg->HanWinEn == bTRUE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a1b      	ldrb	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d103      	bne.n	80030d2 <AD5940_DFTCfgS+0x6c>
    reg_dftcon |= BITM_AFE_DFTCON_HANNINGEN;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_DFTCON, reg_dftcon);
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	f242 00d0 	movw	r0, #8400	; 0x20d0
 80030d8:	f7ff fa12 	bl	8002500 <AD5940_WriteReg>
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <AD5940_FIFOCfg>:
   @brief Configure AD5940 FIFO
   @param pFifoCfg: Pointer to configuration structure.
   @return return none.
*/
void AD5940_FIFOCfg(FIFOCfg_Type *pFifoCfg)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  //check parameters
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO firstly! */
 80030ec:	2100      	movs	r1, #0
 80030ee:	f242 0008 	movw	r0, #8200	; 0x2008
 80030f2:	f7ff fa05 	bl	8002500 <AD5940_WriteReg>
  /* CMDDATACON register. Configure this firstly */
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
 80030f6:	f242 10d8 	movw	r0, #8664	; 0x21d8
 80030fa:	f7ff fa1d 	bl	8002538 <AD5940_ReadReg>
 80030fe:	60f8      	str	r0, [r7, #12]
  tempreg &= BITM_AFE_CMDDATACON_CMD_MEM_SEL|BITM_AFE_CMDDATACON_CMDMEMMDE; /* Keep sequencer memory settings */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003106:	60fb      	str	r3, [r7, #12]
  tempreg |= pFifoCfg->FIFOMode << BITP_AFE_CMDDATACON_DATAMEMMDE; 				  /* Data FIFO mode: stream or FIFO */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	025b      	lsls	r3, r3, #9
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
  tempreg |= pFifoCfg->FIFOSize << BITP_AFE_CMDDATACON_DATA_MEM_SEL;  		  /* Data FIFO memory size */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  /* The reset memory can be used for sequencer, configure it by function AD5940_SEQCfg() */
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	f242 10d8 	movw	r0, #8664	; 0x21d8
 8003126:	f7ff f9eb 	bl	8002500 <AD5940_WriteReg>

  /* FIFO Threshold */
  AD5940_WriteReg(REG_AFE_DATAFIFOTHRES, pFifoCfg->FIFOThresh << BITP_AFE_DATAFIFOTHRES_HIGHTHRES);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	4619      	mov	r1, r3
 8003132:	f242 10e0 	movw	r0, #8672	; 0x21e0
 8003136:	f7ff f9e3 	bl	8002500 <AD5940_WriteReg>
  /* FIFOCON register. Final step is to enable FIFO */
  tempreg = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  if(pFifoCfg->FIFOEn == bTRUE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d103      	bne.n	800314e <AD5940_FIFOCfg+0x6a>
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;																/* Enable FIFO after everything set. */
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800314c:	60fb      	str	r3, [r7, #12]
  tempreg |= pFifoCfg->FIFOSrc << BITP_AFE_FIFOCON_DATAFIFOSRCSEL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	035b      	lsls	r3, r3, #13
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	f242 0008 	movw	r0, #8200	; 0x2008
 8003160:	f7ff f9ce 	bl	8002500 <AD5940_WriteReg>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <AD5940_FIFOCtrlS>:
 *      - FIFOSRC_MEAN        Statistic mean output
 * @param FifoEn: enable or disable the FIFO.
 * @return return none.
*/
void AD5940_FIFOCtrlS(uint32_t FifoSrc, BoolFlag FifoEn)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
  uint32_t tempreg;

  tempreg = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  if(FifoEn == bTRUE)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d103      	bne.n	800318a <AD5940_FIFOCtrlS+0x1e>
    tempreg |= BITM_AFE_FIFOCON_DATAFIFOEN;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003188:	60fb      	str	r3, [r7, #12]
  tempreg |= FifoSrc << BITP_AFE_FIFOCON_DATAFIFOSRCSEL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	035b      	lsls	r3, r3, #13
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_FIFOCON, tempreg);
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	f242 0008 	movw	r0, #8200	; 0x2008
 800319a:	f7ff f9b1 	bl	8002500 <AD5940_WriteReg>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <AD5940_FIFOGetCnt>:
/**
 * @brief Get Data count in FIFO
 * @return return none.
*/
uint32_t AD5940_FIFOGetCnt(void)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	af00      	add	r7, sp, #0
  return AD5940_ReadReg(REG_AFE_FIFOCNTSTA) >> BITP_AFE_FIFOCNTSTA_DATAFIFOCNTSTA;
 80031aa:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 80031ae:	f7ff f9c3 	bl	8002538 <AD5940_ReadReg>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0c1b      	lsrs	r3, r3, #16
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}

080031ba <AD5940_SEQCfg>:
 * @brief Initialize Sequencer
 * @param pSeqCfg: Pointer to configuration structure
   @return return none.
*/
void AD5940_SEQCfg(SEQCfg_Type *pSeqCfg)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* check parameters */
  uint32_t tempreg, fifocon;

  fifocon = AD5940_ReadReg(REG_AFE_FIFOCON);
 80031c2:	f242 0008 	movw	r0, #8200	; 0x2008
 80031c6:	f7ff f9b7 	bl	8002538 <AD5940_ReadReg>
 80031ca:	60b8      	str	r0, [r7, #8]
  AD5940_WriteReg(REG_AFE_FIFOCON, 0);  /* Disable FIFO before changing memory configuration */
 80031cc:	2100      	movs	r1, #0
 80031ce:	f242 0008 	movw	r0, #8200	; 0x2008
 80031d2:	f7ff f995 	bl	8002500 <AD5940_WriteReg>
  /* Configure CMDDATACON register */
  tempreg = AD5940_ReadReg(REG_AFE_CMDDATACON);
 80031d6:	f242 10d8 	movw	r0, #8664	; 0x21d8
 80031da:	f7ff f9ad 	bl	8002538 <AD5940_ReadReg>
 80031de:	60f8      	str	r0, [r7, #12]
  tempreg &= ~(BITM_AFE_CMDDATACON_CMDMEMMDE|BITM_AFE_CMDDATACON_CMD_MEM_SEL);  /* Clear settings for sequencer memory */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e6:	60fb      	str	r3, [r7, #12]
  tempreg |= (1L) << BITP_AFE_CMDDATACON_CMDMEMMDE;    										  /* Sequencer is always in memory mode */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	60fb      	str	r3, [r7, #12]
  tempreg |= (pSeqCfg->SeqMemSize) << BITP_AFE_CMDDATACON_CMD_MEM_SEL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_CMDDATACON, tempreg);
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	f242 10d8 	movw	r0, #8664	; 0x21d8
 8003200:	f7ff f97e 	bl	8002500 <AD5940_WriteReg>

  if(pSeqCfg->SeqCntCRCClr)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	79db      	ldrb	r3, [r3, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <AD5940_SEQCfg+0x66>
  {
    AD5940_WriteReg(REG_AFE_SEQCON, 0);  /* Disable sequencer firstly */
 800320c:	2100      	movs	r1, #0
 800320e:	f242 0004 	movw	r0, #8196	; 0x2004
 8003212:	f7ff f975 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_SEQCNT, 0);  /* When sequencer is disabled, any write to SEQCNT will clear CNT and CRC register */
 8003216:	2100      	movs	r1, #0
 8003218:	f242 0064 	movw	r0, #8292	; 0x2064
 800321c:	f7ff f970 	bl	8002500 <AD5940_WriteReg>
  }
  tempreg = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  if(pSeqCfg->SeqEnable == bTRUE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	791b      	ldrb	r3, [r3, #4]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d103      	bne.n	8003234 <AD5940_SEQCfg+0x7a>
    tempreg |= BITM_AFE_SEQCON_SEQEN;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
  tempreg |= (pSeqCfg->SeqWrTimer) << BITP_AFE_SEQCON_SEQWRTMR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_AFE_SEQCON, tempreg);
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	f242 0004 	movw	r0, #8196	; 0x2004
 8003246:	f7ff f95b 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_FIFOCON, fifocon);  /* restore FIFO configuration */
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	f242 0008 	movw	r0, #8200	; 0x2008
 8003250:	f7ff f956 	bl	8002500 <AD5940_WriteReg>
  // if(pSeqCfg->SeqBreakEn)
  //   tempreg |= 0x01;  // add register definition? bitm_afe_
  // if(pSeqCfg->SeqIgnoreEn)
  //   tempreg |= 0x02;
  // AD5940_WriteReg(0x21dc, tempreg);
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <AD5940_SEQMmrTrig>:
/**
 * @brief Trigger sequencer by register write.
 * @return return none.
**/
void AD5940_SEQMmrTrig(uint32_t SeqId)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if(SeqId > SEQID_3)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d809      	bhi.n	800327e <AD5940_SEQMmrTrig+0x22>
    return;
  AD5940_WriteReg(REG_AFECON_TRIGSEQ, 1L<<SeqId);
 800326a:	2201      	movs	r2, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	4619      	mov	r1, r3
 8003274:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8003278:	f7ff f942 	bl	8002500 <AD5940_WriteReg>
 800327c:	e000      	b.n	8003280 <AD5940_SEQMmrTrig+0x24>
    return;
 800327e:	bf00      	nop
}
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <AD5940_SEQCmdWrite>:
/**
 * @brief Write sequencer commands to AD5940 SRAM.
 * @return return none.
**/
void AD5940_SEQCmdWrite(uint32_t StartAddr, const uint32_t *pCommand, uint32_t CmdCnt)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
  while(CmdCnt--)
 8003292:	e010      	b.n	80032b6 <AD5940_SEQCmdWrite+0x30>
  {
    AD5940_WriteReg(REG_AFE_CMDFIFOWADDR, StartAddr++);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60fa      	str	r2, [r7, #12]
 800329a:	4619      	mov	r1, r3
 800329c:	f242 10d4 	movw	r0, #8660	; 0x21d4
 80032a0:	f7ff f92e 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_AFE_CMDFIFOWRITE, *pCommand++);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	1d1a      	adds	r2, r3, #4
 80032a8:	60ba      	str	r2, [r7, #8]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f242 0070 	movw	r0, #8304	; 0x2070
 80032b2:	f7ff f925 	bl	8002500 <AD5940_WriteReg>
  while(CmdCnt--)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e9      	bne.n	8003294 <AD5940_SEQCmdWrite+0xe>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <AD5940_SEQInfoCfg>:
          Info(address and length) in MCU.
   @param pSeq: Pointer to configuration structure. Specify sequence start address in SRAM and sequence length.
   @return return none.
*/
void AD5940_SEQInfoCfg(SEQInfo_Type *pSeq)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  switch(pSeq->SeqId)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d83b      	bhi.n	8003354 <AD5940_SEQInfoCfg+0x88>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <AD5940_SEQInfoCfg+0x18>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	0800330d 	.word	0x0800330d
 80032ec:	08003325 	.word	0x08003325
 80032f0:	0800333d 	.word	0x0800333d
  {
    case SEQID_0:
    /* Configure SEQINFO register */
    AD5940_WriteReg(REG_AFE_SEQ0INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4313      	orrs	r3, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f242 10cc 	movw	r0, #8652	; 0x21cc
 8003306:	f7ff f8fb 	bl	8002500 <AD5940_WriteReg>
    break;
 800330a:	e024      	b.n	8003356 <AD5940_SEQInfoCfg+0x8a>
    case SEQID_1:
    AD5940_WriteReg(REG_AFE_SEQ1INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4313      	orrs	r3, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f242 10e8 	movw	r0, #8680	; 0x21e8
 800331e:	f7ff f8ef 	bl	8002500 <AD5940_WriteReg>
    break;
 8003322:	e018      	b.n	8003356 <AD5940_SEQInfoCfg+0x8a>
    case SEQID_2:
    AD5940_WriteReg(REG_AFE_SEQ2INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8003336:	f7ff f8e3 	bl	8002500 <AD5940_WriteReg>
    break;
 800333a:	e00c      	b.n	8003356 <AD5940_SEQInfoCfg+0x8a>
    case SEQID_3:
    AD5940_WriteReg(REG_AFE_SEQ3INFO, (pSeq->SeqLen<< 16) | pSeq->SeqRamAddr);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	041a      	lsls	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4313      	orrs	r3, r2
 8003348:	4619      	mov	r1, r3
 800334a:	f242 10e4 	movw	r0, #8676	; 0x21e4
 800334e:	f7ff f8d7 	bl	8002500 <AD5940_WriteReg>
    break;
 8003352:	e000      	b.n	8003356 <AD5940_SEQInfoCfg+0x8a>
    default:
    break;
 8003354:	bf00      	nop
  }
  if(pSeq->WriteSRAM == bTRUE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7b1b      	ldrb	r3, [r3, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d108      	bne.n	8003370 <AD5940_SEQInfoCfg+0xa4>
  {
    AD5940_SEQCmdWrite(pSeq->SeqRamAddr, pSeq->pSeqCmd, pSeq->SeqLen);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6858      	ldr	r0, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff ff8b 	bl	8003286 <AD5940_SEQCmdWrite>
  }
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <AD5940_SEQGpioCtrlS>:
          - The combination of GPIO pins. The selected pins will be set to High. Others will be pulled low.
   @return return None.

**/
void AD5940_SEQGpioCtrlS(uint32_t Gpio)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  AD5940_WriteReg(REG_AFE_SYNCEXTDEVICE, Gpio);
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	f242 0054 	movw	r0, #8276	; 0x2054
 8003386:	f7ff f8bb 	bl	8002500 <AD5940_WriteReg>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <AD5940_WUPTCfg>:
 * @brief Configure Wakeup Timer
 * @param pWuptCfg: Pointer to configuration structure.
 * @return return none.
*/
void AD5940_WUPTCfg(WUPTCfg_Type *pWuptCfg)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  //check parameters
  /* Sleep and Wakeup time */
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPL, (pWuptCfg->SeqxWakeupTime[0] & 0xFFFF));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	f640 0008 	movw	r0, #2056	; 0x808
 80033a6:	f7ff f8ab 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0WUPH, (pWuptCfg->SeqxWakeupTime[0] & 0xF0000)>>16);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	4619      	mov	r1, r3
 80033b6:	f640 000c 	movw	r0, #2060	; 0x80c
 80033ba:	f7ff f8a1 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPL, (pWuptCfg->SeqxSleepTime[0] & 0xFFFF));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4619      	mov	r1, r3
 80033c6:	f44f 6001 	mov.w	r0, #2064	; 0x810
 80033ca:	f7ff f899 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ0SLEEPH, (pWuptCfg->SeqxSleepTime[0] & 0xF0000)>>16);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	4619      	mov	r1, r3
 80033da:	f640 0014 	movw	r0, #2068	; 0x814
 80033de:	f7ff f88f 	bl	8002500 <AD5940_WriteReg>

  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPL, (pWuptCfg->SeqxWakeupTime[1] & 0xFFFF));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	f640 0018 	movw	r0, #2072	; 0x818
 80033ee:	f7ff f887 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1WUPH, (pWuptCfg->SeqxWakeupTime[1] & 0xF0000)>>16);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	4619      	mov	r1, r3
 80033fe:	f640 001c 	movw	r0, #2076	; 0x81c
 8003402:	f7ff f87d 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPL, (pWuptCfg->SeqxSleepTime[1] & 0xFFFF));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	b29b      	uxth	r3, r3
 800340c:	4619      	mov	r1, r3
 800340e:	f44f 6002 	mov.w	r0, #2080	; 0x820
 8003412:	f7ff f875 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ1SLEEPH, (pWuptCfg->SeqxSleepTime[1] & 0xF0000)>>16);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	4619      	mov	r1, r3
 8003422:	f640 0024 	movw	r0, #2084	; 0x824
 8003426:	f7ff f86b 	bl	8002500 <AD5940_WriteReg>

  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPL, (pWuptCfg->SeqxWakeupTime[2] & 0xFFFF));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	b29b      	uxth	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	f640 0028 	movw	r0, #2088	; 0x828
 8003436:	f7ff f863 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2WUPH, (pWuptCfg->SeqxWakeupTime[2] & 0xF0000)>>16);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4619      	mov	r1, r3
 8003446:	f640 002c 	movw	r0, #2092	; 0x82c
 800344a:	f7ff f859 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPL, (pWuptCfg->SeqxSleepTime[2] & 0xFFFF));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	b29b      	uxth	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	f44f 6003 	mov.w	r0, #2096	; 0x830
 800345a:	f7ff f851 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ2SLEEPH, (pWuptCfg->SeqxSleepTime[2] & 0xF0000)>>16);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4619      	mov	r1, r3
 800346a:	f640 0034 	movw	r0, #2100	; 0x834
 800346e:	f7ff f847 	bl	8002500 <AD5940_WriteReg>

  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPL, (pWuptCfg->SeqxWakeupTime[3] & 0xFFFF));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	b29b      	uxth	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	f640 0038 	movw	r0, #2104	; 0x838
 800347e:	f7ff f83f 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3WUPH, (pWuptCfg->SeqxWakeupTime[3] & 0xF0000)>>16);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	4619      	mov	r1, r3
 800348e:	f640 003c 	movw	r0, #2108	; 0x83c
 8003492:	f7ff f835 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPL, (pWuptCfg->SeqxSleepTime[3] & 0xFFFF));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	b29b      	uxth	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	f44f 6004 	mov.w	r0, #2112	; 0x840
 80034a2:	f7ff f82d 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_WUPTMR_SEQ3SLEEPH, (pWuptCfg->SeqxSleepTime[3] & 0xF0000)>>16);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4619      	mov	r1, r3
 80034b2:	f640 0044 	movw	r0, #2116	; 0x844
 80034b6:	f7ff f823 	bl	8002500 <AD5940_WriteReg>

  /* TMRCON register */
  //if(pWuptCfg->WakeupEn == bTRUE)  /* enable use Wupt to wakeup AFE */
  /* We always allow Wupt to wakeup AFE automatically. */
  AD5940_WriteReg(REG_ALLON_TMRCON, BITM_ALLON_TMRCON_TMRINTEN);
 80034ba:	2101      	movs	r1, #1
 80034bc:	f640 201c 	movw	r0, #2588	; 0xa1c
 80034c0:	f7ff f81e 	bl	8002500 <AD5940_WriteReg>
  /* Wupt order */
  tempreg = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[0]&0x03) << BITP_WUPTMR_SEQORDER_SEQA; /* position A */
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[1]&0x03) << BITP_WUPTMR_SEQORDER_SEQB; /* position B */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[2]&0x03) << BITP_WUPTMR_SEQORDER_SEQC; /* position C */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[3]&0x03) << BITP_WUPTMR_SEQORDER_SEQD; /* position D */
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	019b      	lsls	r3, r3, #6
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[4]&0x03) << BITP_WUPTMR_SEQORDER_SEQE; /* position E */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[5]&0x03) << BITP_WUPTMR_SEQORDER_SEQF; /* position F */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[6]&0x03) << BITP_WUPTMR_SEQORDER_SEQG; /* position G */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  tempreg |= (pWuptCfg->WuptOrder[7]&0x03) << BITP_WUPTMR_SEQORDER_SEQH; /* position H */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	b29b      	uxth	r3, r3
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_WUPTMR_SEQORDER, tempreg);
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f640 0004 	movw	r0, #2052	; 0x804
 8003548:	f7fe ffda 	bl	8002500 <AD5940_WriteReg>

  tempreg = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  if(pWuptCfg->WuptEn == bTRUE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003556:	2b01      	cmp	r3, #1
 8003558:	d103      	bne.n	8003562 <AD5940_WUPTCfg+0x1d0>
    tempreg |= BITM_WUPTMR_CON_EN;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
  /* We always allow Wupt to trigger sequencer */
  tempreg |= pWuptCfg->WuptEndSeq << BITP_WUPTMR_CON_ENDSEQ;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  //tempreg |= 1L<<4;
  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003574:	f7fe ffc4 	bl	8002500 <AD5940_WriteReg>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <AD5940_WUPTCtrl>:
 *        - bTRUE: enable wakeup timer
 *        - bFALSE: Disable wakeup timer
 * @return return none.
*/
void AD5940_WUPTCtrl(BoolFlag Enable)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  uint16_t tempreg;
  tempreg = AD5940_ReadReg(REG_WUPTMR_CON);
 800358a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800358e:	f7fe ffd3 	bl	8002538 <AD5940_ReadReg>
 8003592:	4603      	mov	r3, r0
 8003594:	81fb      	strh	r3, [r7, #14]
  tempreg &= ~BITM_WUPTMR_CON_EN;
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	81fb      	strh	r3, [r7, #14]

  if(Enable == bTRUE)
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d103      	bne.n	80035ac <AD5940_WUPTCtrl+0x2c>
    tempreg |= BITM_WUPTMR_CON_EN;
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	81fb      	strh	r3, [r7, #14]

  AD5940_WriteReg(REG_WUPTMR_CON, tempreg);
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80035b4:	f7fe ffa4 	bl	8002500 <AD5940_WriteReg>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <AD5940_CLKCfg>:
 * @brief Configure AD5940 clock
 * @param pClkCfg: Pointer to configuration structure.
 * @return return none.
*/
void AD5940_CLKCfg(CLKCfg_Type *pClkCfg)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg, reg_osccon;

  reg_osccon = AD5940_ReadReg(REG_ALLON_OSCCON);
 80035c8:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 80035cc:	f7fe ffb4 	bl	8002538 <AD5940_ReadReg>
 80035d0:	60f8      	str	r0, [r7, #12]
  /* Enable clocks */
  if(pClkCfg->HFXTALEn == bTRUE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7cdb      	ldrb	r3, [r3, #19]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d118      	bne.n	800360c <AD5940_CLKCfg+0x4c>
  {
    reg_osccon |= BITM_ALLON_OSCCON_HFXTALEN;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
 80035e2:	f64c 3114 	movw	r1, #51988	; 0xcb14
 80035e6:	f640 200c 	movw	r0, #2572	; 0xa0c
 80035ea:	f7fe ff89 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFXTAL */
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 80035f4:	f7fe ff84 	bl	8002500 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFXTALOK) == 0); /* Wait for clock ready */
 80035f8:	bf00      	nop
 80035fa:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 80035fe:	f7fe ff9b 	bl	8002538 <AD5940_ReadReg>
 8003602:	4603      	mov	r3, r0
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f6      	beq.n	80035fa <AD5940_CLKCfg+0x3a>
  }

  if(pClkCfg->HFOSCEn == bTRUE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7c1b      	ldrb	r3, [r3, #16]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d123      	bne.n	800365c <AD5940_CLKCfg+0x9c>
  {
    reg_osccon |= BITM_ALLON_OSCCON_HFOSCEN;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60fb      	str	r3, [r7, #12]
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
 800361c:	f64c 3114 	movw	r1, #51988	; 0xcb14
 8003620:	f640 200c 	movw	r0, #2572	; 0xa0c
 8003624:	f7fe ff6c 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable HFOSC */
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 800362e:	f7fe ff67 	bl	8002500 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
 8003632:	bf00      	nop
 8003634:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 8003638:	f7fe ff7e 	bl	8002538 <AD5940_ReadReg>
 800363c:	4603      	mov	r3, r0
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f6      	beq.n	8003634 <AD5940_CLKCfg+0x74>
    /* Configure HFOSC mode if it's enabled. */
    if(pClkCfg->HfOSC32MHzMode  == bTRUE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7c5b      	ldrb	r3, [r3, #17]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d103      	bne.n	8003656 <AD5940_CLKCfg+0x96>
      AD5940_HFOSC32MHzCtrl(bTRUE);
 800364e:	2001      	movs	r0, #1
 8003650:	f000 f872 	bl	8003738 <AD5940_HFOSC32MHzCtrl>
 8003654:	e002      	b.n	800365c <AD5940_CLKCfg+0x9c>
    else
      AD5940_HFOSC32MHzCtrl(bFALSE);
 8003656:	2000      	movs	r0, #0
 8003658:	f000 f86e 	bl	8003738 <AD5940_HFOSC32MHzCtrl>
  }

  if(pClkCfg->LFOSCEn == bTRUE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7c9b      	ldrb	r3, [r3, #18]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d118      	bne.n	8003696 <AD5940_CLKCfg+0xd6>
  {
    reg_osccon |= BITM_ALLON_OSCCON_LFOSCEN;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
    AD5940_WriteReg(REG_ALLON_OSCKEY,KEY_OSCCON); /* Write Key */
 800366c:	f64c 3114 	movw	r1, #51988	; 0xcb14
 8003670:	f640 200c 	movw	r0, #2572	; 0xa0c
 8003674:	f7fe ff44 	bl	8002500 <AD5940_WriteReg>
    AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon); /* Enable LFOSC */
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 800367e:	f7fe ff3f 	bl	8002500 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_LFOSCOK) == 0); /* Wait for clock ready */
 8003682:	bf00      	nop
 8003684:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 8003688:	f7fe ff56 	bl	8002538 <AD5940_ReadReg>
 800368c:	4603      	mov	r3, r0
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f6      	beq.n	8003684 <AD5940_CLKCfg+0xc4>
  }

  /* Switch clocks */
  /* step1. Set clock divider */
  tempreg = pClkCfg->SysClkDiv&0x3f;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369e:	60bb      	str	r3, [r7, #8]
  tempreg |= (pClkCfg->SysClkDiv&0x3f) << BITP_AFECON_CLKCON0_SYSCLKDIV;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]
  tempreg |= (pClkCfg->ADCClkDiv&0xf) << BITP_AFECON_CLKCON0_ADCCLKDIV;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	019b      	lsls	r3, r3, #6
 80036b4:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60bb      	str	r3, [r7, #8]
  AD5940_WriteReg(REG_AFECON_CLKCON0, tempreg);
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	f44f 6081 	mov.w	r0, #1032	; 0x408
 80036c4:	f7fe ff1c 	bl	8002500 <AD5940_WriteReg>
  AD5940_Delay10us(10);
 80036c8:	200a      	movs	r0, #10
 80036ca:	f7fd fdb7 	bl	800123c <AD5940_Delay10us>
  /* Step2. set clock source */
  tempreg = pClkCfg->SysClkSrc;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60bb      	str	r3, [r7, #8]
  tempreg |= pClkCfg->ADCCLkSrc << BITP_AFECON_CLKSEL_ADCCLKSEL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  AD5940_WriteReg(REG_AFECON_CLKSEL, tempreg);
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	f240 4014 	movw	r0, #1044	; 0x414
 80036e6:	f7fe ff0b 	bl	8002500 <AD5940_WriteReg>

  /* Disable clocks */
  if(pClkCfg->HFXTALEn == bFALSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7cdb      	ldrb	r3, [r3, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <AD5940_CLKCfg+0x13a>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFXTALEN;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
  if(pClkCfg->HFOSCEn == bFALSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7c1b      	ldrb	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <AD5940_CLKCfg+0x14a>
    reg_osccon &= ~BITM_ALLON_OSCCON_HFOSCEN;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f023 0302 	bic.w	r3, r3, #2
 8003708:	60fb      	str	r3, [r7, #12]
  if(pClkCfg->LFOSCEn == bFALSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7c9b      	ldrb	r3, [r3, #18]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <AD5940_CLKCfg+0x15a>
    reg_osccon &= ~BITM_ALLON_OSCCON_LFOSCEN;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
  AD5940_WriteReg(REG_ALLON_OSCKEY, KEY_OSCCON); /* Write Key */
 800371a:	f64c 3114 	movw	r1, #51988	; 0xcb14
 800371e:	f640 200c 	movw	r0, #2572	; 0xa0c
 8003722:	f7fe feed 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_ALLON_OSCCON, reg_osccon);
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 800372c:	f7fe fee8 	bl	8002500 <AD5940_WriteReg>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <AD5940_HFOSC32MHzCtrl>:
 *        - bTRUE: HFOSC 32MHz mode.
 *        - bFALSE: HFOSC 16MHz mode.
 * @return return none.
*/
void AD5940_HFOSC32MHzCtrl(BoolFlag Mode32MHz)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  uint32_t RdCLKEN1;
  uint32_t RdHPOSCCON;

  uint32_t bit8,bit9;

  RdCLKEN1 = AD5940_ReadReg(REG_AFECON_CLKEN1);
 8003742:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8003746:	f7fe fef7 	bl	8002538 <AD5940_ReadReg>
 800374a:	6178      	str	r0, [r7, #20]
  bit8 = (RdCLKEN1>>9)&0x01;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	613b      	str	r3, [r7, #16]
  bit9 = (RdCLKEN1>>8)&0x01;  /* Fix bug in silicon, bit8 and bit9 is swapped when read back. */
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
  RdCLKEN1 = RdCLKEN1&0xff;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	617b      	str	r3, [r7, #20]
  RdCLKEN1 |= (bit8<<8)|(bit9<<9);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	025b      	lsls	r3, r3, #9
 800376e:	4313      	orrs	r3, r2
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1|BITM_AFECON_CLKEN1_ACLKDIS); /* Disable ACLK during clock changing */
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8003782:	f7fe febd 	bl	8002500 <AD5940_WriteReg>

  RdHPOSCCON = AD5940_ReadReg(REG_AFE_HPOSCCON);
 8003786:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800378a:	f7fe fed5 	bl	8002538 <AD5940_ReadReg>
 800378e:	60b8      	str	r0, [r7, #8]
  if(Mode32MHz == bTRUE)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d112      	bne.n	80037bc <AD5940_HFOSC32MHzCtrl+0x84>
  {
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON&(~BITM_AFE_HPOSCCON_CLK32MHZEN)); /* Enable 32MHz output(bit definition-0: 32MHz, 1: 16MHz) */
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	f242 00bc 	movw	r0, #8380	; 0x20bc
 80037a2:	f7fe fead 	bl	8002500 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
 80037a6:	bf00      	nop
 80037a8:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 80037ac:	f7fe fec4 	bl	8002538 <AD5940_ReadReg>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f6      	beq.n	80037a8 <AD5940_HFOSC32MHzCtrl+0x70>
 80037ba:	e011      	b.n	80037e0 <AD5940_HFOSC32MHzCtrl+0xa8>
  }
  else
  {
    AD5940_WriteReg(REG_AFE_HPOSCCON,RdHPOSCCON|BITM_AFE_HPOSCCON_CLK32MHZEN); /* Enable 16MHz output(bit definition-0: 32MHz, 1: 16MHz) */
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	f242 00bc 	movw	r0, #8380	; 0x20bc
 80037c8:	f7fe fe9a 	bl	8002500 <AD5940_WriteReg>
    while((AD5940_ReadReg(REG_ALLON_OSCCON)&BITM_ALLON_OSCCON_HFOSCOK) == 0); /* Wait for clock ready */
 80037cc:	bf00      	nop
 80037ce:	f44f 6021 	mov.w	r0, #2576	; 0xa10
 80037d2:	f7fe feb1 	bl	8002538 <AD5940_ReadReg>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f6      	beq.n	80037ce <AD5940_HFOSC32MHzCtrl+0x96>
  }

  AD5940_WriteReg(REG_AFECON_CLKEN1,RdCLKEN1&(~BITM_AFECON_CLKEN1_ACLKDIS)); /* Enable ACLK */
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0320 	bic.w	r3, r3, #32
 80037e6:	4619      	mov	r1, r3
 80037e8:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80037ec:	f7fe fe88 	bl	8002500 <AD5940_WriteReg>
}
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <AD5940_INTCCfg>:
 *      - bTRUE: Enable these interrupt source(s)
 *      - bFALSE: Disable interrupt source(s)
 * @return return none.
*/
void AD5940_INTCCfg(uint32_t AfeIntcSel, uint32_t AFEIntSrc, BoolFlag State)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  uint32_t tempreg;
  uint32_t regaddr = REG_INTC_INTCSEL0;
 8003806:	f243 0308 	movw	r3, #12296	; 0x3008
 800380a:	613b      	str	r3, [r7, #16]

  if(AfeIntcSel == AFEINTC_1)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <AD5940_INTCCfg+0x20>
    regaddr = REG_INTC_INTCSEL1;
 8003812:	f243 030c 	movw	r3, #12300	; 0x300c
 8003816:	613b      	str	r3, [r7, #16]

  tempreg = AD5940_ReadReg(regaddr);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	b29b      	uxth	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fe8b 	bl	8002538 <AD5940_ReadReg>
 8003822:	6178      	str	r0, [r7, #20]
  if(State == bTRUE)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d104      	bne.n	8003834 <AD5940_INTCCfg+0x3c>
    tempreg |= AFEIntSrc;    /* Enable this interrupt */
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e004      	b.n	800383e <AD5940_INTCCfg+0x46>
  else
    tempreg &= ~(AFEIntSrc); /* Disable this interrupt  */
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	43db      	mvns	r3, r3
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4013      	ands	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
  AD5940_WriteReg(regaddr,tempreg);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	b29b      	uxth	r3, r3
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe fe5b 	bl	8002500 <AD5940_WriteReg>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <AD5940_INTCGetCfg>:
 * @param AfeIntcSel : {AFEINTC_0, AFEINTC_1}
 *        - AFEINTC_0: Configure Interrupt Controller 0
 *        - AFEINTC_1: Configure Interrupt Controller 1
*/
uint32_t AD5940_INTCGetCfg(uint32_t AfeIntcSel)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;
  if(AfeIntcSel == AFEINTC_0)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <AD5940_INTCGetCfg+0x1a>
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL0);
 8003860:	f243 0008 	movw	r0, #12296	; 0x3008
 8003864:	f7fe fe68 	bl	8002538 <AD5940_ReadReg>
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	e004      	b.n	8003876 <AD5940_INTCGetCfg+0x24>
  else
    tempreg = AD5940_ReadReg(REG_INTC_INTCSEL1);
 800386c:	f243 000c 	movw	r0, #12300	; 0x300c
 8003870:	f7fe fe62 	bl	8002538 <AD5940_ReadReg>
 8003874:	60f8      	str	r0, [r7, #12]
  return tempreg;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <AD5940_INTCClrFlag>:
 * @brief Clear selected interrupt(s) flag(INTC0Flag and INTC1Flag are both cleared).
 * @param AfeIntSrcSel: Select from @ref AFEINTC_SRC_Const
 * @return return none.
**/
void AD5940_INTCClrFlag(uint32_t AfeIntSrcSel)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  AD5940_WriteReg(REG_INTC_INTCCLR,AfeIntSrcSel);
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	f243 0004 	movw	r0, #12292	; 0x3004
 800388e:	f7fe fe37 	bl	8002500 <AD5940_WriteReg>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <AD5940_INTCTestFlag>:
 *        - AFEINTC_1: Read Interrupt Controller 1 flag
 * @param AfeIntSrcSel: Select from @ref AFEINTC_SRC_Const
 * @return If selected interrupt source(s) are all cleared, return bFALSE. Otherwise return bTRUE.
**/
BoolFlag AD5940_INTCTestFlag(uint32_t AfeIntcSel, uint32_t AfeIntSrcSel)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  uint32_t tempreg;
  uint32_t regaddr = (AfeIntcSel == AFEINTC_0)? REG_INTC_INTCFLAG0: REG_INTC_INTCFLAG1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <AD5940_INTCTestFlag+0x16>
 80038aa:	f243 0310 	movw	r3, #12304	; 0x3010
 80038ae:	e001      	b.n	80038b4 <AD5940_INTCTestFlag+0x1a>
 80038b0:	f243 0314 	movw	r3, #12308	; 0x3014
 80038b4:	60fb      	str	r3, [r7, #12]

  tempreg = AD5940_ReadReg(regaddr);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe fe3c 	bl	8002538 <AD5940_ReadReg>
 80038c0:	60b8      	str	r0, [r7, #8]
  if(tempreg & AfeIntSrcSel)
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <AD5940_INTCTestFlag+0x36>
    return bTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <AD5940_INTCTestFlag+0x38>
  else
    return bFALSE;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <AD5940_AGPIOCfg>:
 * @brief Initialize AFE GPIO
 * @param pAgpioCfg: Pointer to configuration structure
 * @return return none.
*/
void AD5940_AGPIOCfg(AGPIOCfg_Type *pAgpioCfg)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  AD5940_AGPIOFuncCfg(pAgpioCfg->FuncSet);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f819 	bl	800391e <AD5940_AGPIOFuncCfg>
  AD5940_AGPIOOen(pAgpioCfg->OutputEnSet);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f820 	bl	8003936 <AD5940_AGPIOOen>
  AD5940_AGPIOIen(pAgpioCfg->InputEnSet);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f827 	bl	800394e <AD5940_AGPIOIen>
  AD5940_AGPIOPen(pAgpioCfg->PullEnSet);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f82e 	bl	8003966 <AD5940_AGPIOPen>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, pAgpioCfg->OutVal);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4619      	mov	r1, r3
 8003910:	2014      	movs	r0, #20
 8003912:	f7fe fdf5 	bl	8002500 <AD5940_WriteReg>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <AD5940_AGPIOFuncCfg>:
 *                GP6_GPIO,GP6_TRIG,GP6_SYNC,GP6_INT0|
 *                GP7_GPIO,GP7_TRIG,GP7_SYNC,GP7_INT}
 * @return return none.
**/
void AD5940_AGPIOFuncCfg(uint32_t uiCfgSet)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   AD5940_WriteReg(REG_AGPIO_GP0CON,uiCfgSet);
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	2000      	movs	r0, #0
 800392a:	f7fe fde9 	bl	8002500 <AD5940_WriteReg>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <AD5940_AGPIOOen>:
 * @brief Enable GPIO output mode on selected pins. Disable output on non-selected pins.
 * @param uiPinSet :Select from {AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin2|AGPIO_Pin3|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin7}
 * @return return none
**/
void AD5940_AGPIOOen(uint32_t uiPinSet)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   AD5940_WriteReg(REG_AGPIO_GP0OEN,uiPinSet);
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	2004      	movs	r0, #4
 8003942:	f7fe fddd 	bl	8002500 <AD5940_WriteReg>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <AD5940_AGPIOIen>:
 * @brief Enable input on selected pins while disable others.
 * @param uiPinSet: Select from {AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin2|AGPIO_Pin3|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin7}
 * @return return none
**/
void AD5940_AGPIOIen(uint32_t uiPinSet)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   AD5940_WriteReg(REG_AGPIO_GP0IEN,uiPinSet);
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	200c      	movs	r0, #12
 800395a:	f7fe fdd1 	bl	8002500 <AD5940_WriteReg>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <AD5940_AGPIOPen>:
 * @brief Enable pull-up or down on selected pins while disable other pins.
 * @param uiPinSet: Select from: {AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin2|AGPIO_Pin3|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6|AGPIO_Pin7}
 * @return return none
**/
void AD5940_AGPIOPen(uint32_t uiPinSet)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   AD5940_WriteReg(REG_AGPIO_GP0PE,uiPinSet);
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	2008      	movs	r0, #8
 8003972:	f7fe fdc5 	bl	8002500 <AD5940_WriteReg>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <AD5940_SleepKeyCtrlS>:
          - SLPKEY_UNLOCK Unlock Key so we can enter sleep(or called hibernate) mode.
          - SLPKEY_LOCK Lock key so AD5940 is prohibited to enter sleep mode.
   @return return none.
*/
void AD5940_SleepKeyCtrlS(uint32_t SlpKey)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  AD5940_WriteReg(REG_AFE_SEQSLPLOCK, SlpKey);
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	f242 1018 	movw	r0, #8472	; 0x2118
 800398c:	f7fe fdb8 	bl	8002500 <AD5940_WriteReg>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <AD5940_EnterSleepS>:
 * @brief Put AFE to hibernate.
 * @details This will only take effect when SLP_KEY has been unlocked. Use function @ref AD5940_SleepKeyCtrlS to enter correct key.
 * @return return none.
*/
void AD5940_EnterSleepS(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 0);
 800399c:	2100      	movs	r1, #0
 800399e:	f242 101c 	movw	r0, #8476	; 0x211c
 80039a2:	f7fe fdad 	bl	8002500 <AD5940_WriteReg>
  AD5940_WriteReg(REG_AFE_SEQTRGSLP, 1);
 80039a6:	2101      	movs	r1, #1
 80039a8:	f242 101c 	movw	r0, #8476	; 0x211c
 80039ac:	f7fe fda8 	bl	8002500 <AD5940_WriteReg>
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <AD5940_WakeUp>:
 * @details Any SPI operation can wakeup AD5940. AD5940_Initialize must be called to enable this function.
 * @param TryCount Specify how many times we will read register. Zero or negative number means always waiting here.
 * @return How many times register is read. If returned value is bigger than TryCount, it means wakeup failed.
*/
uint32_t  AD5940_WakeUp(int32_t TryCount)//silicon identification page 26 datasheet
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    count++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
    if(AD5940_ReadReg(REG_AFECON_ADIID) == AD5940_ADIID)
 80039c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039ca:	f7fe fdb5 	bl	8002538 <AD5940_ReadReg>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f244 1244 	movw	r2, #16708	; 0x4144
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <AD5940_WakeUp+0x38>
      break;    /* Succeed */
    if(TryCount<=0)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	dd04      	ble.n	80039e8 <AD5940_WakeUp+0x34>
      continue; /* Always try to wakeup AFE */

    if(count > TryCount)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d804      	bhi.n	80039f0 <AD5940_WakeUp+0x3c>
 80039e6:	e7eb      	b.n	80039c0 <AD5940_WakeUp+0xc>
      continue; /* Always try to wakeup AFE */
 80039e8:	bf00      	nop
    count++;
 80039ea:	e7e9      	b.n	80039c0 <AD5940_WakeUp+0xc>
      break;    /* Succeed */
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <AD5940_WakeUp+0x3e>
      break;    /* Failed */
 80039f0:	bf00      	nop
  }
  return count;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <AD5940_HWReset>:
 * @brief Reset AD5940 with RESET pin.
 * @note This will call function AD5940_RstClr which locates in file XXXPort.C
 * @return return none.
*/
void AD5940_HWReset(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
#ifndef CHIPSEL_M355
  AD5940_RstClr();
 8003a00:	f7fd fc10 	bl	8001224 <AD5940_RstClr>
  AD5940_Delay10us(200); /* Delay some time */
 8003a04:	20c8      	movs	r0, #200	; 0xc8
 8003a06:	f7fd fc19 	bl	800123c <AD5940_Delay10us>
  AD5940_RstSet();
 8003a0a:	f7fd fbff 	bl	800120c <AD5940_RstSet>
  AD5940_Delay10us(500); /* AD5940 need some time to exit reset status. 200us looks good. */
 8003a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a12:	f7fd fc13 	bl	800123c <AD5940_Delay10us>
#else
  //There is no method to reset AFE only for M355.
#endif
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <AD5940_HSRtiaCal>:
 * @param pResult:  Pointer to a variable that used to store result.
 *                  If bPolarResult in structure is set, then use type fImpPol_Type otherwise use fImpCar_Type.
 * @return AD5940ERR_OK if succeed.
**/
AD5940Err AD5940_HSRtiaCal(HSRTIACal_Type *pCalCfg, void *pResult)
{
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b0c8      	sub	sp, #288	; 0x120
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a2a:	6018      	str	r0, [r3, #0]
 8003a2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a34:	6019      	str	r1, [r3, #0]
  AFERefCfg_Type aferef_cfg;
  HSLoopCfg_Type hs_loop;
  DSPCfg_Type dsp_cfg;
  uint32_t INTCCfg;

  BoolFlag bADCClk32MHzMode = bFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint32_t ExcitBuffGain = EXCITBUFGAIN_2;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t HsDacGain = HSDACGAIN_1;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  float ExcitVolt; /* Excitation voltage, unit is mV */
  uint32_t RtiaVal;
  uint32_t const HpRtiaTable[]={200,1000,5000,10000,20000,40000,80000,160000,0};
 8003a48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003a50:	4a78      	ldr	r2, [pc, #480]	; (8003c34 <AD5940_HSRtiaCal+0x218>)
 8003a52:	461c      	mov	r4, r3
 8003a54:	4615      	mov	r5, r2
 8003a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	6023      	str	r3, [r4, #0]
  uint32_t WgAmpWord;

  iImpCar_Type DftRcal, DftRtia;

  if(pCalCfg == NULL) return AD5940ERR_NULLP;
 8003a62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <AD5940_HSRtiaCal+0x5a>
 8003a70:	f06f 0302 	mvn.w	r3, #2
 8003a74:	e35f      	b.n	8004136 <AD5940_HSRtiaCal+0x71a>
  if(pCalCfg->fRcal == 0)
 8003a76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8c:	d102      	bne.n	8003a94 <AD5940_HSRtiaCal+0x78>
    return AD5940ERR_PARA;
 8003a8e:	f06f 0301 	mvn.w	r3, #1
 8003a92:	e350      	b.n	8004136 <AD5940_HSRtiaCal+0x71a>
  if(pCalCfg->HsTiaCfg.HstiaRtiaSel > HSTIARTIA_160K)
 8003a94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003a98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b07      	cmp	r3, #7
 8003aa2:	d902      	bls.n	8003aaa <AD5940_HSRtiaCal+0x8e>
    return AD5940ERR_PARA;
 8003aa4:	f06f 0301 	mvn.w	r3, #1
 8003aa8:	e345      	b.n	8004136 <AD5940_HSRtiaCal+0x71a>
  if(pCalCfg->HsTiaCfg.HstiaRtiaSel == HSTIARTIA_OPEN)
 8003aaa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003aae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d102      	bne.n	8003ac0 <AD5940_HSRtiaCal+0xa4>
    return AD5940ERR_PARA; /* Do not support calibrating DE0-RTIA */
 8003aba:	f06f 0301 	mvn.w	r3, #1
 8003abe:	e33a      	b.n	8004136 <AD5940_HSRtiaCal+0x71a>
  if(pResult == NULL)
 8003ac0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ac4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <AD5940_HSRtiaCal+0xb8>
      return AD5940ERR_NULLP;
 8003ace:	f06f 0302 	mvn.w	r3, #2
 8003ad2:	e330      	b.n	8004136 <AD5940_HSRtiaCal+0x71a>

  if(pCalCfg->AdcClkFreq > (32000000*0.8))
 8003ad4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ad8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ae2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003c38 <AD5940_HSRtiaCal+0x21c>
 8003ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	dd02      	ble.n	8003af6 <AD5940_HSRtiaCal+0xda>
    bADCClk32MHzMode = bTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  /* Calculate the excitation voltage we should use based on RCAL/Rtia */
  RtiaVal = HpRtiaTable[pCalCfg->HsTiaCfg.HstiaRtiaSel];
 8003af6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003afa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    Because the bias voltage is fixed to 1.1V, so for AC signal maximum amplitude is 1.1V-0.2V = 0.9Vp. That's 1.8Vpp.
    Formula is:    ExcitVolt(in mVpp) = (1800mVpp*80% / RTIA) * RCAL
    ADC input range is +-1.5V which is enough for calibration.

  */
  ExcitVolt = 1800*0.8*pCalCfg->fRcal/RtiaVal;
 8003b12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fd1a 	bl	8000558 <__aeabi_f2d>
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4b44      	ldr	r3, [pc, #272]	; (8003c3c <AD5940_HSRtiaCal+0x220>)
 8003b2a:	f7fc fd6d 	bl	8000608 <__aeabi_dmul>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4614      	mov	r4, r2
 8003b34:	461d      	mov	r5, r3
 8003b36:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003b3a:	f7fc fceb 	bl	8000514 <__aeabi_ui2d>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4620      	mov	r0, r4
 8003b44:	4629      	mov	r1, r5
 8003b46:	f7fc fe89 	bl	800085c <__aeabi_ddiv>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f7fd f851 	bl	8000bf8 <__aeabi_d2f>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  if(ExcitVolt <= 800*0.05) /* Voltage is so small that we can enable the attenuator of DAC(1/5) and Excitation buffer(1/4). 800mVpp is the DAC output voltage */
 8003b5c:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003b60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003c40 <AD5940_HSRtiaCal+0x224>
 8003b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	d81a      	bhi.n	8003ba4 <AD5940_HSRtiaCal+0x188>
  {
    ExcitBuffGain = EXCITBUFGAIN_0P25;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    HsDacGain = HSDACGAIN_0P2;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* Excitation buffer voltage full range is 800mVpp*0.05 = 40mVpp */
    WgAmpWord = ((uint32_t)(ExcitVolt/40*2047*2)+1)>>1; /* Assign value with rounding (0.5 LSB error) */
 8003b7a:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 8003b7e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003c40 <AD5940_HSRtiaCal+0x224>
 8003b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b86:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003c50 <AD5940_HSRtiaCal+0x234>
 8003b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b96:	ee17 3a90 	vmov	r3, s15
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ba2:	e071      	b.n	8003c88 <AD5940_HSRtiaCal+0x26c>
  }
  else if(ExcitVolt <= 800*0.25) /* Enable Excitation buffer attenuator */
 8003ba4:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003ba8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003c44 <AD5940_HSRtiaCal+0x228>
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d81a      	bhi.n	8003bec <AD5940_HSRtiaCal+0x1d0>
  {
    ExcitBuffGain = EXCITBUFGAIN_0P25;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    HsDacGain = HSDACGAIN_1;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* Excitation buffer voltage full range is 800mVpp*0.25 = 200mVpp */
    WgAmpWord = ((uint32_t)(ExcitVolt/200*2047*2)+1)>>1; /* Assign value with rounding (0.5 LSB error) */
 8003bc2:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 8003bc6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003c44 <AD5940_HSRtiaCal+0x228>
 8003bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003c50 <AD5940_HSRtiaCal+0x234>
 8003bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bde:	ee17 3a90 	vmov	r3, s15
 8003be2:	3301      	adds	r3, #1
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003bea:	e04d      	b.n	8003c88 <AD5940_HSRtiaCal+0x26c>
  }
  else if(ExcitVolt <= 800*0.4) /* Enable DAC attenuator */
 8003bec:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003bf0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003c48 <AD5940_HSRtiaCal+0x22c>
 8003bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d82a      	bhi.n	8003c54 <AD5940_HSRtiaCal+0x238>
  {
    ExcitBuffGain = EXCITBUFGAIN_2;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    HsDacGain = HSDACGAIN_0P2;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* Excitation buffer voltage full range is 800mVpp*0.4 = 320mV */
    WgAmpWord = ((uint32_t)(ExcitVolt/320*2047*2)+1)>>1; /* Assign value with rounding (0.5 LSB error) */
 8003c0a:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 8003c0e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003c48 <AD5940_HSRtiaCal+0x22c>
 8003c12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c16:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003c50 <AD5940_HSRtiaCal+0x234>
 8003c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c26:	ee17 3a90 	vmov	r3, s15
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003c32:	e029      	b.n	8003c88 <AD5940_HSRtiaCal+0x26c>
 8003c34:	0800cd94 	.word	0x0800cd94
 8003c38:	4bc35000 	.word	0x4bc35000
 8003c3c:	40968000 	.word	0x40968000
 8003c40:	42200000 	.word	0x42200000
 8003c44:	43480000 	.word	0x43480000
 8003c48:	43a00000 	.word	0x43a00000
 8003c4c:	44c80000 	.word	0x44c80000
 8003c50:	44ffe000 	.word	0x44ffe000
  }
  else /* No attenuator is needed. This is the best condition which means RTIA is close to RCAL */
  {
    ExcitBuffGain = EXCITBUFGAIN_2;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    HsDacGain = HSDACGAIN_1;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    /* Excitation buffer voltage full range is 800mVpp*2=1600mVpp */
    WgAmpWord = ((uint32_t)(ExcitVolt/1600*2047*2)+1)>>1; /* Assign value with rounding (0.5 LSB error) */
 8003c60:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 8003c64:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8003c4c <AD5940_HSRtiaCal+0x230>
 8003c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c6c:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8003c50 <AD5940_HSRtiaCal+0x234>
 8003c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c7c:	ee17 3a90 	vmov	r3, s15
 8003c80:	3301      	adds	r3, #1
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  }

  if(WgAmpWord > 0x7ff)
 8003c88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c90:	d303      	bcc.n	8003c9a <AD5940_HSRtiaCal+0x27e>
  WgAmpWord = 0x7ff;
 8003c92:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003c96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /*INTC configuration */
  INTCCfg = AD5940_INTCGetCfg(AFEINTC_1);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7ff fdd9 	bl	8003852 <AD5940_INTCGetCfg>
 8003ca0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_DFTRDY, bTRUE); /* Enable SINC2 Interrupt in INTC1 */
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7ff fda5 	bl	80037f8 <AD5940_INTCCfg>

  AD5940_AFECtrlS(AFECTRL_ALL, bFALSE);  /* Init all to disable state */
 8003cae:	2100      	movs	r1, #0
 8003cb0:	48ca      	ldr	r0, [pc, #808]	; (8003fdc <AD5940_HSRtiaCal+0x5c0>)
 8003cb2:	f7fe fcb5 	bl	8002620 <AD5940_AFECtrlS>
  /* Configure reference system */
  aferef_cfg.HpBandgapEn = bTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  aferef_cfg.Hp1V1BuffEn = bTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
  aferef_cfg.Hp1V8BuffEn = bTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
  aferef_cfg.Disc1V1Cap = bFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
  aferef_cfg.Disc1V8Cap = bFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  aferef_cfg.Hp1V8ThemBuff = bFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
  aferef_cfg.Hp1V8Ilimit = bFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
  aferef_cfg.Lp1V1BuffEn = bFALSE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
  aferef_cfg.Lp1V8BuffEn = bFALSE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  aferef_cfg.LpBandgapEn = bFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
  aferef_cfg.LpRefBufEn = bFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
  aferef_cfg.LpRefBoostEn = bFALSE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
  AD5940_REFCfgS(&aferef_cfg);
 8003cfe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fcf6 	bl	80026f4 <AD5940_REFCfgS>
  /* Configure HP Loop */
  hs_loop.HsDacCfg.ExcitBufGain = ExcitBuffGain;
 8003d08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hs_loop.HsDacCfg.HsDacGain = HsDacGain;
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  hs_loop.HsDacCfg.HsDacUpdateRate = 7; /* Set it to highest update rate */
 8003d18:	2307      	movs	r3, #7
 8003d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  memcpy(&hs_loop.HsTiaCfg, &pCalCfg->HsTiaCfg, sizeof(pCalCfg->HsTiaCfg));
 8003d1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f103 0110 	add.w	r1, r3, #16
 8003d2c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d30:	3350      	adds	r3, #80	; 0x50
 8003d32:	2220      	movs	r2, #32
 8003d34:	4618      	mov	r0, r3
 8003d36:	f005 fccc 	bl	80096d2 <memcpy>
  hs_loop.SWMatCfg.Dswitch = SWD_RCAL0;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  hs_loop.SWMatCfg.Pswitch = SWP_RCAL0;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  hs_loop.SWMatCfg.Nswitch = SWN_RCAL1;
 8003d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  hs_loop.SWMatCfg.Tswitch = SWT_RCAL1|SWT_TRTIA;
 8003d4e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  hs_loop.WgCfg.WgType = WGTYPE_SIN;
 8003d56:	2302      	movs	r3, #2
 8003d58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  hs_loop.WgCfg.GainCalEn = bTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
  hs_loop.WgCfg.OffsetCalEn = bTRUE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
  hs_loop.WgCfg.SinCfg.SinFreqWord = AD5940_WGFreqWordCal(pCalCfg->fFreq, pCalCfg->SysClkFreq);
 8003d68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d84:	eef0 0a47 	vmov.f32	s1, s14
 8003d88:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8c:	f7fe fed0 	bl	8002b30 <AD5940_WGFreqWordCal>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  hs_loop.WgCfg.SinCfg.SinAmplitudeWord = WgAmpWord;
 8003d96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  hs_loop.WgCfg.SinCfg.SinOffsetWord = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  hs_loop.WgCfg.SinCfg.SinPhaseWord = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  AD5940_HSLoopCfgS(&hs_loop);
 8003daa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fd27 	bl	8002802 <AD5940_HSLoopCfgS>
  /* Configure DSP */
  dsp_cfg.ADCBaseCfg.ADCMuxN = ADCMUXN_N_NODE;
 8003db4:	2314      	movs	r3, #20
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_P_NODE;
 8003db8:	2324      	movs	r3, #36	; 0x24
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
  dsp_cfg.ADCBaseCfg.ADCPga = ADCPGA_1P5;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  AD5940_StructInit(&dsp_cfg.ADCDigCompCfg, sizeof(dsp_cfg.ADCDigCompCfg));
 8003dc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dc4:	3320      	adds	r3, #32
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe f979 	bl	80020c0 <AD5940_StructInit>
  dsp_cfg.ADCFilterCfg.ADCAvgNum = ADCAVGNUM_16;  /* Don't care because it's disabled */
 8003dce:	2303      	movs	r3, #3
 8003dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  dsp_cfg.ADCFilterCfg.ADCRate = bADCClk32MHzMode?ADCRATE_1P6MHZ:ADCRATE_800KHZ;
 8003dd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	65fb      	str	r3, [r7, #92]	; 0x5c
  dsp_cfg.ADCFilterCfg.ADCSinc2Osr = pCalCfg->ADCSinc2Osr;
 8003de2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003de6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	657b      	str	r3, [r7, #84]	; 0x54
  dsp_cfg.ADCFilterCfg.ADCSinc3Osr = pCalCfg->ADCSinc3Osr;
 8003df0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003df4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	653b      	str	r3, [r7, #80]	; 0x50
  dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  dsp_cfg.ADCFilterCfg.BpSinc3 = bFALSE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
  dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

  memcpy(&dsp_cfg.DftCfg, &pCalCfg->DftCfg, sizeof(pCalCfg->DftCfg));
 8003e10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	220c      	movs	r2, #12
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 fc53 	bl	80096d2 <memcpy>
  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg));
 8003e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e30:	3334      	adds	r3, #52	; 0x34
 8003e32:	220c      	movs	r2, #12
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f005 fbcc 	bl	80095d4 <memset>
  AD5940_DSPCfgS(&dsp_cfg);
 8003e3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe ffd9 	bl	8002df8 <AD5940_DSPCfgS>

  /* Enable all of them. They are automatically turned off during hibernate mode to save power */
  AD5940_AFECtrlS(AFECTRL_HSTIAPWR|AFECTRL_INAMPPWR|AFECTRL_EXTBUFPWR|\
 8003e46:	2101      	movs	r1, #1
 8003e48:	4865      	ldr	r0, [pc, #404]	; (8003fe0 <AD5940_HSRtiaCal+0x5c4>)
 8003e4a:	f7fe fbe9 	bl	8002620 <AD5940_AFECtrlS>
                /*AFECTRL_WG|*/AFECTRL_DACREFPWR|AFECTRL_HSDACPWR|\
                AFECTRL_SINC2NOTCH, bTRUE);

  AD5940_AFECtrlS(AFECTRL_WG|AFECTRL_ADCPWR, bTRUE);  /* Enable Waveform generator, ADC power */
 8003e4e:	2101      	movs	r1, #1
 8003e50:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 8003e54:	f7fe fbe4 	bl	8002620 <AD5940_AFECtrlS>
  //wait for sometime.
  AD5940_Delay10us(25);
 8003e58:	2019      	movs	r0, #25
 8003e5a:	f7fd f9ef 	bl	800123c <AD5940_Delay10us>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);  /* Start ADC convert and DFT */
 8003e5e:	2101      	movs	r1, #1
 8003e60:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8003e64:	f7fe fbdc 	bl	8002620 <AD5940_AFECtrlS>
  /* Wait until DFT ready */
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_DFTRDY) == bFALSE);
 8003e68:	bf00      	nop
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7ff fd14 	bl	800389a <AD5940_INTCTestFlag>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f8      	beq.n	8003e6a <AD5940_HSRtiaCal+0x44e>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
 8003e78:	2100      	movs	r1, #0
 8003e7a:	f24c 1080 	movw	r0, #49536	; 0xc180
 8003e7e:	f7fe fbcf 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_INTCClrFlag(AFEINTSRC_DFTRDY);
 8003e82:	2002      	movs	r0, #2
 8003e84:	f7ff fcfc 	bl	8003880 <AD5940_INTCClrFlag>

  DftRcal.Real = AD5940_ReadAfeResult(AFERESULT_DFTREAL);
 8003e88:	2003      	movs	r0, #3
 8003e8a:	f7fe ffd5 	bl	8002e38 <AD5940_ReadAfeResult>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e9a:	601a      	str	r2, [r3, #0]
  DftRcal.Image = AD5940_ReadAfeResult(AFERESULT_DFTIMAGE);
 8003e9c:	2004      	movs	r0, #4
 8003e9e:	f7fe ffcb 	bl	8002e38 <AD5940_ReadAfeResult>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eae:	605a      	str	r2, [r3, #4]

  AD5940_ADCMuxCfgS(ADCMUXP_HSTIA_P, ADCMUXN_HSTIA_N);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7ff f86e 	bl	8002f94 <AD5940_ADCMuxCfgS>
  AD5940_AFECtrlS(AFECTRL_WG|AFECTRL_ADCPWR, bTRUE);  /* Enable Waveform generator, ADC power */
 8003eb8:	2101      	movs	r1, #1
 8003eba:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 8003ebe:	f7fe fbaf 	bl	8002620 <AD5940_AFECtrlS>
  //wait for sometime.
  AD5940_Delay10us(25);
 8003ec2:	2019      	movs	r0, #25
 8003ec4:	f7fd f9ba 	bl	800123c <AD5940_Delay10us>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);  /* Start ADC convert and DFT */
 8003ec8:	2101      	movs	r1, #1
 8003eca:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8003ece:	f7fe fba7 	bl	8002620 <AD5940_AFECtrlS>
  /* Wait until DFT ready */
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_DFTRDY) == bFALSE);
 8003ed2:	bf00      	nop
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7ff fcdf 	bl	800389a <AD5940_INTCTestFlag>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f8      	beq.n	8003ed4 <AD5940_HSRtiaCal+0x4b8>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	f24c 1080 	movw	r0, #49536	; 0xc180
 8003ee8:	f7fe fb9a 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_INTCClrFlag(AFEINTSRC_DFTRDY);
 8003eec:	2002      	movs	r0, #2
 8003eee:	f7ff fcc7 	bl	8003880 <AD5940_INTCClrFlag>

  DftRtia.Real = AD5940_ReadAfeResult(AFERESULT_DFTREAL);
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f7fe ffa0 	bl	8002e38 <AD5940_ReadAfeResult>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f04:	601a      	str	r2, [r3, #0]
  DftRtia.Image = AD5940_ReadAfeResult(AFERESULT_DFTIMAGE);
 8003f06:	2004      	movs	r0, #4
 8003f08:	f7fe ff96 	bl	8002e38 <AD5940_ReadAfeResult>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f18:	605a      	str	r2, [r3, #4]

  if(DftRcal.Real&(1L<<17))
 8003f1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <AD5940_HSRtiaCal+0x52e>
    DftRcal.Real |= 0xfffc0000;
 8003f2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8003f3a:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f48:	601a      	str	r2, [r3, #0]
  if(DftRcal.Image&(1L<<17))
 8003f4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <AD5940_HSRtiaCal+0x55e>
    DftRcal.Image |= 0xfffc0000;
 8003f5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8003f6a:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f78:	605a      	str	r2, [r3, #4]
  if(DftRtia.Real&(1L<<17))
 8003f7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <AD5940_HSRtiaCal+0x58e>
    DftRtia.Real |= 0xfffc0000;
 8003f8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8003f9a:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003fa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fa8:	601a      	str	r2, [r3, #0]
  if(DftRtia.Image&(1L<<17))
 8003faa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003fae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <AD5940_HSRtiaCal+0x5c8>
    DftRtia.Image |= 0xfffc0000;
 8003fbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003fc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8003fca:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003fd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e003      	b.n	8003fe4 <AD5940_HSRtiaCal+0x5c8>
 8003fdc:	0039ffe0 	.word	0x0039ffe0
 8003fe0:	00110e40 	.word	0x00110e40
    ADC MUX is set to HSTIA_P and HSTIA_N.
    While the current flow through RCAL and then into RTIA, the current direction should be from HSTIA_N to HSTIA_P if we
    measure the voltage across RCAL by MUXSELP_P_NODE and MUXSELN_N_NODE.
    So here, we add a negative sign to results
  */
  DftRtia.Image = -DftRtia.Image;
 8003fe4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003fe8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	425a      	negs	r2, r3
 8003ff0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ff4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ff8:	605a      	str	r2, [r3, #4]
  DftRtia.Real = -DftRtia.Real; /* Current is measured by MUX HSTIA_P-HSTIA_N. It should be  */
 8003ffa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ffe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	425a      	negs	r2, r3
 8004006:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800400a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800400e:	601a      	str	r2, [r3, #0]
   /*
      The impedance engine inside of AD594x give us Real part and Imaginary part of DFT. Due to technology used, the Imaginary
      part in register is the opposite number. So we add a negative sign on the Imaginary part of results.
   */
  DftRtia.Image = -DftRtia.Image;
 8004010:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004014:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	425a      	negs	r2, r3
 800401c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004020:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004024:	605a      	str	r2, [r3, #4]
  DftRcal.Image = -DftRcal.Image;
 8004026:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800402a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	425a      	negs	r2, r3
 8004032:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403a:	605a      	str	r2, [r3, #4]

  fImpCar_Type temp;
  temp = AD5940_ComplexDivInt(&DftRtia, &DftRcal);
 800403c:	f107 0218 	add.w	r2, r7, #24
 8004040:	f107 0310 	add.w	r3, r7, #16
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe f848 	bl	80020dc <AD5940_ComplexDivInt>
 800404c:	eeb0 7a40 	vmov.f32	s14, s0
 8004050:	eef0 7a60 	vmov.f32	s15, s1
 8004054:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004058:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800405c:	ed83 7a00 	vstr	s14, [r3]
 8004060:	edc3 7a01 	vstr	s15, [r3, #4]
  temp.Real *= pCalCfg->fRcal;
 8004064:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004068:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800406c:	ed93 7a00 	vldr	s14, [r3]
 8004070:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004074:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	edd3 7a01 	vldr	s15, [r3, #4]
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004086:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800408a:	edc3 7a00 	vstr	s15, [r3]
  temp.Image *= pCalCfg->fRcal;
 800408e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004092:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004096:	ed93 7a01 	vldr	s14, [r3, #4]
 800409a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800409e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040b4:	edc3 7a01 	vstr	s15, [r3, #4]
  if(pCalCfg->bPolarResult == bFALSE)
 80040b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10e      	bne.n	80040e6 <AD5940_HSRtiaCal+0x6ca>
  {
    *(fImpCar_Type*)pResult = temp;
 80040c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040d6:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80040da:	460b      	mov	r3, r1
 80040dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80040e4:	e01b      	b.n	800411e <AD5940_HSRtiaCal+0x702>
  }
  else
  {
    ((fImpPol_Type*)pResult)->Magnitude = AD5940_ComplexMag(&temp);
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f882 	bl	80021f4 <AD5940_ComplexMag>
 80040f0:	eef0 7a40 	vmov.f32	s15, s0
 80040f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	edc3 7a00 	vstr	s15, [r3]
    ((fImpPol_Type*)pResult)->Phase = AD5940_ComplexPhase(&temp);
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe f8a2 	bl	8002250 <AD5940_ComplexPhase>
 800410c:	eef0 7a40 	vmov.f32	s15, s0
 8004110:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004114:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	edc3 7a01 	vstr	s15, [r3, #4]
  }

  /* Restore INTC1 DFT configure */
  if(INTCCfg&AFEINTSRC_DFTRDY);
 800411e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <AD5940_HSRtiaCal+0x718>
  else
    AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_DFTRDY, bFALSE); /* Disable DFT Interrupt */
 800412a:	2200      	movs	r2, #0
 800412c:	2102      	movs	r1, #2
 800412e:	2001      	movs	r0, #1
 8004130:	f7ff fb62 	bl	80037f8 <AD5940_INTCCfg>

  return AD5940ERR_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800413c:	46bd      	mov	sp, r7
 800413e:	bdb0      	pop	{r4, r5, r7, pc}

08004140 <BIAShowResult>:
uint32_t AppBuff[APPBUFF_SIZE];
uint8_t entree = 13;

/* It's your choice here how to do with the data. Here is just an example to print them to UART */
int32_t BIAShowResult(uint32_t *pData, uint32_t DataCount)
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  float freq;


  fImpPol_Type *pImp = (fImpPol_Type*)pData;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	613b      	str	r3, [r7, #16]
  AppBIACtrl(BIACTRL_GETFREQ, &freq);
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4619      	mov	r1, r3
 8004154:	2003      	movs	r0, #3
 8004156:	f000 f9ed 	bl	8004534 <AppBIACtrl>

  //my_printf("Freq:%f Hz ", freq);
  my_printf("%f;", freq);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f9fb 	bl	8000558 <__aeabi_f2d>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	481b      	ldr	r0, [pc, #108]	; (80041d4 <BIAShowResult+0x94>)
 8004168:	f001 fe02 	bl	8005d70 <my_printf>
  /*Process data*/
  for(int i=0;i<DataCount;i++)
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e027      	b.n	80041c2 <BIAShowResult+0x82>
  {
    //my_printf("RzMag: %f Ohm , RzPhase: %f \r\n",pImp[i].Magnitude,pImp[i].Phase*180/MATH_PI);
    my_printf("%f;%f\r\n",pImp[i].Magnitude,pImp[i].Phase*180/MATH_PI);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc f9eb 	bl	8000558 <__aeabi_f2d>
 8004182:	4604      	mov	r4, r0
 8004184:	460d      	mov	r5, r1
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004192:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80041d8 <BIAShowResult+0x98>
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80041dc <BIAShowResult+0x9c>
 800419e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041a2:	ee16 0a90 	vmov	r0, s13
 80041a6:	f7fc f9d7 	bl	8000558 <__aeabi_f2d>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	e9cd 2300 	strd	r2, r3, [sp]
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	480a      	ldr	r0, [pc, #40]	; (80041e0 <BIAShowResult+0xa0>)
 80041b8:	f001 fdda 	bl	8005d70 <my_printf>
  for(int i=0;i<DataCount;i++)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3301      	adds	r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d8d3      	bhi.n	8004172 <BIAShowResult+0x32>

  }
  return 0;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdb0      	pop	{r4, r5, r7, pc}
 80041d4:	0800ce38 	.word	0x0800ce38
 80041d8:	43340000 	.word	0x43340000
 80041dc:	40490fda 	.word	0x40490fda
 80041e0:	0800ce3c 	.word	0x0800ce3c

080041e4 <AD5940PlatformCfg>:

/* Initialize AD5940 basic blocks like clock */
static int32_t AD5940PlatformCfg(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b090      	sub	sp, #64	; 0x40
 80041e8:	af00      	add	r7, sp, #0
  CLKCfg_Type clk_cfg;
  FIFOCfg_Type fifo_cfg;
  AGPIOCfg_Type gpio_cfg;

  /* Use hardware reset */
  AD5940_HWReset();
 80041ea:	f7ff fc07 	bl	80039fc <AD5940_HWReset>
  /* Platform configuration */
  AD5940_Initialize();
 80041ee:	f7fe f9bd 	bl	800256c <AD5940_Initialize>
  /* Step1. Configure clock */
  clk_cfg.ADCClkDiv = ADCCLKDIV_1;
 80041f2:	2301      	movs	r3, #1
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
  clk_cfg.ADCCLkSrc = ADCCLKSRC_HFOSC;
 80041f6:	2300      	movs	r3, #0
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30
  clk_cfg.SysClkDiv = SYSCLKDIV_1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34
  clk_cfg.SysClkSrc = SYSCLKSRC_HFOSC;
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
  clk_cfg.HfOSC32MHzMode = bFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  clk_cfg.HFOSCEn = bTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  clk_cfg.HFXTALEn = bFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  clk_cfg.LFOSCEn = bTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  AD5940_CLKCfg(&clk_cfg);
 800421a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f9ce 	bl	80035c0 <AD5940_CLKCfg>
  /* Step2. Configure FIFO and Sequencer*/
  fifo_cfg.FIFOEn = bFALSE;
 8004224:	2300      	movs	r3, #0
 8004226:	763b      	strb	r3, [r7, #24]
  fifo_cfg.FIFOMode = FIFOMODE_FIFO;
 8004228:	2302      	movs	r3, #2
 800422a:	61fb      	str	r3, [r7, #28]
  fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
 800422c:	2302      	movs	r3, #2
 800422e:	623b      	str	r3, [r7, #32]
  fifo_cfg.FIFOSrc = FIFOSRC_DFT;
 8004230:	2302      	movs	r3, #2
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  fifo_cfg.FIFOThresh = 4;//AppBIACfg.FifoThresh;        /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
 8004234:	2304      	movs	r3, #4
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
  AD5940_FIFOCfg(&fifo_cfg);                             /* Disable to reset FIFO. */
 8004238:	f107 0318 	add.w	r3, r7, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe ff51 	bl	80030e4 <AD5940_FIFOCfg>
  fifo_cfg.FIFOEn = bTRUE;
 8004242:	2301      	movs	r3, #1
 8004244:	763b      	strb	r3, [r7, #24]
  AD5940_FIFOCfg(&fifo_cfg);                             /* Enable FIFO here */
 8004246:	f107 0318 	add.w	r3, r7, #24
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe ff4a 	bl	80030e4 <AD5940_FIFOCfg>

  /* Step3. Interrupt controller */

  AD5940_INTCCfg(AFEINTC_1, AFEINTSRC_ALLINT, bTRUE);           /* Enable all interrupt in Interrupt Controller 1, so we can check INTC flags */
 8004250:	2201      	movs	r2, #1
 8004252:	f04f 31ff 	mov.w	r1, #4294967295
 8004256:	2001      	movs	r0, #1
 8004258:	f7ff face 	bl	80037f8 <AD5940_INTCCfg>
  AD5940_INTCCfg(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH, bTRUE);   /* Interrupt Controller 0 will control GP0 to generate interrupt to MCU */
 800425c:	2201      	movs	r2, #1
 800425e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004262:	2000      	movs	r0, #0
 8004264:	f7ff fac8 	bl	80037f8 <AD5940_INTCCfg>
  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f7ff fb08 	bl	8003880 <AD5940_INTCClrFlag>
  /* Step4: Reconfigure GPIO */
  gpio_cfg.FuncSet = GP6_SYNC|GP5_SYNC|GP4_SYNC|GP2_TRIG|GP1_GPIO|GP0_INT;
 8004270:	f642 2310 	movw	r3, #10768	; 0x2a10
 8004274:	607b      	str	r3, [r7, #4]
  gpio_cfg.InputEnSet = AGPIO_Pin2;
 8004276:	2304      	movs	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
  gpio_cfg.OutputEnSet = AGPIO_Pin0|AGPIO_Pin1|AGPIO_Pin4|AGPIO_Pin5|AGPIO_Pin6;
 800427a:	2373      	movs	r3, #115	; 0x73
 800427c:	60bb      	str	r3, [r7, #8]
  gpio_cfg.OutVal = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  gpio_cfg.PullEnSet = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]

  AD5940_AGPIOCfg(&gpio_cfg);
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fb26 	bl	80038da <AD5940_AGPIOCfg>
  AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);  /* Allow AFE to enter sleep mode. */
 800428e:	4804      	ldr	r0, [pc, #16]	; (80042a0 <AD5940PlatformCfg+0xbc>)
 8004290:	f7ff fb75 	bl	800397e <AD5940_SleepKeyCtrlS>
  return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3740      	adds	r7, #64	; 0x40
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	000a47e5 	.word	0x000a47e5

080042a4 <AD5940BIAStructInit>:

/* !!Change the application parameters here if you want to change it to none-default value */
void AD5940BIAStructInit(uint32_t nb_pt, float freq_min, float freq_max)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b08c      	sub	sp, #48	; 0x30
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80042b0:	edc7 0a01 	vstr	s1, [r7, #4]
  AppBIACfg_Type *pBIACfg;
  SoftSweepCfg_Type sweepCfg;

  AppBIAGetCfg(&pBIACfg);
 80042b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f925 	bl	8004508 <AppBIAGetCfg>
  sweepCfg = pBIACfg->SweepCfg;
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	f107 0414 	add.w	r4, r7, #20
 80042c4:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80042c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042d0:	e884 0003 	stmia.w	r4, {r0, r1}

  pBIACfg->SeqStartAddr = 0;
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
  pBIACfg->MaxSeqLen = 512; /** @todo add checker in function */
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e0:	609a      	str	r2, [r3, #8]

  pBIACfg->RcalVal = 200.0; //1500 pour la carte de Valentin
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <AD5940BIAStructInit+0xa4>)
 80042e6:	635a      	str	r2, [r3, #52]	; 0x34
  //pBIACfg->RcalVal = 10000.0;//carte d'eval
  pBIACfg->DftNum = DFTNUM_8192;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	220b      	movs	r2, #11
 80042ec:	65da      	str	r2, [r3, #92]	; 0x5c
  pBIACfg->NumOfData = -1;      /* Never stop until you stop it manually by AppBIACtrl() function */
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
  pBIACfg->BiaODR = 20;         /* ODR(Sample Rate) 20Hz */
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <AD5940BIAStructInit+0xa8>)
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  pBIACfg->FifoThresh = 4;      /* 4 */
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	2204      	movs	r2, #4
 8004300:	625a      	str	r2, [r3, #36]	; 0x24
  pBIACfg->ADCSinc3Osr = ADCSINC3OSR_2;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2202      	movs	r2, #2
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  pBIACfg->SinFreq = 20000;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	4a10      	ldr	r2, [pc, #64]	; (8004350 <AD5940BIAStructInit+0xac>)
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

  sweepCfg.SweepEn = bTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	753b      	strb	r3, [r7, #20]
  sweepCfg.SweepPoints = nb_pt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	623b      	str	r3, [r7, #32]
  sweepCfg.SweepStart = freq_min;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	61bb      	str	r3, [r7, #24]
  sweepCfg.SweepStop = freq_max;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	61fb      	str	r3, [r7, #28]
  sweepCfg.SweepLog = bTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sweepCfg.SweepIndex = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28

  pBIACfg->SweepCfg = sweepCfg;
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8004330:	f107 0514 	add.w	r5, r7, #20
 8004334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004338:	e895 0003 	ldmia.w	r5, {r0, r1}
 800433c:	e884 0003 	stmia.w	r4, {r0, r1}

}
 8004340:	bf00      	nop
 8004342:	3730      	adds	r7, #48	; 0x30
 8004344:	46bd      	mov	sp, r7
 8004346:	bdb0      	pop	{r4, r5, r7, pc}
 8004348:	43480000 	.word	0x43480000
 800434c:	41a00000 	.word	0x41a00000
 8004350:	469c4000 	.word	0x469c4000

08004354 <AD5940_BIA>:

void AD5940_BIA(long delay_mesure, uint32_t nb_pt, float freq_min, float freq_max, long nb_mesure)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af00      	add	r7, sp, #0
 800435a:	6178      	str	r0, [r7, #20]
 800435c:	6139      	str	r1, [r7, #16]
 800435e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004362:	edc7 0a02 	vstr	s1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  static uint32_t IntCount = 0;
  //static uint32_t count;
  uint32_t temp;

  AD5940PlatformCfg(); /*maintenant dans le main*/
 8004368:	f7ff ff3c 	bl	80041e4 <AD5940PlatformCfg>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, 0);//gpio1 high (led on)
 800436c:	2100      	movs	r1, #0
 800436e:	2014      	movs	r0, #20
 8004370:	f7fe f8c6 	bl	8002500 <AD5940_WriteReg>


  AD5940BIAStructInit(nb_pt, freq_min, freq_max); /* Configure your parameters in this function */
 8004374:	edd7 0a02 	vldr	s1, [r7, #8]
 8004378:	ed97 0a03 	vldr	s0, [r7, #12]
 800437c:	6938      	ldr	r0, [r7, #16]
 800437e:	f7ff ff91 	bl	80042a4 <AD5940BIAStructInit>
  //AD5940BIAFreqCfg(FreqCount);/*configure la frequence de depart*/

  AppBIAInit(AppBuff, APPBUFF_SIZE);    /* Initialize BIA application. Provide a buffer, which is used to store sequencer commands */
 8004382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004386:	485c      	ldr	r0, [pc, #368]	; (80044f8 <AD5940_BIA+0x1a4>)
 8004388:	f000 fca4 	bl	8004cd4 <AppBIAInit>
  AppBIACtrl(BIACTRL_START, 0);         /* Control BIA measurement to start. Second parameter has no meaning with this command. */
 800438c:	2100      	movs	r1, #0
 800438e:	2000      	movs	r0, #0
 8004390:	f000 f8d0 	bl	8004534 <AppBIACtrl>
  long origine_temps = HAL_GetTick(); //origine du temps pour effectuer des mesures dans le temps a interval regulier
 8004394:	f001 ff46 	bl	8006224 <HAL_GetTick>
 8004398:	4603      	mov	r3, r0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
  long temps = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
  long actual_mesure = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
  long TimeOut = delay_mesure*1000;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	623b      	str	r3, [r7, #32]

  my_printf("new\r\n");
 80043b0:	4852      	ldr	r0, [pc, #328]	; (80044fc <AD5940_BIA+0x1a8>)
 80043b2:	f001 fcdd 	bl	8005d70 <my_printf>
  AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
 80043b6:	2102      	movs	r1, #2
 80043b8:	2014      	movs	r0, #20
 80043ba:	f7fe f8a1 	bl	8002500 <AD5940_WriteReg>

  while(actual_mesure < nb_mesure)
 80043be:	e07c      	b.n	80044ba <AD5940_BIA+0x166>
  {
    /* Check if interrupt flag which will be set when interrupt occurred. */
    if(AD5940_GetMCUIntFlag())
 80043c0:	f7fc ff54 	bl	800126c <AD5940_GetMCUIntFlag>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04c      	beq.n	8004464 <AD5940_BIA+0x110>
    {
      IntCount++;
 80043ca:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <AD5940_BIA+0x1ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <AD5940_BIA+0x1ac>)
 80043d2:	6013      	str	r3, [r2, #0]
      AD5940_ClrMCUIntFlag(); /* Clear this flag */
 80043d4:	f7fc ff56 	bl	8001284 <AD5940_ClrMCUIntFlag>
      temp = APPBUFF_SIZE;
 80043d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043dc:	61fb      	str	r3, [r7, #28]
      AppBIAISR(AppBuff, &temp); /* Deal with it and provide a buffer to store data we got */
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	4619      	mov	r1, r3
 80043e4:	4844      	ldr	r0, [pc, #272]	; (80044f8 <AD5940_BIA+0x1a4>)
 80043e6:	f000 fec7 	bl	8005178 <AppBIAISR>
      BIAShowResult(AppBuff, temp); /* Show the results to UART */
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4619      	mov	r1, r3
 80043ee:	4842      	ldr	r0, [pc, #264]	; (80044f8 <AD5940_BIA+0x1a4>)
 80043f0:	f7ff fea6 	bl	8004140 <BIAShowResult>

      if(IntCount >= nb_pt)
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <AD5940_BIA+0x1ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d832      	bhi.n	8004464 <AD5940_BIA+0x110>
      {
        IntCount = 0;
 80043fe:	4b40      	ldr	r3, [pc, #256]	; (8004500 <AD5940_BIA+0x1ac>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
        actual_mesure++;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	3301      	adds	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
        //AD5940_AGPIOSet(AGPIO_Pin1);
        my_printf("stop\r\n");
 800440a:	483e      	ldr	r0, [pc, #248]	; (8004504 <AD5940_BIA+0x1b0>)
 800440c:	f001 fcb0 	bl	8005d70 <my_printf>
        AD5940_WriteReg(REG_AGPIO_GP0OUT, 0);//gpio1 low (led on)
 8004410:	2100      	movs	r1, #0
 8004412:	2014      	movs	r0, #20
 8004414:	f7fe f874 	bl	8002500 <AD5940_WriteReg>

        while( temps - origine_temps < delay_mesure*1000){
 8004418:	e003      	b.n	8004422 <AD5940_BIA+0xce>
        	temps = HAL_GetTick();
 800441a:	f001 ff03 	bl	8006224 <HAL_GetTick>
 800441e:	4603      	mov	r3, r0
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
        while( temps - origine_temps < delay_mesure*1000){
 8004422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	429a      	cmp	r2, r3
 8004434:	dbf1      	blt.n	800441a <AD5940_BIA+0xc6>
        }
        origine_temps += delay_mesure*1000;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004442:	4413      	add	r3, r2
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
        //AD5940_AGPIOClr(AGPIO_Pin1);

        my_printf("new\r\n");
 8004446:	482d      	ldr	r0, [pc, #180]	; (80044fc <AD5940_BIA+0x1a8>)
 8004448:	f001 fc92 	bl	8005d70 <my_printf>
        AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
 800444c:	2102      	movs	r1, #2
 800444e:	2014      	movs	r0, #20
 8004450:	f7fe f856 	bl	8002500 <AD5940_WriteReg>
		AppBIAInit(0, 0);    /* Re-initialize BIA application. Because sequences are ready, no need to provide a buffer, which is used to store sequencer commands */
 8004454:	2100      	movs	r1, #0
 8004456:	2000      	movs	r0, #0
 8004458:	f000 fc3c 	bl	8004cd4 <AppBIAInit>
		AppBIACtrl(BIACTRL_START, 0);          /* Control BIA measurement to start. Second parameter has no meaning with this command. */
 800445c:	2100      	movs	r1, #0
 800445e:	2000      	movs	r0, #0
 8004460:	f000 f868 	bl	8004534 <AppBIACtrl>
      }
    }

    /* gestion du timeout, relance l'ad5941 si le delai est trop long  */
    if(temps - origine_temps > 2*TimeOut)
 8004464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	429a      	cmp	r2, r3
 8004470:	dd1f      	ble.n	80044b2 <AD5940_BIA+0x15e>
    {
    	AD5940_ClrMCUIntFlag(); /* Clear this flag */
 8004472:	f7fc ff07 	bl	8001284 <AD5940_ClrMCUIntFlag>
    	my_printf("stop\r\n");
 8004476:	4823      	ldr	r0, [pc, #140]	; (8004504 <AD5940_BIA+0x1b0>)
 8004478:	f001 fc7a 	bl	8005d70 <my_printf>
		AD5940_WriteReg(REG_AGPIO_GP0OUT, 0);//gpio1 low (led on)
 800447c:	2100      	movs	r1, #0
 800447e:	2014      	movs	r0, #20
 8004480:	f7fe f83e 	bl	8002500 <AD5940_WriteReg>

		HAL_Delay(1000);
 8004484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004488:	f001 fed8 	bl	800623c <HAL_Delay>

		origine_temps = HAL_GetTick();
 800448c:	f001 feca 	bl	8006224 <HAL_GetTick>
 8004490:	4603      	mov	r3, r0
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c

		my_printf("new\r\n");
 8004494:	4819      	ldr	r0, [pc, #100]	; (80044fc <AD5940_BIA+0x1a8>)
 8004496:	f001 fc6b 	bl	8005d70 <my_printf>
		AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
 800449a:	2102      	movs	r1, #2
 800449c:	2014      	movs	r0, #20
 800449e:	f7fe f82f 	bl	8002500 <AD5940_WriteReg>
		AppBIAInit(0, 0);    /* Re-initialize BIA application. Because sequences are ready, no need to provide a buffer, which is used to store sequencer commands */
 80044a2:	2100      	movs	r1, #0
 80044a4:	2000      	movs	r0, #0
 80044a6:	f000 fc15 	bl	8004cd4 <AppBIAInit>
		AppBIACtrl(BIACTRL_START, 0);          /* Control BIA measurement to start. Second parameter has no meaning with this command. */
 80044aa:	2100      	movs	r1, #0
 80044ac:	2000      	movs	r0, #0
 80044ae:	f000 f841 	bl	8004534 <AppBIACtrl>
    }

    temps = HAL_GetTick();
 80044b2:	f001 feb7 	bl	8006224 <HAL_GetTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
  while(actual_mesure < nb_mesure)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	f6ff af7e 	blt.w	80043c0 <AD5940_BIA+0x6c>
  }

  HAL_Delay(1000);
 80044c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044c8:	f001 feb8 	bl	800623c <HAL_Delay>
  AppBIACtrl(BIACTRL_SHUTDOWN, 0);
 80044cc:	2100      	movs	r1, #0
 80044ce:	2004      	movs	r0, #4
 80044d0:	f000 f830 	bl	8004534 <AppBIACtrl>

  while(1)
  {
	  AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
 80044d4:	2102      	movs	r1, #2
 80044d6:	2014      	movs	r0, #20
 80044d8:	f7fe f812 	bl	8002500 <AD5940_WriteReg>
	  HAL_Delay(500);
 80044dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044e0:	f001 feac 	bl	800623c <HAL_Delay>
	  AD5940_WriteReg(REG_AGPIO_GP0OUT, 0);//gpio1 low (led on)
 80044e4:	2100      	movs	r1, #0
 80044e6:	2014      	movs	r0, #20
 80044e8:	f7fe f80a 	bl	8002500 <AD5940_WriteReg>
	  HAL_Delay(500);
 80044ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044f0:	f001 fea4 	bl	800623c <HAL_Delay>
	  AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
 80044f4:	e7ee      	b.n	80044d4 <AD5940_BIA+0x180>
 80044f6:	bf00      	nop
 80044f8:	2000066c 	.word	0x2000066c
 80044fc:	0800ce44 	.word	0x0800ce44
 8004500:	20000e6c 	.word	0x20000e6c
 8004504:	0800ce4c 	.word	0x0800ce4c

08004508 <AppBIAGetCfg>:
/**
   This function is provided for upper controllers that want to change
   application parameters specially for user defined parameters.
*/
AD5940Err AppBIAGetCfg(void *pCfg)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if(pCfg){
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <AppBIAGetCfg+0x18>
    *(AppBIACfg_Type**)pCfg = &AppBIACfg;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a05      	ldr	r2, [pc, #20]	; (8004530 <AppBIAGetCfg+0x28>)
 800451a:	601a      	str	r2, [r3, #0]
    return AD5940ERR_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e001      	b.n	8004524 <AppBIAGetCfg+0x1c>
  }
  return AD5940ERR_PARA;
 8004520:	f06f 0301 	mvn.w	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000000 	.word	0x20000000

08004534 <AppBIACtrl>:

AD5940Err AppBIACtrl(int32_t BcmCtrl, void *pPara)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b098      	sub	sp, #96	; 0x60
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  switch (BcmCtrl)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b04      	cmp	r3, #4
 8004542:	f200 8086 	bhi.w	8004652 <AppBIACtrl+0x11e>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <AppBIACtrl+0x18>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004561 	.word	0x08004561
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045e5 	.word	0x080045e5
 8004558:	080045ef 	.word	0x080045ef
 800455c:	08004615 	.word	0x08004615
  {
    case BIACTRL_START:
    {
      WUPTCfg_Type wupt_cfg;
      if(AD5940_WakeUp(10) > 10)  /* Wakeup AFE by read register, read 10 times at most */
 8004560:	200a      	movs	r0, #10
 8004562:	f7ff fa27 	bl	80039b4 <AD5940_WakeUp>
 8004566:	4603      	mov	r3, r0
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d902      	bls.n	8004572 <AppBIACtrl+0x3e>
        return AD5940ERR_WAKEUP;  /* Wakeup Failed */
 800456c:	f06f 0308 	mvn.w	r3, #8
 8004570:	e073      	b.n	800465a <AppBIACtrl+0x126>
      if(AppBIACfg.BIAInited == bFALSE)
 8004572:	4b3c      	ldr	r3, [pc, #240]	; (8004664 <AppBIACtrl+0x130>)
 8004574:	f893 33b4 	ldrb.w	r3, [r3, #948]	; 0x3b4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <AppBIACtrl+0x4e>
        return AD5940ERR_APPERROR;
 800457c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004580:	e06b      	b.n	800465a <AppBIACtrl+0x126>
      /* Start it */
      wupt_cfg.WuptEn = bTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
      wupt_cfg.WuptEndSeq = WUPTENDSEQ_A;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
      wupt_cfg.WuptOrder[0] = SEQID_0;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
      wupt_cfg.SeqxSleepTime[SEQID_0] = (uint32_t)(AppBIACfg.WuptClkFreq/AppBIACfg.BiaODR)-2-1;
 8004590:	4b34      	ldr	r3, [pc, #208]	; (8004664 <AppBIACtrl+0x130>)
 8004592:	edd3 6a07 	vldr	s13, [r3, #28]
 8004596:	4b33      	ldr	r3, [pc, #204]	; (8004664 <AppBIACtrl+0x130>)
 8004598:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800459c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a4:	ee17 3a90 	vmov	r3, s15
 80045a8:	3b03      	subs	r3, #3
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      wupt_cfg.SeqxWakeupTime[SEQID_0] = 1; /* The minimum value is 1. Do not set it to zero. Set it to 1 will spend 2 32kHz clock. */
 80045ac:	2301      	movs	r3, #1
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      AD5940_WUPTCfg(&wupt_cfg);
 80045b0:	f107 0308 	add.w	r3, r7, #8
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe feec 	bl	8003392 <AD5940_WUPTCfg>

      AppBIACfg.FifoDataCount = 0;  /* restart */
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <AppBIACtrl+0x130>)
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 80045c2:	e049      	b.n	8004658 <AppBIACtrl+0x124>
      break;
    }
    case BIACTRL_STOPNOW:
    {
      if(AD5940_WakeUp(10) > 10)  /* Wakeup AFE by read register, read 10 times at most */
 80045c4:	200a      	movs	r0, #10
 80045c6:	f7ff f9f5 	bl	80039b4 <AD5940_WakeUp>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b0a      	cmp	r3, #10
 80045ce:	d902      	bls.n	80045d6 <AppBIACtrl+0xa2>
        return AD5940ERR_WAKEUP;  /* Wakeup Failed */
 80045d0:	f06f 0308 	mvn.w	r3, #8
 80045d4:	e041      	b.n	800465a <AppBIACtrl+0x126>
      /* Start Wupt right now */
      AD5940_WUPTCtrl(bFALSE);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fe ffd2 	bl	8003580 <AD5940_WUPTCtrl>
      /* There is chance this operation will fail because sequencer could put AFE back
        to hibernate mode just after waking up. Use STOPSYNC is better. */
      AD5940_WUPTCtrl(bFALSE);
 80045dc:	2000      	movs	r0, #0
 80045de:	f7fe ffcf 	bl	8003580 <AD5940_WUPTCtrl>
      break;
 80045e2:	e039      	b.n	8004658 <AppBIACtrl+0x124>
    }
    case BIACTRL_STOPSYNC:
    {
      AppBIACfg.StopRequired = bTRUE;
 80045e4:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <AppBIACtrl+0x130>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
      break;
 80045ec:	e034      	b.n	8004658 <AppBIACtrl+0x124>
    }
    case BIACTRL_GETFREQ:
    if(pPara)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d030      	beq.n	8004656 <AppBIACtrl+0x122>
    {
      if(AppBIACfg.SweepCfg.SweepEn == bTRUE)
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <AppBIACtrl+0x130>)
 80045f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <AppBIACtrl+0xd6>
        *(float*)pPara = AppBIACfg.FreqofData;
 80045fe:	4b19      	ldr	r3, [pc, #100]	; (8004664 <AppBIACtrl+0x130>)
 8004600:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]
      else
        *(float*)pPara = AppBIACfg.SinFreq;
    }
    break;
 8004608:	e025      	b.n	8004656 <AppBIACtrl+0x122>
        *(float*)pPara = AppBIACfg.SinFreq;
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <AppBIACtrl+0x130>)
 800460c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]
    break;
 8004612:	e020      	b.n	8004656 <AppBIACtrl+0x122>
    case BIACTRL_SHUTDOWN:
    {
      AppBIACtrl(BIACTRL_STOPNOW, 0);  /* Stop the measurement if it's running. */
 8004614:	2100      	movs	r1, #0
 8004616:	2001      	movs	r0, #1
 8004618:	f7ff ff8c 	bl	8004534 <AppBIACtrl>
      /* Turn off LPloop related blocks which are not controlled automatically by sleep operation */
      AFERefCfg_Type aferef_cfg;
      LPLoopCfg_Type lp_loop;
      memset(&aferef_cfg, 0, sizeof(aferef_cfg));
 800461c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004620:	220d      	movs	r2, #13
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f004 ffd5 	bl	80095d4 <memset>
      AD5940_REFCfgS(&aferef_cfg);
 800462a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe f860 	bl	80026f4 <AD5940_REFCfgS>
      memset(&lp_loop, 0, sizeof(lp_loop));
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	223c      	movs	r2, #60	; 0x3c
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f004 ffc9 	bl	80095d4 <memset>
      AD5940_LPLoopCfgS(&lp_loop);
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fad0 	bl	8002bec <AD5940_LPLoopCfgS>
      AD5940_EnterSleepS();  /* Enter Hibernate */
 800464c:	f7ff f9a4 	bl	8003998 <AD5940_EnterSleepS>
    }
    break;
 8004650:	e002      	b.n	8004658 <AppBIACtrl+0x124>
    default:
    break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <AppBIACtrl+0x124>
    break;
 8004656:	bf00      	nop
  }
  return AD5940ERR_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3760      	adds	r7, #96	; 0x60
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000000 	.word	0x20000000

08004668 <AppBIASeqCfgGen>:

/* Generate init sequence */
static AD5940Err AppBIASeqCfgGen(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0c4      	sub	sp, #272	; 0x110
 800466c:	af00      	add	r7, sp, #0
  AD5940Err error = AD5940ERR_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  LPLoopCfg_Type lp_loop;
  DSPCfg_Type dsp_cfg;
  float sin_freq;

  /* Start sequence generator here */
  AD5940_SEQGenCtrl(bTRUE);
 8004674:	2001      	movs	r0, #1
 8004676:	f7fd f87d 	bl	8001774 <AD5940_SEQGenCtrl>

  //AD5940_AFECtrlS(AFECTRL_ALL, bFALSE);  /* Init all to disable state */

  aferef_cfg.HpBandgapEn = bTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
  aferef_cfg.Hp1V1BuffEn = bTRUE;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
  aferef_cfg.Hp1V8BuffEn = bTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
  aferef_cfg.Disc1V1Cap = bFALSE;
 800468c:	2300      	movs	r3, #0
 800468e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
  aferef_cfg.Disc1V8Cap = bFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
  aferef_cfg.Hp1V8ThemBuff = bFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
  aferef_cfg.Hp1V8Ilimit = bFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
  aferef_cfg.Lp1V1BuffEn = bFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  aferef_cfg.Lp1V8BuffEn = bFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  /* LP reference control - turn off them to save power*/
  aferef_cfg.LpBandgapEn = bTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
  aferef_cfg.LpRefBufEn = bTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
  aferef_cfg.LpRefBoostEn = bFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  AD5940_REFCfgS(&aferef_cfg);
 80046c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe f814 	bl	80026f4 <AD5940_REFCfgS>
  hs_loop.HsDacCfg.ExcitBufGain = AppBIACfg.ExcitBufGain;
 80046cc:	4bb3      	ldr	r3, [pc, #716]	; (800499c <AppBIASeqCfgGen+0x334>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  hs_loop.HsDacCfg.HsDacGain = AppBIACfg.HsDacGain;
 80046d4:	4bb1      	ldr	r3, [pc, #708]	; (800499c <AppBIASeqCfgGen+0x334>)
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  hs_loop.HsDacCfg.HsDacUpdateRate = AppBIACfg.HsDacUpdateRate;
 80046dc:	4baf      	ldr	r3, [pc, #700]	; (800499c <AppBIASeqCfgGen+0x334>)
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  hs_loop.HsTiaCfg.DiodeClose = bFALSE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
  hs_loop.HsTiaCfg.HstiaBias = HSTIABIAS_1P1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  hs_loop.HsTiaCfg.HstiaCtia = AppBIACfg.CtiaSel; /* 31pF + 2pF */
 80046f0:	4baa      	ldr	r3, [pc, #680]	; (800499c <AppBIASeqCfgGen+0x334>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  hs_loop.HsTiaCfg.HstiaDeRload = HSTIADERLOAD_OPEN;
 80046f8:	2305      	movs	r3, #5
 80046fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  hs_loop.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_OPEN;
 80046fe:	230b      	movs	r3, #11
 8004700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  hs_loop.HsTiaCfg.HstiaRtiaSel = AppBIACfg.HstiaRtiaSel;
 8004704:	4ba5      	ldr	r3, [pc, #660]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  hs_loop.SWMatCfg.Dswitch = SWD_OPEN;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hs_loop.SWMatCfg.Pswitch = SWP_PL|SWP_PL2;
 8004712:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  hs_loop.SWMatCfg.Nswitch = SWN_NL|SWN_NL2;
 800471a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800471e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  hs_loop.SWMatCfg.Tswitch = SWT_TRTIA;
 8004722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  hs_loop.WgCfg.WgType = WGTYPE_SIN;
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  hs_loop.WgCfg.GainCalEn = bFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
  hs_loop.WgCfg.OffsetCalEn = bFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
  if(AppBIACfg.SweepCfg.SweepEn == bTRUE)
 800473c:	4b97      	ldr	r3, [pc, #604]	; (800499c <AppBIASeqCfgGen+0x334>)
 800473e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004742:	2b01      	cmp	r3, #1
 8004744:	d116      	bne.n	8004774 <AppBIASeqCfgGen+0x10c>
  {
		AppBIACfg.SweepCfg.SweepIndex = 0;
 8004746:	4b95      	ldr	r3, [pc, #596]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004748:	2200      	movs	r2, #0
 800474a:	67da      	str	r2, [r3, #124]	; 0x7c
    AppBIACfg.FreqofData = AppBIACfg.SweepCfg.SweepStart;
 800474c:	4b93      	ldr	r3, [pc, #588]	; (800499c <AppBIASeqCfgGen+0x334>)
 800474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004750:	4a92      	ldr	r2, [pc, #584]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004752:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    AppBIACfg.SweepCurrFreq = AppBIACfg.SweepCfg.SweepStart;
 8004756:	4b91      	ldr	r3, [pc, #580]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	4a90      	ldr	r2, [pc, #576]	; (800499c <AppBIASeqCfgGen+0x334>)
 800475c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    AD5940_SweepNext(&AppBIACfg.SweepCfg, &AppBIACfg.SweepNextFreq);
 8004760:	498f      	ldr	r1, [pc, #572]	; (80049a0 <AppBIASeqCfgGen+0x338>)
 8004762:	4890      	ldr	r0, [pc, #576]	; (80049a4 <AppBIASeqCfgGen+0x33c>)
 8004764:	f7fd fb24 	bl	8001db0 <AD5940_SweepNext>
    sin_freq = AppBIACfg.SweepCurrFreq;
 8004768:	4b8c      	ldr	r3, [pc, #560]	; (800499c <AppBIASeqCfgGen+0x334>)
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004772:	e008      	b.n	8004786 <AppBIASeqCfgGen+0x11e>
  }
  else
  {
    sin_freq = AppBIACfg.SinFreq;
 8004774:	4b89      	ldr	r3, [pc, #548]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    AppBIACfg.FreqofData = sin_freq;
 800477c:	4a87      	ldr	r2, [pc, #540]	; (800499c <AppBIASeqCfgGen+0x334>)
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004782:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
  }
  hs_loop.WgCfg.SinCfg.SinFreqWord = AD5940_WGFreqWordCal(sin_freq, AppBIACfg.SysClkFreq);
 8004786:	4b85      	ldr	r3, [pc, #532]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004788:	edd3 7a06 	vldr	s15, [r3, #24]
 800478c:	eef0 0a67 	vmov.f32	s1, s15
 8004790:	ed97 0a43 	vldr	s0, [r7, #268]	; 0x10c
 8004794:	f7fe f9cc 	bl	8002b30 <AD5940_WGFreqWordCal>
 8004798:	4603      	mov	r3, r0
 800479a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  hs_loop.WgCfg.SinCfg.SinAmplitudeWord = (uint32_t)(AppBIACfg.DacVoltPP/800.0f*2047 + 0.5f);
 800479e:	4b7f      	ldr	r3, [pc, #508]	; (800499c <AppBIASeqCfgGen+0x334>)
 80047a0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80047a4:	eddf 6a80 	vldr	s13, [pc, #512]	; 80049a8 <AppBIASeqCfgGen+0x340>
 80047a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80049ac <AppBIASeqCfgGen+0x344>
 80047b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c0:	ee17 3a90 	vmov	r3, s15
 80047c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  hs_loop.WgCfg.SinCfg.SinOffsetWord = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  hs_loop.WgCfg.SinCfg.SinPhaseWord = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  AD5940_HSLoopCfgS(&hs_loop);
 80047d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe f812 	bl	8002802 <AD5940_HSLoopCfgS>

  lp_loop.LpDacCfg.LpdacSel = LPDAC0;
 80047de:	2300      	movs	r3, #0
 80047e0:	647b      	str	r3, [r7, #68]	; 0x44
  lp_loop.LpDacCfg.LpDacSrc = LPDACSRC_MMR;
 80047e2:	2300      	movs	r3, #0
 80047e4:	64bb      	str	r3, [r7, #72]	; 0x48
  lp_loop.LpDacCfg.LpDacSW = LPDACSW_VBIAS2LPPA|LPDACSW_VBIAS2PIN|LPDACSW_VZERO2LPTIA|LPDACSW_VZERO2PIN;
 80047e6:	231e      	movs	r3, #30
 80047e8:	657b      	str	r3, [r7, #84]	; 0x54
  lp_loop.LpDacCfg.LpDacVzeroMux = LPDACVZERO_6BIT;
 80047ea:	2300      	movs	r3, #0
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  lp_loop.LpDacCfg.LpDacVbiasMux = LPDACVBIAS_12BIT;
 80047ee:	2300      	movs	r3, #0
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50
  lp_loop.LpDacCfg.LpDacRef = LPDACREF_2P5;
 80047f2:	2300      	movs	r3, #0
 80047f4:	65bb      	str	r3, [r7, #88]	; 0x58
  lp_loop.LpDacCfg.DataRst = bFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  lp_loop.LpDacCfg.PowerEn = bTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  lp_loop.LpDacCfg.DacData12Bit = (uint32_t)((1100-200)/2200.0*4095);
 8004802:	f240 638b 	movw	r3, #1675	; 0x68b
 8004806:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  lp_loop.LpDacCfg.DacData6Bit = 31;
 800480a:	231f      	movs	r3, #31
 800480c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

  lp_loop.LpAmpCfg.LpAmpSel = LPAMP0;
 8004810:	2300      	movs	r3, #0
 8004812:	667b      	str	r3, [r7, #100]	; 0x64
  lp_loop.LpAmpCfg.LpAmpPwrMod = LPAMPPWR_NORM;
 8004814:	2300      	movs	r3, #0
 8004816:	677b      	str	r3, [r7, #116]	; 0x74
  lp_loop.LpAmpCfg.LpPaPwrEn = bTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
  lp_loop.LpAmpCfg.LpTiaPwrEn = bTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  lp_loop.LpAmpCfg.LpTiaRf = LPTIARF_20K;
 8004824:	2302      	movs	r3, #2
 8004826:	66bb      	str	r3, [r7, #104]	; 0x68
  lp_loop.LpAmpCfg.LpTiaRload = LPTIARLOAD_SHORT;
 8004828:	2300      	movs	r3, #0
 800482a:	66fb      	str	r3, [r7, #108]	; 0x6c
  lp_loop.LpAmpCfg.LpTiaRtia = LPTIARTIA_OPEN;
 800482c:	2300      	movs	r3, #0
 800482e:	673b      	str	r3, [r7, #112]	; 0x70
  lp_loop.LpAmpCfg.LpTiaSW = LPTIASW(5)|LPTIASW(6)|LPTIASW(7)|LPTIASW(8)|LPTIASW(9)|LPTIASW(12)|LPTIASW(13); /** @todo Optimization needed for new silicon */
 8004830:	f243 33e0 	movw	r3, #13280	; 0x33e0
 8004834:	67bb      	str	r3, [r7, #120]	; 0x78
  AD5940_LPLoopCfgS(&lp_loop);
 8004836:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f9d6 	bl	8002bec <AD5940_LPLoopCfgS>

  dsp_cfg.ADCBaseCfg.ADCMuxN = ADCMUXN_HSTIA_N;
 8004840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004844:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004848:	2201      	movs	r2, #1
 800484a:	605a      	str	r2, [r3, #4]
  dsp_cfg.ADCBaseCfg.ADCMuxP = ADCMUXP_HSTIA_P;
 800484c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004850:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
  dsp_cfg.ADCBaseCfg.ADCPga = AppBIACfg.ADCPgaGain;
 8004858:	4b50      	ldr	r3, [pc, #320]	; (800499c <AppBIASeqCfgGen+0x334>)
 800485a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800485c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004860:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004864:	609a      	str	r2, [r3, #8]

  memset(&dsp_cfg.ADCDigCompCfg, 0, sizeof(dsp_cfg.ADCDigCompCfg));
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	3320      	adds	r3, #32
 800486a:	2208      	movs	r2, #8
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f004 feb0 	bl	80095d4 <memset>

  dsp_cfg.ADCFilterCfg.ADCAvgNum = ADCAVGNUM_16;  /* Don't care because it's disabled */
 8004874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004878:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800487c:	2203      	movs	r2, #3
 800487e:	615a      	str	r2, [r3, #20]
  dsp_cfg.ADCFilterCfg.ADCRate = ADCRATE_800KHZ;	/* Tell filter block clock rate of ADC*/
 8004880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004884:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004888:	2201      	movs	r2, #1
 800488a:	619a      	str	r2, [r3, #24]
  dsp_cfg.ADCFilterCfg.ADCSinc2Osr = AppBIACfg.ADCSinc2Osr;
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <AppBIASeqCfgGen+0x334>)
 800488e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004892:	461a      	mov	r2, r3
 8004894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800489c:	611a      	str	r2, [r3, #16]
  dsp_cfg.ADCFilterCfg.ADCSinc3Osr = AppBIACfg.ADCSinc3Osr;
 800489e:	4b3f      	ldr	r3, [pc, #252]	; (800499c <AppBIASeqCfgGen+0x334>)
 80048a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a4:	461a      	mov	r2, r3
 80048a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048ae:	60da      	str	r2, [r3, #12]
  dsp_cfg.ADCFilterCfg.BpSinc3 = bFALSE;
 80048b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048b8:	2200      	movs	r2, #0
 80048ba:	775a      	strb	r2, [r3, #29]
  dsp_cfg.ADCFilterCfg.BpNotch = bTRUE;
 80048bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048c4:	2201      	movs	r2, #1
 80048c6:	771a      	strb	r2, [r3, #28]
  dsp_cfg.ADCFilterCfg.Sinc2NotchEnable = bTRUE;
 80048c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048d0:	2201      	movs	r2, #1
 80048d2:	779a      	strb	r2, [r3, #30]
  dsp_cfg.DftCfg.DftNum = AppBIACfg.DftNum;
 80048d4:	4b31      	ldr	r3, [pc, #196]	; (800499c <AppBIASeqCfgGen+0x334>)
 80048d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
  dsp_cfg.DftCfg.DftSrc = AppBIACfg.DftSrc;
 80048e2:	4b2e      	ldr	r3, [pc, #184]	; (800499c <AppBIASeqCfgGen+0x334>)
 80048e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
  dsp_cfg.DftCfg.HanWinEn = AppBIACfg.HanWinEn;
 80048f0:	4b2a      	ldr	r3, [pc, #168]	; (800499c <AppBIASeqCfgGen+0x334>)
 80048f2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80048f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  memset(&dsp_cfg.StatCfg, 0, sizeof(dsp_cfg.StatCfg)); /* Don't care about Statistic */
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	3334      	adds	r3, #52	; 0x34
 8004906:	220c      	movs	r2, #12
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f004 fe62 	bl	80095d4 <memset>
  AD5940_DSPCfgS(&dsp_cfg);
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe fa70 	bl	8002df8 <AD5940_DSPCfgS>

  /* Enable all of them. They are automatically turned off during hibernate mode to save power */
  AD5940_AFECtrlS(AFECTRL_HPREFPWR|AFECTRL_HSTIAPWR|AFECTRL_INAMPPWR|AFECTRL_EXTBUFPWR|\
 8004918:	2101      	movs	r1, #1
 800491a:	4825      	ldr	r0, [pc, #148]	; (80049b0 <AppBIASeqCfgGen+0x348>)
 800491c:	f7fd fe80 	bl	8002620 <AD5940_AFECtrlS>
                AFECTRL_WG|AFECTRL_DACREFPWR|AFECTRL_HSDACPWR|\
                AFECTRL_SINC2NOTCH, bTRUE);
  AD5940_SEQGpioCtrlS(0/*AGPIO_Pin6|AGPIO_Pin5|AGPIO_Pin1*/);        //GP6->endSeq, GP5 -> AD8233=OFF, GP1->RLD=OFF .
 8004920:	2000      	movs	r0, #0
 8004922:	f7fe fd29 	bl	8003378 <AD5940_SEQGpioCtrlS>

  /* Sequence end. */
  AD5940_SEQGenInsert(SEQ_STOP()); /* Add one extra command to disable sequencer for initialization sequence because we only want it to run one time. */
 8004926:	f04f 4001 	mov.w	r0, #2164260864	; 0x81000000
 800492a:	f7fc fdb9 	bl	80014a0 <AD5940_SEQGenInsert>

  /* Stop here */
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
 800492e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004932:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc fefb 	bl	8001734 <AD5940_SEQGenFetchSeq>
 800493e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
 8004942:	2000      	movs	r0, #0
 8004944:	f7fc ff16 	bl	8001774 <AD5940_SEQGenCtrl>
  if(error == AD5940ERR_OK)
 8004948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800494c:	2b00      	cmp	r3, #0
 800494e:	d11e      	bne.n	800498e <AppBIASeqCfgGen+0x326>
  {
    AppBIACfg.InitSeqInfo.SeqId = SEQID_1;
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004952:	2201      	movs	r2, #1
 8004954:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    AppBIACfg.InitSeqInfo.SeqRamAddr = AppBIACfg.SeqStartAddr;
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <AppBIASeqCfgGen+0x334>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a0f      	ldr	r2, [pc, #60]	; (800499c <AppBIASeqCfgGen+0x334>)
 800495e:	f8c2 33bc 	str.w	r3, [r2, #956]	; 0x3bc
    AppBIACfg.InitSeqInfo.pSeqCmd = pSeqCmd;
 8004962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004968:	f8c2 33c8 	str.w	r3, [r2, #968]	; 0x3c8
    AppBIACfg.InitSeqInfo.SeqLen = SeqLen;
 800496c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004972:	f8c2 33c0 	str.w	r3, [r2, #960]	; 0x3c0
    /* Write command to SRAM */
    AD5940_SEQCmdWrite(AppBIACfg.InitSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <AppBIASeqCfgGen+0x334>)
 8004978:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800497c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8004980:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fc7e 	bl	8003286 <AD5940_SEQCmdWrite>
  }
  else
    return error; /* Error */
  return AD5940ERR_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e001      	b.n	8004992 <AppBIASeqCfgGen+0x32a>
    return error; /* Error */
 800498e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
}
 8004992:	4618      	mov	r0, r3
 8004994:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000000 	.word	0x20000000
 80049a0:	20000084 	.word	0x20000084
 80049a4:	20000068 	.word	0x20000068
 80049a8:	44480000 	.word	0x44480000
 80049ac:	44ffe000 	.word	0x44ffe000
 80049b0:	00114e60 	.word	0x00114e60
 80049b4:	00000000 	.word	0x00000000

080049b8 <AppBIASeqMeasureGen>:

static AD5940Err AppBIASeqMeasureGen(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b090      	sub	sp, #64	; 0x40
 80049bc:	af00      	add	r7, sp, #0
  AD5940Err error = AD5940ERR_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint32_t WaitClks;
  SWMatrixCfg_Type sw_cfg;
  ClksCalInfo_Type clks_cal;

  clks_cal.DataType = DATATYPE_DFT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	603b      	str	r3, [r7, #0]
  clks_cal.DftSrc = AppBIACfg.DftSrc;
 80049c6:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	617b      	str	r3, [r7, #20]
  clks_cal.DataCount = 1L<<(AppBIACfg.DftNum+2); /* 2^(DFTNUMBER+2) */
 80049cc:	4b7e      	ldr	r3, [pc, #504]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	3302      	adds	r3, #2
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	607b      	str	r3, [r7, #4]
  clks_cal.ADCSinc2Osr = AppBIACfg.ADCSinc2Osr;
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e0:	60fb      	str	r3, [r7, #12]
  clks_cal.ADCSinc3Osr = AppBIACfg.ADCSinc3Osr;
 80049e2:	4b79      	ldr	r3, [pc, #484]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e8:	60bb      	str	r3, [r7, #8]
  clks_cal.ADCAvgNum = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
  clks_cal.RatioSys2AdcClk = AppBIACfg.SysClkFreq/AppBIACfg.AdcClkFreq;
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80049f4:	4b74      	ldr	r3, [pc, #464]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 80049f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80049fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
  AD5940_ClksCalculate(&clks_cal, &WaitClks);
 8004a02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a06:	463b      	mov	r3, r7
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd f87c 	bl	8001b08 <AD5940_ClksCalculate>

  /* Start sequence generator here */
  AD5940_SEQGenCtrl(bTRUE);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7fc feaf 	bl	8001774 <AD5940_SEQGenCtrl>

  AD5940_SEQGpioCtrlS(AGPIO_Pin6/*|AGPIO_Pin5|AGPIO_Pin1*/);//GP6->endSeq, GP5 -> AD8233=OFF, GP1->RLD=OFF .
 8004a16:	2040      	movs	r0, #64	; 0x40
 8004a18:	f7fe fcae 	bl	8003378 <AD5940_SEQGpioCtrlS>

  AD5940_SEQGenInsert(SEQ_WAIT(16*250));  /* @todo wait 250us?? */
 8004a1c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004a20:	f7fc fd3e 	bl	80014a0 <AD5940_SEQGenInsert>
  sw_cfg.Dswitch = SWD_CE0;
 8004a24:	2310      	movs	r3, #16
 8004a26:	623b      	str	r3, [r7, #32]
  sw_cfg.Pswitch = SWP_CE0;
 8004a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
  sw_cfg.Nswitch = SWN_AIN1;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sw_cfg.Tswitch = SWT_AIN1|SWT_TRTIA;
 8004a32:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  AD5940_SWMatrixCfgS(&sw_cfg);
 8004a38:	f107 0320 	add.w	r3, r7, #32
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fd fefb 	bl	8002838 <AD5940_SWMatrixCfgS>

  AD5940_ADCMuxCfgS(ADCMUXP_HSTIA_P, ADCMUXN_HSTIA_N);
 8004a42:	2101      	movs	r1, #1
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7fe faa5 	bl	8002f94 <AD5940_ADCMuxCfgS>
  AD5940_AFECtrlS(AFECTRL_WG|AFECTRL_ADCPWR, bTRUE);  /* Enable Waveform generator, ADC power */
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 8004a50:	f7fd fde6 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*50));
 8004a54:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004a58:	f7fc fd22 	bl	80014a0 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);  /* Start ADC convert and DFT */
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8004a62:	f7fd fddd 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));  /* wait for first data ready */
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fc fd17 	bl	80014a0 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
 8004a72:	2100      	movs	r1, #0
 8004a74:	f24c 1080 	movw	r0, #49536	; 0xc180
 8004a78:	f7fd fdd2 	bl	8002620 <AD5940_AFECtrlS>

  AD5940_ADCMuxCfgS(ADCMUXP_AIN3, ADCMUXN_AIN2);
 8004a7c:	2106      	movs	r1, #6
 8004a7e:	2007      	movs	r0, #7
 8004a80:	f7fe fa88 	bl	8002f94 <AD5940_ADCMuxCfgS>
  AD5940_AFECtrlS(AFECTRL_WG|AFECTRL_ADCPWR, bTRUE);  /* Enable Waveform generator, ADC power */
 8004a84:	2101      	movs	r1, #1
 8004a86:	f44f 4081 	mov.w	r0, #16512	; 0x4080
 8004a8a:	f7fd fdc9 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(16*50));  //delay for signal settling DFT_WAIT
 8004a8e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004a92:	f7fc fd05 	bl	80014a0 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT, bTRUE);  /* Start ADC convert and DFT */
 8004a96:	2101      	movs	r1, #1
 8004a98:	f44f 4001 	mov.w	r0, #33024	; 0x8100
 8004a9c:	f7fd fdc0 	bl	8002620 <AD5940_AFECtrlS>
  AD5940_SEQGenInsert(SEQ_WAIT(WaitClks));  /* wait for first data ready */
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fc fcfa 	bl	80014a0 <AD5940_SEQGenInsert>
  AD5940_AFECtrlS(AFECTRL_ADCCNV|AFECTRL_DFT|AFECTRL_WG|AFECTRL_ADCPWR, bFALSE);  /* Stop ADC convert and DFT */
 8004aac:	2100      	movs	r1, #0
 8004aae:	f24c 1080 	movw	r0, #49536	; 0xc180
 8004ab2:	f7fd fdb5 	bl	8002620 <AD5940_AFECtrlS>

  sw_cfg.Dswitch = SWD_OPEN;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
  sw_cfg.Pswitch = SWP_PL|SWP_PL2;
 8004aba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  sw_cfg.Nswitch = SWN_NL|SWN_NL2;
 8004ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sw_cfg.Tswitch = SWT_TRTIA;
 8004ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  AD5940_SWMatrixCfgS(&sw_cfg); /* Float switches */
 8004acc:	f107 0320 	add.w	r3, r7, #32
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fd feb1 	bl	8002838 <AD5940_SWMatrixCfgS>

  AD5940_SEQGpioCtrlS(0/*AGPIO_Pin6|AGPIO_Pin5|AGPIO_Pin1*/);        //GP6->endSeq, GP5 -> AD8233=OFF, GP1->RLD=OFF .
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f7fe fc4e 	bl	8003378 <AD5940_SEQGpioCtrlS>
  AD5940_EnterSleepS();/* Goto hibernate */
 8004adc:	f7fe ff5c 	bl	8003998 <AD5940_EnterSleepS>
  /* Sequence end. */
  error = AD5940_SEQGenFetchSeq(&pSeqCmd, &SeqLen);
 8004ae0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc fe22 	bl	8001734 <AD5940_SEQGenFetchSeq>
 8004af0:	63f8      	str	r0, [r7, #60]	; 0x3c
  AD5940_SEQGenCtrl(bFALSE); /* Stop sequencer generator */
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fc fe3e 	bl	8001774 <AD5940_SEQGenCtrl>

  AppBIACfg.MeasSeqCycleCount = AD5940_SEQCycleTime();
 8004af8:	f7fc fe5a 	bl	80017b0 <AD5940_SEQCycleTime>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b00:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8
  AppBIACfg.MaxODR = 1/(((AppBIACfg.MeasSeqCycleCount + 10) / 16.0)* 1E-6)  ;
 8004b04:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b06:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8004b0a:	330a      	adds	r3, #10
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fb fd01 	bl	8000514 <__aeabi_ui2d>
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <AppBIASeqMeasureGen+0x214>)
 8004b18:	f7fb fea0 	bl	800085c <__aeabi_ddiv>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	a326      	add	r3, pc, #152	; (adr r3, 8004bc0 <AppBIASeqMeasureGen+0x208>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	f7fb fd6d 	bl	8000608 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	4926      	ldr	r1, [pc, #152]	; (8004bd0 <AppBIASeqMeasureGen+0x218>)
 8004b38:	f7fb fe90 	bl	800085c <__aeabi_ddiv>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	f7fc f858 	bl	8000bf8 <__aeabi_d2f>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b4c:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  if(AppBIACfg.BiaODR > AppBIACfg.MaxODR)
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b52:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b58:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
 8004b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	dd04      	ble.n	8004b70 <AppBIASeqMeasureGen+0x1b8>
  {
    /* We have requested a sampling rate that cannot be achieved with the time it
       takes to acquire a sample.
    */
    AppBIACfg.BiaODR = AppBIACfg.MaxODR;
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b68:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8004b6c:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b6e:	6293      	str	r3, [r2, #40]	; 0x28
  }

  if(error == AD5940ERR_OK)
 8004b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11f      	bne.n	8004bb6 <AppBIASeqMeasureGen+0x1fe>
  {
    AppBIACfg.MeasureSeqInfo.SeqId = SEQID_0;
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    AppBIACfg.MeasureSeqInfo.SeqRamAddr = AppBIACfg.InitSeqInfo.SeqRamAddr + AppBIACfg.InitSeqInfo.SeqLen ;
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b80:	f8d3 23bc 	ldr.w	r2, [r3, #956]	; 0x3bc
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b86:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8004b8a:	4413      	add	r3, r2
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b8e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    AppBIACfg.MeasureSeqInfo.pSeqCmd = pSeqCmd;
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b96:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
    AppBIACfg.MeasureSeqInfo.SeqLen = SeqLen;
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004b9e:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    /* Write command to SRAM */
    AD5940_SEQCmdWrite(AppBIACfg.MeasureSeqInfo.SeqRamAddr, pSeqCmd, SeqLen);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <AppBIASeqMeasureGen+0x210>)
 8004ba4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fb6a 	bl	8003286 <AD5940_SEQCmdWrite>
  }
  else
    return error; /* Error */
  return AD5940ERR_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <AppBIASeqMeasureGen+0x200>
    return error; /* Error */
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3740      	adds	r7, #64	; 0x40
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	a0b5ed8d 	.word	0xa0b5ed8d
 8004bc4:	3eb0c6f7 	.word	0x3eb0c6f7
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	40300000 	.word	0x40300000
 8004bd0:	3ff00000 	.word	0x3ff00000

08004bd4 <AppBIARtiaCal>:

static AD5940Err AppBIARtiaCal(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b094      	sub	sp, #80	; 0x50
 8004bd8:	af00      	add	r7, sp, #0
  HSRTIACal_Type hsrtia_cal;

  hsrtia_cal.AdcClkFreq = AppBIACfg.AdcClkFreq;
 8004bda:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  hsrtia_cal.ADCSinc2Osr = AppBIACfg.ADCSinc2Osr;
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsrtia_cal.ADCSinc3Osr = AppBIACfg.ADCSinc3Osr;
 8004be8:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
  hsrtia_cal.bPolarResult = bTRUE; /* We need magnitude and phase here */
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  hsrtia_cal.DftCfg.DftNum = AppBIACfg.DftNum;
 8004bf4:	4b34      	ldr	r3, [pc, #208]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsrtia_cal.DftCfg.DftSrc = AppBIACfg.DftSrc;
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
  hsrtia_cal.DftCfg.HanWinEn = AppBIACfg.HanWinEn;
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c02:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004c06:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  hsrtia_cal.fRcal= AppBIACfg.RcalVal;
 8004c0a:	4b2f      	ldr	r3, [pc, #188]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	60bb      	str	r3, [r7, #8]
  hsrtia_cal.HsTiaCfg.DiodeClose = bFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3020 	strb.w	r3, [r7, #32]
  hsrtia_cal.HsTiaCfg.HstiaBias = HSTIABIAS_1P1;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  hsrtia_cal.HsTiaCfg.HstiaCtia = AppBIACfg.CtiaSel;
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	61fb      	str	r3, [r7, #28]
  hsrtia_cal.HsTiaCfg.HstiaDeRload = HSTIADERLOAD_OPEN;
 8004c20:	2305      	movs	r3, #5
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
  hsrtia_cal.HsTiaCfg.HstiaDeRtia = HSTIADERTIA_TODE;
 8004c24:	230a      	movs	r3, #10
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
  hsrtia_cal.HsTiaCfg.HstiaRtiaSel = AppBIACfg.HstiaRtiaSel;
 8004c28:	4b27      	ldr	r3, [pc, #156]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	61bb      	str	r3, [r7, #24]
  hsrtia_cal.SysClkFreq = AppBIACfg.SysClkFreq;
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60fb      	str	r3, [r7, #12]
  hsrtia_cal.fFreq = AppBIACfg.SweepCfg.SweepStart;
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c38:	607b      	str	r3, [r7, #4]

  if(AppBIACfg.SweepCfg.SweepEn == bTRUE)
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c3c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d134      	bne.n	8004cae <AppBIARtiaCal+0xda>
  {
    uint32_t i;
    AppBIACfg.SweepCfg.SweepIndex = 0;  /* Reset index */
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
    for(i=0;i<AppBIACfg.SweepCfg.SweepPoints;i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4e:	e011      	b.n	8004c74 <AppBIARtiaCal+0xa0>
    {
			AD5940_HSRtiaCal(&hsrtia_cal, AppBIACfg.RtiaCalTable[i]);
 8004c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c52:	3312      	adds	r3, #18
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c58:	441a      	add	r2, r3
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fedc 	bl	8003a1c <AD5940_HSRtiaCal>
#ifdef ADI_DEBUG
      ADI_Print("Freq:%.2f, RTIA: Mag:%f Ohm, Phase:%.3f\n", hsrtia_cal.fFreq, AppBIACfg.RtiaCalTable[i][0], AppBIACfg.RtiaCalTable[i][1]);
#endif
      AD5940_SweepNext(&AppBIACfg.SweepCfg, &hsrtia_cal.fFreq);
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4818      	ldr	r0, [pc, #96]	; (8004ccc <AppBIARtiaCal+0xf8>)
 8004c6a:	f7fd f8a1 	bl	8001db0 <AD5940_SweepNext>
    for(i=0;i<AppBIACfg.SweepCfg.SweepPoints;i++)
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	3301      	adds	r3, #1
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c74:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3e8      	bcc.n	8004c50 <AppBIARtiaCal+0x7c>
    }
    AppBIACfg.SweepCfg.SweepIndex = 0;  /* Reset index */
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	67da      	str	r2, [r3, #124]	; 0x7c
    AppBIACfg.RtiaCurrValue[0] = AppBIACfg.RtiaCalTable[AppBIACfg.SweepCfg.SweepIndex][0];
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c88:	4a0f      	ldr	r2, [pc, #60]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c8a:	3312      	adds	r3, #18
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    AppBIACfg.RtiaCurrValue[1] = AppBIACfg.RtiaCalTable[AppBIACfg.SweepCfg.SweepIndex][1];
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3394      	adds	r3, #148	; 0x94
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a08      	ldr	r2, [pc, #32]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004ca8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cac:	e007      	b.n	8004cbe <AppBIARtiaCal+0xea>

  }
  else
  {
    hsrtia_cal.fFreq = AppBIACfg.SinFreq;
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <AppBIARtiaCal+0xf4>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	607b      	str	r3, [r7, #4]
    AD5940_HSRtiaCal(&hsrtia_cal, AppBIACfg.RtiaCurrValue);
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	4906      	ldr	r1, [pc, #24]	; (8004cd0 <AppBIARtiaCal+0xfc>)
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe feaf 	bl	8003a1c <AD5940_HSRtiaCal>
  }
  return AD5940ERR_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3750      	adds	r7, #80	; 0x50
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000068 	.word	0x20000068
 8004cd0:	20000088 	.word	0x20000088

08004cd4 <AppBIAInit>:

/* This function provide application initialize.   */
AD5940Err AppBIAInit(uint32_t *pBuffer, uint32_t BufferSize)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08c      	sub	sp, #48	; 0x30
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  AD5940Err error = AD5940ERR_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  SEQCfg_Type seq_cfg;
  FIFOCfg_Type fifo_cfg;

  if(AD5940_WakeUp(10) > 10)  /* Wakeup AFE by read register, read 10 times at most */
 8004ce2:	200a      	movs	r0, #10
 8004ce4:	f7fe fe66 	bl	80039b4 <AD5940_WakeUp>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b0a      	cmp	r3, #10
 8004cec:	d902      	bls.n	8004cf4 <AppBIAInit+0x20>
    return AD5940ERR_WAKEUP;  /* Wakeup Failed */
 8004cee:	f06f 0308 	mvn.w	r3, #8
 8004cf2:	e0a5      	b.n	8004e40 <AppBIAInit+0x16c>

  /* Configure sequencer and stop it */
  seq_cfg.SeqMemSize = SEQMEMSIZE_2KB;  /* 2kB SRAM is used for sequencer, others for data FIFO */
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	623b      	str	r3, [r7, #32]
  seq_cfg.SeqBreakEn = bFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  seq_cfg.SeqIgnoreEn = bFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  seq_cfg.SeqCntCRCClr = bTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  seq_cfg.SeqEnable = bFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  seq_cfg.SeqWrTimer = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
  AD5940_SEQCfg(&seq_cfg);
 8004d14:	f107 0320 	add.w	r3, r7, #32
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fe fa4e 	bl	80031ba <AD5940_SEQCfg>

  /* Do RTIA calibration */

  if((AppBIACfg.ReDoRtiaCal == bTRUE) || \
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <AppBIAInit+0x174>)
 8004d20:	7d1b      	ldrb	r3, [r3, #20]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d004      	beq.n	8004d30 <AppBIAInit+0x5c>
      AppBIACfg.BIAInited == bFALSE)  /* Do calibration on the first initializaion */
 8004d26:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <AppBIAInit+0x174>)
 8004d28:	f893 33b4 	ldrb.w	r3, [r3, #948]	; 0x3b4
  if((AppBIACfg.ReDoRtiaCal == bTRUE) || \
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <AppBIAInit+0x66>
  {
    AppBIARtiaCal();
 8004d30:	f7ff ff50 	bl	8004bd4 <AppBIARtiaCal>
    AppBIACfg.ReDoRtiaCal = bFALSE;
 8004d34:	4b44      	ldr	r3, [pc, #272]	; (8004e48 <AppBIAInit+0x174>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	751a      	strb	r2, [r3, #20]
  }
  /* Reconfigure FIFO */
  AD5940_FIFOCtrlS(FIFOSRC_DFT, bFALSE);									/* Disable FIFO firstly */
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2002      	movs	r0, #2
 8004d3e:	f7fe fa15 	bl	800316c <AD5940_FIFOCtrlS>
  fifo_cfg.FIFOEn = bTRUE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	733b      	strb	r3, [r7, #12]
  fifo_cfg.FIFOMode = FIFOMODE_FIFO;
 8004d46:	2302      	movs	r3, #2
 8004d48:	613b      	str	r3, [r7, #16]
  fifo_cfg.FIFOSize = FIFOSIZE_4KB;                       /* 4kB for FIFO, The reset 2kB for sequencer */
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	617b      	str	r3, [r7, #20]
  fifo_cfg.FIFOSrc = FIFOSRC_DFT;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	61bb      	str	r3, [r7, #24]
  fifo_cfg.FIFOThresh = AppBIACfg.FifoThresh;              /* DFT result. One pair for RCAL, another for Rz. One DFT result have real part and imaginary part */
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <AppBIAInit+0x174>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	61fb      	str	r3, [r7, #28]
  AD5940_FIFOCfg(&fifo_cfg);
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe f9c1 	bl	80030e4 <AD5940_FIFOCfg>

  AD5940_INTCClrFlag(AFEINTSRC_ALLINT);
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	f7fe fd8b 	bl	8003880 <AD5940_INTCClrFlag>

  /* Start sequence generator */
  /* Initialize sequencer generator */
  if((AppBIACfg.BIAInited == bFALSE)||\
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <AppBIAInit+0x174>)
 8004d6c:	f893 33b4 	ldrb.w	r3, [r3, #948]	; 0x3b4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <AppBIAInit+0xa8>
       (AppBIACfg.bParaChanged == bTRUE))
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <AppBIAInit+0x174>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
  if((AppBIACfg.BIAInited == bFALSE)||\
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d122      	bne.n	8004dc2 <AppBIAInit+0xee>
  {
    if(pBuffer == 0)  return AD5940ERR_PARA;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <AppBIAInit+0xb4>
 8004d82:	f06f 0301 	mvn.w	r3, #1
 8004d86:	e05b      	b.n	8004e40 <AppBIAInit+0x16c>
    if(BufferSize == 0) return AD5940ERR_PARA;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <AppBIAInit+0xc0>
 8004d8e:	f06f 0301 	mvn.w	r3, #1
 8004d92:	e055      	b.n	8004e40 <AppBIAInit+0x16c>
    AD5940_SEQGenInit(pBuffer, BufferSize);
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fca0 	bl	80016dc <AD5940_SEQGenInit>

    /* Generate initialize sequence */
    error = AppBIASeqCfgGen(); /* Application initialization sequence using either MCU or sequencer */
 8004d9c:	f7ff fc64 	bl	8004668 <AppBIASeqCfgGen>
 8004da0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(error != AD5940ERR_OK) return error;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <AppBIAInit+0xd8>
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	e049      	b.n	8004e40 <AppBIAInit+0x16c>

    /* Generate measurement sequence */
    error = AppBIASeqMeasureGen();
 8004dac:	f7ff fe04 	bl	80049b8 <AppBIASeqMeasureGen>
 8004db0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(error != AD5940ERR_OK) return error;
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <AppBIAInit+0xe8>
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	e041      	b.n	8004e40 <AppBIAInit+0x16c>

    AppBIACfg.bParaChanged = bFALSE; /* Clear this flag as we already implemented the new configuration */
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <AppBIAInit+0x174>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Initialization sequencer  */
  AppBIACfg.InitSeqInfo.WriteSRAM = bFALSE;
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <AppBIAInit+0x174>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4
  AD5940_SEQInfoCfg(&AppBIACfg.InitSeqInfo);
 8004dca:	4820      	ldr	r0, [pc, #128]	; (8004e4c <AppBIAInit+0x178>)
 8004dcc:	f7fe fa7e 	bl	80032cc <AD5940_SEQInfoCfg>
  seq_cfg.SeqEnable = bTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer */
 8004dd6:	f107 0320 	add.w	r3, r7, #32
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe f9ed 	bl	80031ba <AD5940_SEQCfg>
  AD5940_SEQMmrTrig(AppBIACfg.InitSeqInfo.SeqId);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <AppBIAInit+0x174>)
 8004de2:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fa38 	bl	800325c <AD5940_SEQMmrTrig>
  while(AD5940_INTCTestFlag(AFEINTC_1, AFEINTSRC_ENDSEQ) == bFALSE);
 8004dec:	bf00      	nop
 8004dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df2:	2001      	movs	r0, #1
 8004df4:	f7fe fd51 	bl	800389a <AD5940_INTCTestFlag>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f7      	beq.n	8004dee <AppBIAInit+0x11a>

  /* Measurement sequence  */
  AppBIACfg.MeasureSeqInfo.WriteSRAM = bFALSE;
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <AppBIAInit+0x174>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
  AD5940_SEQInfoCfg(&AppBIACfg.MeasureSeqInfo);
 8004e06:	4812      	ldr	r0, [pc, #72]	; (8004e50 <AppBIAInit+0x17c>)
 8004e08:	f7fe fa60 	bl	80032cc <AD5940_SEQInfoCfg>

  seq_cfg.SeqEnable = bTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  AD5940_SEQCfg(&seq_cfg);  /* Enable sequencer, and wait for trigger */
 8004e12:	f107 0320 	add.w	r3, r7, #32
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f9cf 	bl	80031ba <AD5940_SEQCfg>
  AD5940_ClrMCUIntFlag();   /* Clear interrupt flag generated before */
 8004e1c:	f7fc fa32 	bl	8001284 <AD5940_ClrMCUIntFlag>

  AD5940_AFEPwrBW(AppBIACfg.PwrMod, AFEBW_250KHZ);
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <AppBIAInit+0x174>)
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	2103      	movs	r1, #3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fc4f 	bl	80026ca <AD5940_AFEPwrBW>
  AD5940_WriteReg(REG_AFE_SWMUX, 1<<3);
 8004e2c:	2108      	movs	r1, #8
 8004e2e:	f242 305c 	movw	r0, #9052	; 0x235c
 8004e32:	f7fd fb65 	bl	8002500 <AD5940_WriteReg>
  AppBIACfg.BIAInited = bTRUE;  /* BIA application has been initialized. */
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <AppBIAInit+0x174>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
  return AD5940ERR_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	; 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000000 	.word	0x20000000
 8004e4c:	200003b8 	.word	0x200003b8
 8004e50:	200003cc 	.word	0x200003cc

08004e54 <AppBIARegModify>:

/* Modify registers when AFE wakeup */
AD5940Err AppBIARegModify(int32_t * const pData, uint32_t *pDataCount)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  if(AppBIACfg.NumOfData > 0)
 8004e5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dd15      	ble.n	8004e92 <AppBIARegModify+0x3e>
  {
    AppBIACfg.FifoDataCount += *pDataCount/4;
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e68:	f8d3 23e4 	ldr.w	r2, [r3, #996]	; 0x3e4
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e76:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
    if(AppBIACfg.FifoDataCount >= AppBIACfg.NumOfData)
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e7c:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d304      	bcc.n	8004e92 <AppBIARegModify+0x3e>
    {
      AD5940_WUPTCtrl(bFALSE);
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7fe fb79 	bl	8003580 <AD5940_WUPTCtrl>
      return AD5940ERR_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e01b      	b.n	8004eca <AppBIARegModify+0x76>
    }
  }
  if(AppBIACfg.StopRequired == bTRUE)
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <AppBIARegModify+0x80>)
 8004e94:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d104      	bne.n	8004ea6 <AppBIARegModify+0x52>
  {
    AD5940_WUPTCtrl(bFALSE);
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7fe fb6f 	bl	8003580 <AD5940_WUPTCtrl>
    return AD5940ERR_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e011      	b.n	8004eca <AppBIARegModify+0x76>
  }
  if(AppBIACfg.SweepCfg.SweepEn) /* Need to set new frequency and set power mode */
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <AppBIARegModify+0x80>)
 8004ea8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <AppBIARegModify+0x74>
  {
    AD5940_WGFreqCtrlS(AppBIACfg.SweepNextFreq, AppBIACfg.SysClkFreq);
 8004eb0:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <AppBIARegModify+0x80>)
 8004eb2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <AppBIARegModify+0x80>)
 8004eb8:	ed93 7a06 	vldr	s14, [r3, #24]
 8004ebc:	eef0 0a47 	vmov.f32	s1, s14
 8004ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec4:	f7fd fe1c 	bl	8002b00 <AD5940_WGFreqCtrlS>
  }
  return AD5940ERR_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000000 	.word	0x20000000

08004ed8 <AppBIADataProcess>:

/* Depending on the data type, do appropriate data pre-process before return back to controller */
static AD5940Err AppBIADataProcess(int32_t * const pData, uint32_t *pDataCount)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b08e      	sub	sp, #56	; 0x38
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t DataCount = *pDataCount;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t ImpResCount = DataCount/4;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	089b      	lsrs	r3, r3, #2
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24

  fImpPol_Type * const pOut = (fImpPol_Type*)pData;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	623b      	str	r3, [r7, #32]
  iImpCar_Type * pSrcData = (iImpCar_Type*)pData;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34

  *pDataCount = 0;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

  DataCount = (DataCount/4)*4;/* We expect RCAL data together with Rz data. One DFT result has two data in FIFO, real part and imaginary part.  */
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Convert DFT result to int32_t type */
  for(uint32_t i=0; i<DataCount; i++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
 8004f08:	e025      	b.n	8004f56 <AppBIADataProcess+0x7e>
  {
    pData[i] &= 0x3ffff; /* @todo option to check ECC */
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8004f20:	601a      	str	r2, [r3, #0]
    if(pData[i]&(1<<17)) /* Bit17 is sign bit */
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <AppBIADataProcess+0x78>
    {
      pData[i] |= 0xfffc0000; /* Data is 18bit in two's complement, bit17 is the sign bit */
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8004f42:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	6013      	str	r3, [r2, #0]
  for(uint32_t i=0; i<DataCount; i++)
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	3301      	adds	r3, #1
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
 8004f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3d5      	bcc.n	8004f0a <AppBIADataProcess+0x32>
    }
  }
  for(uint32_t i=0; i<ImpResCount; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f62:	e0cc      	b.n	80050fe <AppBIADataProcess+0x226>
  {
    iImpCar_Type *pDftVolt, *pDftCurr;

    pDftCurr = pSrcData++;
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f6c:	61fb      	str	r3, [r7, #28]
    pDftVolt = pSrcData++;
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f70:	f103 0208 	add.w	r2, r3, #8
 8004f74:	637a      	str	r2, [r7, #52]	; 0x34
 8004f76:	61bb      	str	r3, [r7, #24]
    float VoltMag,VoltPhase;
    float CurrMag, CurrPhase;

    VoltMag = sqrt((float)pDftVolt->Real*pDftVolt->Real+(float)pDftVolt->Image*pDftVolt->Image);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fb4:	ee17 0a90 	vmov	r0, s15
 8004fb8:	f7fb face 	bl	8000558 <__aeabi_f2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	ec43 2b10 	vmov	d0, r2, r3
 8004fc4:	f006 fa72 	bl	800b4ac <sqrt>
 8004fc8:	ec53 2b10 	vmov	r2, r3, d0
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fb fe12 	bl	8000bf8 <__aeabi_d2f>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	617b      	str	r3, [r7, #20]
    VoltPhase = atan2(-pDftVolt->Image,pDftVolt->Real);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	425b      	negs	r3, r3
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fb faa8 	bl	8000534 <__aeabi_i2d>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb faa1 	bl	8000534 <__aeabi_i2d>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	ec43 2b11 	vmov	d1, r2, r3
 8004ffa:	ec45 4b10 	vmov	d0, r4, r5
 8004ffe:	f006 f9a5 	bl	800b34c <atan2>
 8005002:	ec53 2b10 	vmov	r2, r3, d0
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	f7fb fdf5 	bl	8000bf8 <__aeabi_d2f>
 800500e:	4603      	mov	r3, r0
 8005010:	613b      	str	r3, [r7, #16]
    CurrMag = sqrt((float)pDftCurr->Real*pDftCurr->Real+(float)pDftCurr->Image*pDftCurr->Image);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800502a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800504a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504e:	ee17 0a90 	vmov	r0, s15
 8005052:	f7fb fa81 	bl	8000558 <__aeabi_f2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	ec43 2b10 	vmov	d0, r2, r3
 800505e:	f006 fa25 	bl	800b4ac <sqrt>
 8005062:	ec53 2b10 	vmov	r2, r3, d0
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	f7fb fdc5 	bl	8000bf8 <__aeabi_d2f>
 800506e:	4603      	mov	r3, r0
 8005070:	60fb      	str	r3, [r7, #12]
    CurrPhase = atan2(-pDftCurr->Image,pDftCurr->Real);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	425b      	negs	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f7fb fa5b 	bl	8000534 <__aeabi_i2d>
 800507e:	4604      	mov	r4, r0
 8005080:	460d      	mov	r5, r1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa54 	bl	8000534 <__aeabi_i2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	ec43 2b11 	vmov	d1, r2, r3
 8005094:	ec45 4b10 	vmov	d0, r4, r5
 8005098:	f006 f958 	bl	800b34c <atan2>
 800509c:	ec53 2b10 	vmov	r2, r3, d0
 80050a0:	4610      	mov	r0, r2
 80050a2:	4619      	mov	r1, r3
 80050a4:	f7fb fda8 	bl	8000bf8 <__aeabi_d2f>
 80050a8:	4603      	mov	r3, r0
 80050aa:	60bb      	str	r3, [r7, #8]

    VoltMag = VoltMag/CurrMag*AppBIACfg.RtiaCurrValue[0];
 80050ac:	edd7 6a05 	vldr	s13, [r7, #20]
 80050b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80050b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b8:	4b2c      	ldr	r3, [pc, #176]	; (800516c <AppBIADataProcess+0x294>)
 80050ba:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a05 	vstr	s15, [r7, #20]
    VoltPhase = VoltPhase - CurrPhase + AppBIACfg.RtiaCurrValue[1];
 80050c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80050ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80050ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80050d2:	4b26      	ldr	r3, [pc, #152]	; (800516c <AppBIADataProcess+0x294>)
 80050d4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80050d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050dc:	edc7 7a04 	vstr	s15, [r7, #16]

    pOut[i].Magnitude = VoltMag;
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	4413      	add	r3, r2
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	601a      	str	r2, [r3, #0]
    pOut[i].Phase = VoltPhase;
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	4413      	add	r3, r2
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]
  for(uint32_t i=0; i<ImpResCount; i++)
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	3301      	adds	r3, #1
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	429a      	cmp	r2, r3
 8005104:	f4ff af2e 	bcc.w	8004f64 <AppBIADataProcess+0x8c>
  }
  *pDataCount = ImpResCount;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	601a      	str	r2, [r3, #0]
  /* Calculate next frequency point */
  if(AppBIACfg.SweepCfg.SweepEn == bTRUE)
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <AppBIADataProcess+0x294>)
 8005110:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005114:	2b01      	cmp	r3, #1
 8005116:	d123      	bne.n	8005160 <AppBIADataProcess+0x288>
  {
    AppBIACfg.FreqofData = AppBIACfg.SweepCurrFreq;
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <AppBIADataProcess+0x294>)
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511e:	4a13      	ldr	r2, [pc, #76]	; (800516c <AppBIADataProcess+0x294>)
 8005120:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    AppBIACfg.SweepCurrFreq = AppBIACfg.SweepNextFreq;
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <AppBIADataProcess+0x294>)
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	4a10      	ldr	r2, [pc, #64]	; (800516c <AppBIADataProcess+0x294>)
 800512c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		AppBIACfg.RtiaCurrValue[0] = AppBIACfg.RtiaCalTable[AppBIACfg.SweepCfg.SweepIndex][0];
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <AppBIADataProcess+0x294>)
 8005132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <AppBIADataProcess+0x294>)
 8005136:	3312      	adds	r3, #18
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a0b      	ldr	r2, [pc, #44]	; (800516c <AppBIADataProcess+0x294>)
 8005140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    AppBIACfg.RtiaCurrValue[1] = AppBIACfg.RtiaCalTable[AppBIACfg.SweepCfg.SweepIndex][1];
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <AppBIADataProcess+0x294>)
 8005146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <AppBIADataProcess+0x294>)
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	3394      	adds	r3, #148	; 0x94
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a06      	ldr	r2, [pc, #24]	; (800516c <AppBIADataProcess+0x294>)
 8005154:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    AD5940_SweepNext(&AppBIACfg.SweepCfg, &AppBIACfg.SweepNextFreq);
 8005158:	4905      	ldr	r1, [pc, #20]	; (8005170 <AppBIADataProcess+0x298>)
 800515a:	4806      	ldr	r0, [pc, #24]	; (8005174 <AppBIADataProcess+0x29c>)
 800515c:	f7fc fe28 	bl	8001db0 <AD5940_SweepNext>
  }
  return AD5940ERR_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3738      	adds	r7, #56	; 0x38
 8005166:	46bd      	mov	sp, r7
 8005168:	bdb0      	pop	{r4, r5, r7, pc}
 800516a:	bf00      	nop
 800516c:	20000000 	.word	0x20000000
 8005170:	20000084 	.word	0x20000084
 8005174:	20000068 	.word	0x20000068

08005178 <AppBIAISR>:

/**
*/
AD5940Err AppBIAISR(void *pBuff, uint32_t *pCount)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t BuffCount;
  uint32_t FifoCnt;
  BuffCount = *pCount;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
  if(AppBIACfg.BIAInited == bFALSE)
 8005188:	4b23      	ldr	r3, [pc, #140]	; (8005218 <AppBIAISR+0xa0>)
 800518a:	f893 33b4 	ldrb.w	r3, [r3, #948]	; 0x3b4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <AppBIAISR+0x20>
    return AD5940ERR_APPERROR;
 8005192:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005196:	e03a      	b.n	800520e <AppBIAISR+0x96>
  if(AD5940_WakeUp(10) > 10)  /* Wakeup AFE by read register, read 10 times at most */
 8005198:	200a      	movs	r0, #10
 800519a:	f7fe fc0b 	bl	80039b4 <AD5940_WakeUp>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b0a      	cmp	r3, #10
 80051a2:	d902      	bls.n	80051aa <AppBIAISR+0x32>
    return AD5940ERR_WAKEUP;  /* Wakeup Failed */
 80051a4:	f06f 0308 	mvn.w	r3, #8
 80051a8:	e031      	b.n	800520e <AppBIAISR+0x96>
  AD5940_SleepKeyCtrlS(SLPKEY_LOCK);  /* Don't enter hibernate */
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7fe fbe7 	bl	800397e <AD5940_SleepKeyCtrlS>
  *pCount = 0;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

  if(AD5940_INTCTestFlag(AFEINTC_0, AFEINTSRC_DATAFIFOTHRESH) == bTRUE)
 80051b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7fe fb6d 	bl	800389a <AD5940_INTCTestFlag>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d122      	bne.n	800520c <AppBIAISR+0x94>
  {
    /* Now there should be 4 data in FIFO */
    FifoCnt = (AD5940_FIFOGetCnt()/4)*4;
 80051c6:	f7fd ffee 	bl	80031a6 <AD5940_FIFOGetCnt>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	60bb      	str	r3, [r7, #8]

    if(FifoCnt > BuffCount)
    {
      ///@todo buffer is limited.
    }
    AD5940_FIFORd((uint32_t *)pBuff, FifoCnt);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd f920 	bl	800241c <AD5940_FIFORd>
    AD5940_INTCClrFlag(AFEINTSRC_DATAFIFOTHRESH);
 80051dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80051e0:	f7fe fb4e 	bl	8003880 <AD5940_INTCClrFlag>
    AppBIARegModify(pBuff, &FifoCnt);   /* If there is need to do AFE re-configure, do it here when AFE is in active state */
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fe32 	bl	8004e54 <AppBIARegModify>
    //AD5940_EnterSleepS();  /* Manually put AFE back to hibernate mode. */
    AD5940_SleepKeyCtrlS(SLPKEY_UNLOCK);  /* Allow AFE to enter hibernate mode */
 80051f0:	480a      	ldr	r0, [pc, #40]	; (800521c <AppBIAISR+0xa4>)
 80051f2:	f7fe fbc4 	bl	800397e <AD5940_SleepKeyCtrlS>
    /* Process data */
    AppBIADataProcess((int32_t*)pBuff,&FifoCnt);
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fe6b 	bl	8004ed8 <AppBIADataProcess>
    *pCount = FifoCnt;
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	601a      	str	r2, [r3, #0]
    return 0;
 8005208:	2300      	movs	r3, #0
 800520a:	e000      	b.n	800520e <AppBIAISR+0x96>
  }

  return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000000 	.word	0x20000000
 800521c:	000a47e5 	.word	0x000a47e5

08005220 <main>:

int fini = 0;


int main(void)
{
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af02      	add	r7, sp, #8
  float freq_max;		//freq max du balayage
  uint32_t nb_pt;		//nb de point durant le balayage
  long delay_mesure;	//delai entre deux mesures
  long nb_mesure;		//nb de mesure a effectuer

  HAL_Init();
 8005226:	f000 ff97 	bl	8006158 <HAL_Init>
  AD5940_MCUResourceInit(0);    /* Initialize resources that AD5940 use, like SPI/GPIO/Interrupt. */
 800522a:	2000      	movs	r0, #0
 800522c:	f7fc f838 	bl	80012a0 <AD5940_MCUResourceInit>
  MCUPlatformInit(0);
 8005230:	2000      	movs	r0, #0
 8005232:	f000 facd 	bl	80057d0 <MCUPlatformInit>
  //AD5940PlatformCfg();

  my_printf("Hello AD5940-Build Time:%s %s\r\n", FW_Date, FW_Time);
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <main+0x64>)
 8005238:	4a13      	ldr	r2, [pc, #76]	; (8005288 <main+0x68>)
 800523a:	4619      	mov	r1, r3
 800523c:	4813      	ldr	r0, [pc, #76]	; (800528c <main+0x6c>)
 800523e:	f000 fd97 	bl	8005d70 <my_printf>

  serial_reading(&delay_mesure, &nb_pt, &freq_min, &freq_max, &nb_mesure);
 8005242:	f107 0410 	add.w	r4, r7, #16
 8005246:	f107 0214 	add.w	r2, r7, #20
 800524a:	f107 010c 	add.w	r1, r7, #12
 800524e:	f107 0008 	add.w	r0, r7, #8
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4623      	mov	r3, r4
 8005258:	f000 f81e 	bl	8005298 <serial_reading>

  //HAL_UART_Receive(&UartHandle, buffer, 300,1000);
  AD5940_BIA(delay_mesure, nb_pt, freq_min, freq_max, nb_mesure);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	edd7 7a05 	vldr	s15, [r7, #20]
 8005264:	ed97 7a04 	vldr	s14, [r7, #16]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	eef0 0a47 	vmov.f32	s1, s14
 800526e:	eeb0 0a67 	vmov.f32	s0, s15
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff f86e 	bl	8004354 <AD5940_BIA>
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}
 8005282:	bf00      	nop
 8005284:	0800ce54 	.word	0x0800ce54
 8005288:	0800ce60 	.word	0x0800ce60
 800528c:	0800ce6c 	.word	0x0800ce6c

08005290 <Error_Handler>:
#define DEBUGUART_RX_AF                    GPIO_AF7_USART2




void Error_Handler(void){
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  while(1);
 8005294:	e7fe      	b.n	8005294 <Error_Handler+0x4>
	...

08005298 <serial_reading>:
  * @param freq_min: first frequency of the frequency sweep
  * @param freq_max: last frequency of the frequency sweep
  * @param nb_mesure: le nombre de mesure à effectuer
  */
void serial_reading(long *delay_mesure, uint32_t *nb_pt, float *freq_min, float *freq_max, long *nb_mesure)
{
 8005298:	b5b0      	push	{r4, r5, r7, lr}
 800529a:	b098      	sub	sp, #96	; 0x60
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
	//buffer qui accueil la tram
	uint8_t Rx_buffer[29] = {0};
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	f107 031c 	add.w	r3, r7, #28
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	605a      	str	r2, [r3, #4]
 80052b4:	609a      	str	r2, [r3, #8]
 80052b6:	60da      	str	r2, [r3, #12]
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	615a      	str	r2, [r3, #20]
 80052bc:	761a      	strb	r2, [r3, #24]

	//on cherche a avoir une trame du type <delay_mesure>;<nb_point>;<freq_min>;<freq_max>;<nb_mesure>.
	//max 9999;999;199999;200000;99999. soit 29 caracteres
	HAL_UART_Receive_DMA(&UartHandle, Rx_buffer, 29);
 80052be:	f107 0318 	add.w	r3, r7, #24
 80052c2:	221d      	movs	r2, #29
 80052c4:	4619      	mov	r1, r3
 80052c6:	48b4      	ldr	r0, [pc, #720]	; (8005598 <serial_reading+0x300>)
 80052c8:	f002 fe33 	bl	8007f32 <HAL_UART_Receive_DMA>

	//on attend que le buffer soit plein
	while(fini == 0)
 80052cc:	e003      	b.n	80052d6 <serial_reading+0x3e>
		AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
		HAL_Delay(200);
		AD5940_WriteReg(REG_AGPIO_GP0OUT, 0);//gpio1 low (led on)
		HAL_Delay(200);
		*/
		HAL_Delay(1000);
 80052ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052d2:	f000 ffb3 	bl	800623c <HAL_Delay>
	while(fini == 0)
 80052d6:	4bb1      	ldr	r3, [pc, #708]	; (800559c <serial_reading+0x304>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f7      	beq.n	80052ce <serial_reading+0x36>
	}
	//AD5940_WriteReg(REG_AGPIO_GP0OUT, AGPIO_Pin1);//gpio1 high (led off)
	//HAL_UART_Transmit(&UartHandle, Rx_buffer, 11, 1000);

	//obtention de delay_mesure
	int i = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	65fb      	str	r3, [r7, #92]	; 0x5c
	double tampon = 0;
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint8_t tab[6] = {0};
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	2300      	movs	r3, #0
 80052f4:	82bb      	strh	r3, [r7, #20]
	while( Rx_buffer[i] != ';')
 80052f6:	e00f      	b.n	8005318 <serial_reading+0x80>
	{
		tab[i] = Rx_buffer[i] - '0';
 80052f8:	f107 0218 	add.w	r2, r7, #24
 80052fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	3b30      	subs	r3, #48	; 0x30
 8005304:	b2d9      	uxtb	r1, r3
 8005306:	f107 0210 	add.w	r2, r7, #16
 800530a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530c:	4413      	add	r3, r2
 800530e:	460a      	mov	r2, r1
 8005310:	701a      	strb	r2, [r3, #0]
		i++;
 8005312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005314:	3301      	adds	r3, #1
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( Rx_buffer[i] != ';')
 8005318:	f107 0218 	add.w	r2, r7, #24
 800531c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b3b      	cmp	r3, #59	; 0x3b
 8005324:	d1e8      	bne.n	80052f8 <serial_reading+0x60>
	}
	for(int j = 0; j<i; j++)
 8005326:	2300      	movs	r3, #0
 8005328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532a:	e02a      	b.n	8005382 <serial_reading+0xea>
	{
		tampon += tab[i-(j+1)]*pow(10,j);
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	3301      	adds	r3, #1
 8005330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	3360      	adds	r3, #96	; 0x60
 8005336:	443b      	add	r3, r7
 8005338:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f8f9 	bl	8000534 <__aeabi_i2d>
 8005342:	4604      	mov	r4, r0
 8005344:	460d      	mov	r5, r1
 8005346:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005348:	f7fb f8f4 	bl	8000534 <__aeabi_i2d>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	ec43 2b11 	vmov	d1, r2, r3
 8005354:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8005590 <serial_reading+0x2f8>
 8005358:	f006 f838 	bl	800b3cc <pow>
 800535c:	ec53 2b10 	vmov	r2, r3, d0
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	f7fb f950 	bl	8000608 <__aeabi_dmul>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005370:	f7fa ff94 	bl	800029c <__adddf3>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int j = 0; j<i; j++)
 800537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537e:	3301      	adds	r3, #1
 8005380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005386:	429a      	cmp	r2, r3
 8005388:	dbd0      	blt.n	800532c <serial_reading+0x94>
	}
	*delay_mesure = (long)tampon;
 800538a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800538e:	f7fb fbeb 	bl	8000b68 <__aeabi_d2iz>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]

	//obtention de nb_pt
	//int i = 0;
	i++;
 8005398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539a:	3301      	adds	r3, #1
 800539c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int i_save = i;
 800539e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
	tampon = 0;
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	memset(tab, 0, sizeof tab);
 80053ae:	f107 0310 	add.w	r3, r7, #16
 80053b2:	2206      	movs	r2, #6
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 f90c 	bl	80095d4 <memset>
	while( Rx_buffer[i] != ';')
 80053bc:	e010      	b.n	80053e0 <serial_reading+0x148>
	{
		tab[i-i_save] = Rx_buffer[i] - '0';
 80053be:	f107 0218 	add.w	r2, r7, #24
 80053c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c4:	4413      	add	r3, r2
 80053c6:	781a      	ldrb	r2, [r3, #0]
 80053c8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80053ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053cc:	1acb      	subs	r3, r1, r3
 80053ce:	3a30      	subs	r2, #48	; 0x30
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	3360      	adds	r3, #96	; 0x60
 80053d4:	443b      	add	r3, r7
 80053d6:	f803 2c50 	strb.w	r2, [r3, #-80]
		i++;
 80053da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053dc:	3301      	adds	r3, #1
 80053de:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( Rx_buffer[i] != ';')
 80053e0:	f107 0218 	add.w	r2, r7, #24
 80053e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e6:	4413      	add	r3, r2
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b3b      	cmp	r3, #59	; 0x3b
 80053ec:	d1e7      	bne.n	80053be <serial_reading+0x126>
	}
	for(int j = i_save; j<i; j++)
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f2:	e02d      	b.n	8005450 <serial_reading+0x1b8>
	{
		tampon += tab[i-(j+1)]*pow(10,j-i_save);
 80053f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f6:	3301      	adds	r3, #1
 80053f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	3360      	adds	r3, #96	; 0x60
 80053fe:	443b      	add	r3, r7
 8005400:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8005404:	4618      	mov	r0, r3
 8005406:	f7fb f895 	bl	8000534 <__aeabi_i2d>
 800540a:	4604      	mov	r4, r0
 800540c:	460d      	mov	r5, r1
 800540e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	4618      	mov	r0, r3
 8005416:	f7fb f88d 	bl	8000534 <__aeabi_i2d>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	ec43 2b11 	vmov	d1, r2, r3
 8005422:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 8005590 <serial_reading+0x2f8>
 8005426:	f005 ffd1 	bl	800b3cc <pow>
 800542a:	ec53 2b10 	vmov	r2, r3, d0
 800542e:	4620      	mov	r0, r4
 8005430:	4629      	mov	r1, r5
 8005432:	f7fb f8e9 	bl	8000608 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800543e:	f7fa ff2d 	bl	800029c <__adddf3>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int j = i_save; j<i; j++)
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	3301      	adds	r3, #1
 800544e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005454:	429a      	cmp	r2, r3
 8005456:	dbcd      	blt.n	80053f4 <serial_reading+0x15c>
	}
	*nb_pt = (uint32_t)tampon;
 8005458:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800545c:	f7fb fbac 	bl	8000bb8 <__aeabi_d2uiz>
 8005460:	4602      	mov	r2, r0
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	601a      	str	r2, [r3, #0]

	//obtention de freq_min
	//int i = 0;
	i++;
 8005466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005468:	3301      	adds	r3, #1
 800546a:	65fb      	str	r3, [r7, #92]	; 0x5c
	i_save = i;
 800546c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
	tampon = 0;
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	memset(tab, 0, sizeof tab);
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	2206      	movs	r2, #6
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f004 f8a5 	bl	80095d4 <memset>
	while( Rx_buffer[i] != ';')
 800548a:	e010      	b.n	80054ae <serial_reading+0x216>
	{
		tab[i-i_save] = Rx_buffer[i] - '0';
 800548c:	f107 0218 	add.w	r2, r7, #24
 8005490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005492:	4413      	add	r3, r2
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	1acb      	subs	r3, r1, r3
 800549c:	3a30      	subs	r2, #48	; 0x30
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	3360      	adds	r3, #96	; 0x60
 80054a2:	443b      	add	r3, r7
 80054a4:	f803 2c50 	strb.w	r2, [r3, #-80]
		i++;
 80054a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054aa:	3301      	adds	r3, #1
 80054ac:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( Rx_buffer[i] != ';')
 80054ae:	f107 0218 	add.w	r2, r7, #24
 80054b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b4:	4413      	add	r3, r2
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b3b      	cmp	r3, #59	; 0x3b
 80054ba:	d1e7      	bne.n	800548c <serial_reading+0x1f4>
	}
	for(int j = i_save; j<i; j++)
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	647b      	str	r3, [r7, #68]	; 0x44
 80054c0:	e02d      	b.n	800551e <serial_reading+0x286>
	{
		tampon += tab[i-(j+1)]*pow(10,j-i_save);
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	3301      	adds	r3, #1
 80054c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	3360      	adds	r3, #96	; 0x60
 80054cc:	443b      	add	r3, r7
 80054ce:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb f82e 	bl	8000534 <__aeabi_i2d>
 80054d8:	4604      	mov	r4, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fb f826 	bl	8000534 <__aeabi_i2d>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	ec43 2b11 	vmov	d1, r2, r3
 80054f0:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8005590 <serial_reading+0x2f8>
 80054f4:	f005 ff6a 	bl	800b3cc <pow>
 80054f8:	ec53 2b10 	vmov	r2, r3, d0
 80054fc:	4620      	mov	r0, r4
 80054fe:	4629      	mov	r1, r5
 8005500:	f7fb f882 	bl	8000608 <__aeabi_dmul>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800550c:	f7fa fec6 	bl	800029c <__adddf3>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int j = i_save; j<i; j++)
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	3301      	adds	r3, #1
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005522:	429a      	cmp	r2, r3
 8005524:	dbcd      	blt.n	80054c2 <serial_reading+0x22a>
	}
	*freq_min = (float)tampon;
 8005526:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800552a:	f7fb fb65 	bl	8000bf8 <__aeabi_d2f>
 800552e:	4602      	mov	r2, r0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]

	//obtention de freq_max
	//int i = 0;
	i++;
 8005534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005536:	3301      	adds	r3, #1
 8005538:	65fb      	str	r3, [r7, #92]	; 0x5c
	i_save = i;
 800553a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
	tampon = 0;
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	memset(tab, 0, sizeof tab);
 800554a:	f107 0310 	add.w	r3, r7, #16
 800554e:	2206      	movs	r2, #6
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f004 f83e 	bl	80095d4 <memset>
	while( Rx_buffer[i] != ';')
 8005558:	e010      	b.n	800557c <serial_reading+0x2e4>
	{
		tab[i-i_save] = Rx_buffer[i] - '0';
 800555a:	f107 0218 	add.w	r2, r7, #24
 800555e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005560:	4413      	add	r3, r2
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	1acb      	subs	r3, r1, r3
 800556a:	3a30      	subs	r2, #48	; 0x30
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	3360      	adds	r3, #96	; 0x60
 8005570:	443b      	add	r3, r7
 8005572:	f803 2c50 	strb.w	r2, [r3, #-80]
		i++;
 8005576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005578:	3301      	adds	r3, #1
 800557a:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( Rx_buffer[i] != ';')
 800557c:	f107 0218 	add.w	r2, r7, #24
 8005580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b3b      	cmp	r3, #59	; 0x3b
 8005588:	d1e7      	bne.n	800555a <serial_reading+0x2c2>
	}
	for(int j = i_save; j<i; j++)
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	643b      	str	r3, [r7, #64]	; 0x40
 800558e:	e035      	b.n	80055fc <serial_reading+0x364>
 8005590:	00000000 	.word	0x00000000
 8005594:	40240000 	.word	0x40240000
 8005598:	20000e70 	.word	0x20000e70
 800559c:	20000f14 	.word	0x20000f14
	{
		tampon += tab[i-(j+1)]*pow(10,j-i_save);
 80055a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a2:	3301      	adds	r3, #1
 80055a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	3360      	adds	r3, #96	; 0x60
 80055aa:	443b      	add	r3, r7
 80055ac:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fa ffbf 	bl	8000534 <__aeabi_i2d>
 80055b6:	4604      	mov	r4, r0
 80055b8:	460d      	mov	r5, r1
 80055ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fa ffb7 	bl	8000534 <__aeabi_i2d>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	ec43 2b11 	vmov	d1, r2, r3
 80055ce:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 80056f8 <serial_reading+0x460>
 80055d2:	f005 fefb 	bl	800b3cc <pow>
 80055d6:	ec53 2b10 	vmov	r2, r3, d0
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fb f813 	bl	8000608 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055ea:	f7fa fe57 	bl	800029c <__adddf3>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int j = i_save; j<i; j++)
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	3301      	adds	r3, #1
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
 80055fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005600:	429a      	cmp	r2, r3
 8005602:	dbcd      	blt.n	80055a0 <serial_reading+0x308>
	}
	*freq_max = (float)tampon;
 8005604:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005608:	f7fb faf6 	bl	8000bf8 <__aeabi_d2f>
 800560c:	4602      	mov	r2, r0
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	601a      	str	r2, [r3, #0]

	//obtention de nb_mesure
	//int i = 0;
	i++;
 8005612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005614:	3301      	adds	r3, #1
 8005616:	65fb      	str	r3, [r7, #92]	; 0x5c
	i_save = i;
 8005618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
	tampon = 0;
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	memset(tab, 0, sizeof tab);
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	2206      	movs	r2, #6
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f003 ffcf 	bl	80095d4 <memset>
	while( Rx_buffer[i] != '.')
 8005636:	e010      	b.n	800565a <serial_reading+0x3c2>
	{
		tab[i-i_save] = Rx_buffer[i] - '0';
 8005638:	f107 0218 	add.w	r2, r7, #24
 800563c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563e:	4413      	add	r3, r2
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	1acb      	subs	r3, r1, r3
 8005648:	3a30      	subs	r2, #48	; 0x30
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	3360      	adds	r3, #96	; 0x60
 800564e:	443b      	add	r3, r7
 8005650:	f803 2c50 	strb.w	r2, [r3, #-80]
		i++;
 8005654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005656:	3301      	adds	r3, #1
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
	while( Rx_buffer[i] != '.')
 800565a:	f107 0218 	add.w	r2, r7, #24
 800565e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005660:	4413      	add	r3, r2
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b2e      	cmp	r3, #46	; 0x2e
 8005666:	d1e7      	bne.n	8005638 <serial_reading+0x3a0>
	}
	for(int j = i_save; j<i; j++)
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566c:	e02d      	b.n	80056ca <serial_reading+0x432>
	{
		tampon += tab[i-(j+1)]*pow(10,j-i_save);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	3301      	adds	r3, #1
 8005672:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	3360      	adds	r3, #96	; 0x60
 8005678:	443b      	add	r3, r7
 800567a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa ff58 	bl	8000534 <__aeabi_i2d>
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	4618      	mov	r0, r3
 8005690:	f7fa ff50 	bl	8000534 <__aeabi_i2d>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	ec43 2b11 	vmov	d1, r2, r3
 800569c:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80056f8 <serial_reading+0x460>
 80056a0:	f005 fe94 	bl	800b3cc <pow>
 80056a4:	ec53 2b10 	vmov	r2, r3, d0
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa ffac 	bl	8000608 <__aeabi_dmul>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056b8:	f7fa fdf0 	bl	800029c <__adddf3>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	for(int j = i_save; j<i; j++)
 80056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c6:	3301      	adds	r3, #1
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	dbcd      	blt.n	800566e <serial_reading+0x3d6>
	}
	*nb_mesure = (float)tampon;
 80056d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80056d6:	f7fb fa8f 	bl	8000bf8 <__aeabi_d2f>
 80056da:	ee07 0a90 	vmov	s15, r0
 80056de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056e2:	ee17 2a90 	vmov	r2, s15
 80056e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e8:	601a      	str	r2, [r3, #0]

}
 80056ea:	bf00      	nop
 80056ec:	3760      	adds	r7, #96	; 0x60
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	f3af 8000 	nop.w
 80056f8:	00000000 	.word	0x00000000
 80056fc:	40240000 	.word	0x40240000

08005700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b094      	sub	sp, #80	; 0x50
 8005704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005706:	f107 0320 	add.w	r3, r7, #32
 800570a:	2230      	movs	r2, #48	; 0x30
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f003 ff60 	bl	80095d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005714:	f107 030c 	add.w	r3, r7, #12
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	2300      	movs	r3, #0
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <SystemClock_Config+0xc8>)
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <SystemClock_Config+0xc8>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005732:	6413      	str	r3, [r2, #64]	; 0x40
 8005734:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <SystemClock_Config+0xc8>)
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005740:	2300      	movs	r3, #0
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	4b21      	ldr	r3, [pc, #132]	; (80057cc <SystemClock_Config+0xcc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a20      	ldr	r2, [pc, #128]	; (80057cc <SystemClock_Config+0xcc>)
 800574a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <SystemClock_Config+0xcc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800575c:	2302      	movs	r3, #2
 800575e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005760:	2301      	movs	r3, #1
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005764:	2310      	movs	r3, #16
 8005766:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005768:	2302      	movs	r3, #2
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800576c:	2300      	movs	r3, #0
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005770:	2308      	movs	r3, #8
 8005772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005774:	2364      	movs	r3, #100	; 0x64
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005778:	2302      	movs	r3, #2
 800577a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800577c:	2304      	movs	r3, #4
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005780:	f107 0320 	add.w	r3, r7, #32
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fb9d 	bl	8006ec4 <HAL_RCC_OscConfig>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005790:	f7ff fd7e 	bl	8005290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005794:	230f      	movs	r3, #15
 8005796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005798:	2302      	movs	r3, #2
 800579a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	2103      	movs	r1, #3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fdff 	bl	80073b4 <HAL_RCC_ClockConfig>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80057bc:	f7ff fd68 	bl	8005290 <Error_Handler>
  }
}
 80057c0:	bf00      	nop
 80057c2:	3750      	adds	r7, #80	; 0x50
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40007000 	.word	0x40007000

080057d0 <MCUPlatformInit>:

void MCUPlatformInit(void *pCfg)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	HAL_Init();
 80057d8:	f000 fcbe 	bl	8006158 <HAL_Init>
	SystemClock_Config();
 80057dc:	f7ff ff90 	bl	8005700 <SystemClock_Config>
	MX_DMA_Init();
 80057e0:	f000 f82a 	bl	8005838 <MX_DMA_Init>
	//HAL_Init();
	/* Init UART */
	UartHandle.Instance        = DEBUG_UART;
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <MCUPlatformInit+0x60>)
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <MCUPlatformInit+0x64>)
 80057e8:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate   = 230400;
 80057ea:	4b11      	ldr	r3, [pc, #68]	; (8005830 <MCUPlatformInit+0x60>)
 80057ec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80057f0:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <MCUPlatformInit+0x60>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <MCUPlatformInit+0x60>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80057fe:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <MCUPlatformInit+0x60>)
 8005800:	2200      	movs	r2, #0
 8005802:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <MCUPlatformInit+0x60>)
 8005806:	2200      	movs	r2, #0
 8005808:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <MCUPlatformInit+0x60>)
 800580c:	220c      	movs	r2, #12
 800580e:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <MCUPlatformInit+0x60>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8005816:	4806      	ldr	r0, [pc, #24]	; (8005830 <MCUPlatformInit+0x60>)
 8005818:	f002 faac 	bl	8007d74 <HAL_UART_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <MCUPlatformInit+0x56>
	{
	  Error_Handler();
 8005822:	f7ff fd35 	bl	8005290 <Error_Handler>
//  }
//  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
//  HAL_NVIC_EnableIRQ(DEBUG_UART_IRQN);
//	return 1;

}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000e70 	.word	0x20000e70
 8005834:	40004400 	.word	0x40004400

08005838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <MX_DMA_Init+0x3c>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <MX_DMA_Init+0x3c>)
 8005848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800584c:	6313      	str	r3, [r2, #48]	; 0x30
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <MX_DMA_Init+0x3c>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800585a:	2200      	movs	r2, #0
 800585c:	2100      	movs	r1, #0
 800585e:	2010      	movs	r0, #16
 8005860:	f000 fdeb 	bl	800643a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005864:	2010      	movs	r0, #16
 8005866:	f000 fe04 	bl	8006472 <HAL_NVIC_EnableIRQ>

}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  fini = 1;
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <HAL_UART_RxCpltCallback+0x1c>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
  //HAL_UART_Transmit(&huart2, Rx_buffer, 10, 1000);
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000f14 	.word	0x20000f14

08005898 <printchar>:
#include "stm32f4xx_hal.h"

UART_HandleTypeDef UartHandle1;

static void printchar(char **str, int c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	extern int putchar(int c);

	if (str) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <printchar+0x26>
		**str = c;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
		++(*str);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
	else
	{
		uint8_t t = c;
		HAL_UART_Transmit(&UartHandle1, &t, 1, 1000);
	}
}
 80058bc:	e00a      	b.n	80058d4 <printchar+0x3c>
		uint8_t t = c;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&UartHandle1, &t, 1, 1000);
 80058c4:	f107 010f 	add.w	r1, r7, #15
 80058c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058cc:	2201      	movs	r2, #1
 80058ce:	4803      	ldr	r0, [pc, #12]	; (80058dc <printchar+0x44>)
 80058d0:	f002 fa9d 	bl	8007e0e <HAL_UART_Transmit>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000f18 	.word	0x20000f18

080058e0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80058f0:	2400      	movs	r4, #0
 80058f2:	f04f 0820 	mov.w	r8, #32

	if (width > 0) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dd17      	ble.n	800592c <prints+0x4c>
		register int len = 0;
 80058fc:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80058fe:	68be      	ldr	r6, [r7, #8]
 8005900:	e001      	b.n	8005906 <prints+0x26>
 8005902:	3501      	adds	r5, #1
 8005904:	3601      	adds	r6, #1
 8005906:	7833      	ldrb	r3, [r6, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1fa      	bne.n	8005902 <prints+0x22>
		if (len >= width) width = 0;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	429d      	cmp	r5, r3
 8005910:	db02      	blt.n	8005918 <prints+0x38>
 8005912:	2300      	movs	r3, #0
 8005914:	607b      	str	r3, [r7, #4]
 8005916:	e002      	b.n	800591e <prints+0x3e>
		else width -= len;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1b5b      	subs	r3, r3, r5
 800591c:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <prints+0x4c>
 8005928:	f04f 0830 	mov.w	r8, #48	; 0x30
	}
	if (!(pad & PAD_RIGHT)) {
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <prints+0x84>
		for ( ; width > 0; --width) {
 8005936:	e007      	b.n	8005948 <prints+0x68>
			printchar (out, padchar);
 8005938:	4641      	mov	r1, r8
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f7ff ffac 	bl	8005898 <printchar>
			++pc;
 8005940:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3b01      	subs	r3, #1
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	dcf4      	bgt.n	8005938 <prints+0x58>
		}
	}
	for ( ; *string ; ++string) {
 800594e:	e009      	b.n	8005964 <prints+0x84>
		printchar (out, *string);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff9e 	bl	8005898 <printchar>
		++pc;
 800595c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3301      	adds	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f1      	bne.n	8005950 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 800596c:	e007      	b.n	800597e <prints+0x9e>
		printchar (out, padchar);
 800596e:	4641      	mov	r1, r8
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff91 	bl	8005898 <printchar>
		++pc;
 8005976:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3b01      	subs	r3, #1
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	dcf4      	bgt.n	800596e <prints+0x8e>
	}

	return pc;
 8005984:	4623      	mov	r3, r4
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005990 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, double value, int b, int sg, int width, int pad, int letbase)
{
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	b08d      	sub	sp, #52	; 0x34
 8005996:	af00      	add	r7, sp, #0
 8005998:	61f8      	str	r0, [r7, #28]
 800599a:	ed87 0b04 	vstr	d0, [r7, #16]
 800599e:	61b9      	str	r1, [r7, #24]
 80059a0:	60fa      	str	r2, [r7, #12]
 80059a2:	60bb      	str	r3, [r7, #8]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80059a4:	f04f 0b00 	mov.w	fp, #0
 80059a8:	f04f 0a00 	mov.w	sl, #0
	register int part_ent = value; //partie entiere
 80059ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059b0:	f7fb f8da 	bl	8000b68 <__aeabi_d2iz>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461e      	mov	r6, r3
	register int ch_sig = 1000; //les chiffres dans la partie decimal
 80059b8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
	register int part_dec = (value - part_ent)*ch_sig; //la partie decimal
 80059bc:	4630      	mov	r0, r6
 80059be:	f7fa fdb9 	bl	8000534 <__aeabi_i2d>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059ca:	f7fa fc65 	bl	8000298 <__aeabi_dsub>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	e9c7 2300 	strd	r2, r3, [r7]
 80059d6:	4648      	mov	r0, r9
 80059d8:	f7fa fdac 	bl	8000534 <__aeabi_i2d>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e4:	f7fa fe10 	bl	8000608 <__aeabi_dmul>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4610      	mov	r0, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7fb f8ba 	bl	8000b68 <__aeabi_d2iz>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4698      	mov	r8, r3



	if (value == 0) {
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a04:	f7fb f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00e      	beq.n	8005a2c <printi+0x9c>
		print_buf[0] = '0';
 8005a0e:	2330      	movs	r3, #48	; 0x30
 8005a10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		print_buf[1] = '\0';
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		return prints (out, print_buf, width, pad);
 8005a1a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	69f8      	ldr	r0, [r7, #28]
 8005a24:	f7ff ff5c 	bl	80058e0 <prints>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	e07e      	b.n	8005b2a <printi+0x19a>
	}

	if (sg && b == 10 && value < 0) {
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d01b      	beq.n	8005a6a <printi+0xda>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b0a      	cmp	r3, #10
 8005a36:	d118      	bne.n	8005a6a <printi+0xda>
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a44:	f7fb f852 	bl	8000aec <__aeabi_dcmplt>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00d      	beq.n	8005a6a <printi+0xda>
		neg = 1;
 8005a4e:	f04f 0b01 	mov.w	fp, #1
		part_ent = -value;
 8005a52:	693c      	ldr	r4, [r7, #16]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f7fb f883 	bl	8000b68 <__aeabi_d2iz>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461e      	mov	r6, r3
		part_dec = -part_dec;
 8005a66:	f1c8 0800 	rsb	r8, r8, #0
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8005a6a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8005a6e:	340b      	adds	r4, #11
	*s = '\0';
 8005a70:	2300      	movs	r3, #0
 8005a72:	7023      	strb	r3, [r4, #0]

	while (ch_sig){
 8005a74:	e017      	b.n	8005aa6 <printi+0x116>
		t = part_dec % b;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	fb98 f3f3 	sdiv	r3, r8, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	eba8 0503 	sub.w	r5, r8, r3
		if( t >= 10 )
 8005a86:	2d09      	cmp	r5, #9
 8005a88:	dd02      	ble.n	8005a90 <printi+0x100>
			t += letbase - '0' - 10;
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8c:	3b3a      	subs	r3, #58	; 0x3a
 8005a8e:	441d      	add	r5, r3
		*--s = t + '0';
 8005a90:	b2eb      	uxtb	r3, r5
 8005a92:	3c01      	subs	r4, #1
 8005a94:	3330      	adds	r3, #48	; 0x30
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	7023      	strb	r3, [r4, #0]
		part_dec /= b;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	fb98 f8f3 	sdiv	r8, r8, r3
		ch_sig /= b;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	fb99 f9f3 	sdiv	r9, r9, r3
	while (ch_sig){
 8005aa6:	f1b9 0f00 	cmp.w	r9, #0
 8005aaa:	d1e4      	bne.n	8005a76 <printi+0xe6>
	}

	*--s = '.';// ajout d'une virgule entre partie entier et decimal
 8005aac:	3c01      	subs	r4, #1
 8005aae:	232e      	movs	r3, #46	; 0x2e
 8005ab0:	7023      	strb	r3, [r4, #0]

	if(part_ent == 0){
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d117      	bne.n	8005ae6 <printi+0x156>
		*--s = '0';
 8005ab6:	3c01      	subs	r4, #1
 8005ab8:	2330      	movs	r3, #48	; 0x30
 8005aba:	7023      	strb	r3, [r4, #0]
	}

	while (part_ent) {
 8005abc:	e013      	b.n	8005ae6 <printi+0x156>
		t = part_ent % b;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	fb96 f3f3 	sdiv	r3, r6, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	fb02 f303 	mul.w	r3, r2, r3
 8005aca:	1af5      	subs	r5, r6, r3
		if( t >= 10 )
 8005acc:	2d09      	cmp	r5, #9
 8005ace:	dd02      	ble.n	8005ad6 <printi+0x146>
			t += letbase - '0' - 10;
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	3b3a      	subs	r3, #58	; 0x3a
 8005ad4:	441d      	add	r5, r3
		*--s = t + '0';
 8005ad6:	b2eb      	uxtb	r3, r5
 8005ad8:	3c01      	subs	r4, #1
 8005ada:	3330      	adds	r3, #48	; 0x30
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	7023      	strb	r3, [r4, #0]
		part_ent /= b;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	fb96 f6f3 	sdiv	r6, r6, r3
	while (part_ent) {
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	d1e9      	bne.n	8005abe <printi+0x12e>
	}



	if (neg) {
 8005aea:	f1bb 0f00 	cmp.w	fp, #0
 8005aee:	d014      	beq.n	8005b1a <printi+0x18a>
		if( width && (pad & PAD_ZERO) ) {
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <printi+0x184>
 8005af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <printi+0x184>
			printchar (out, '-');
 8005b00:	212d      	movs	r1, #45	; 0x2d
 8005b02:	69f8      	ldr	r0, [r7, #28]
 8005b04:	f7ff fec8 	bl	8005898 <printchar>
			++pc;
 8005b08:	f10a 0a01 	add.w	sl, sl, #1
			--width;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	e002      	b.n	8005b1a <printi+0x18a>
		}
		else {
			*--s = '-';
 8005b14:	3c01      	subs	r4, #1
 8005b16:	232d      	movs	r3, #45	; 0x2d
 8005b18:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8005b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4621      	mov	r1, r4
 8005b20:	69f8      	ldr	r0, [r7, #28]
 8005b22:	f7ff fedd 	bl	80058e0 <prints>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4453      	add	r3, sl
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3734      	adds	r7, #52	; 0x34
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b34 <print>:

static int print(char **out, const char *format, va_list args )
{
 8005b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b38:	b089      	sub	sp, #36	; 0x24
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8005b42:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8005b44:	e0fd      	b.n	8005d42 <print+0x20e>
		if (*format == '%') {
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b25      	cmp	r3, #37	; 0x25
 8005b4c:	f040 80ec 	bne.w	8005d28 <print+0x1f4>
			++format;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8005b56:	2500      	movs	r5, #0
 8005b58:	462e      	mov	r6, r5
			if (*format == '\0') break;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80f5 	beq.w	8005d4e <print+0x21a>
			if (*format == '%') goto out;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b25      	cmp	r3, #37	; 0x25
 8005b6a:	f000 80df 	beq.w	8005d2c <print+0x1f8>
			if (*format == '-') {
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b2d      	cmp	r3, #45	; 0x2d
 8005b74:	d109      	bne.n	8005b8a <print+0x56>
				++format;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8005b7c:	2501      	movs	r5, #1
			}
			while (*format == '0') {
 8005b7e:	e004      	b.n	8005b8a <print+0x56>
				++format;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8005b86:	f045 0502 	orr.w	r5, r5, #2
			while (*format == '0') {
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	d0f6      	beq.n	8005b80 <print+0x4c>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005b92:	e00b      	b.n	8005bac <print+0x78>
				width *= 10;
 8005b94:	4633      	mov	r3, r6
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4433      	add	r3, r6
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	461e      	mov	r6, r3
				width += *format - '0';
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	3b30      	subs	r3, #48	; 0x30
 8005ba4:	441e      	add	r6, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8005bb2:	d903      	bls.n	8005bbc <print+0x88>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b39      	cmp	r3, #57	; 0x39
 8005bba:	d9eb      	bls.n	8005b94 <print+0x60>
			}
			if( *format == 's' ) {
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b73      	cmp	r3, #115	; 0x73
 8005bc2:	d112      	bne.n	8005bea <print+0xb6>
				register char *s = (char *)va_arg( args, int );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4698      	mov	r8, r3
				pc += prints (out, s?s:"(null)", width, pad);
 8005bce:	f1b8 0f00 	cmp.w	r8, #0
 8005bd2:	d001      	beq.n	8005bd8 <print+0xa4>
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	e000      	b.n	8005bda <print+0xa6>
 8005bd8:	4964      	ldr	r1, [pc, #400]	; (8005d6c <print+0x238>)
 8005bda:	462b      	mov	r3, r5
 8005bdc:	4632      	mov	r2, r6
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff fe7e 	bl	80058e0 <prints>
 8005be4:	4603      	mov	r3, r0
 8005be6:	441c      	add	r4, r3
				continue;
 8005be8:	e0a8      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'd' ) {
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d116      	bne.n	8005c20 <print+0xec>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa fc9a 	bl	8000534 <__aeabi_i2d>
 8005c00:	4680      	mov	r8, r0
 8005c02:	4689      	mov	r9, r1
 8005c04:	2361      	movs	r3, #97	; 0x61
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	9500      	str	r5, [sp, #0]
 8005c0a:	4633      	mov	r3, r6
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	210a      	movs	r1, #10
 8005c10:	ec49 8b10 	vmov	d0, r8, r9
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff febb 	bl	8005990 <printi>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	441c      	add	r4, r3
				continue;
 8005c1e:	e08d      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'f' ) {
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b66      	cmp	r3, #102	; 0x66
 8005c26:	d118      	bne.n	8005c5a <print+0x126>
				pc += printi (out, va_arg( args, double ), 10, 1, width, pad, 'a');
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	f103 0208 	add.w	r2, r3, #8
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	ed93 7b00 	vldr	d7, [r3]
 8005c3a:	2361      	movs	r3, #97	; 0x61
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	9500      	str	r5, [sp, #0]
 8005c40:	4633      	mov	r3, r6
 8005c42:	2201      	movs	r2, #1
 8005c44:	210a      	movs	r1, #10
 8005c46:	eeb0 0a47 	vmov.f32	s0, s14
 8005c4a:	eef0 0a67 	vmov.f32	s1, s15
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe9e 	bl	8005990 <printi>
 8005c54:	4603      	mov	r3, r0
 8005c56:	441c      	add	r4, r3
				continue;
 8005c58:	e070      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'x' ) {
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b78      	cmp	r3, #120	; 0x78
 8005c60:	d116      	bne.n	8005c90 <print+0x15c>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fa fc62 	bl	8000534 <__aeabi_i2d>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4689      	mov	r9, r1
 8005c74:	2361      	movs	r3, #97	; 0x61
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	9500      	str	r5, [sp, #0]
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2110      	movs	r1, #16
 8005c80:	ec49 8b10 	vmov	d0, r8, r9
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fe83 	bl	8005990 <printi>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	441c      	add	r4, r3
				continue;
 8005c8e:	e055      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'X' ) {
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b58      	cmp	r3, #88	; 0x58
 8005c96:	d116      	bne.n	8005cc6 <print+0x192>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fa fc47 	bl	8000534 <__aeabi_i2d>
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4689      	mov	r9, r1
 8005caa:	2341      	movs	r3, #65	; 0x41
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	9500      	str	r5, [sp, #0]
 8005cb0:	4633      	mov	r3, r6
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	ec49 8b10 	vmov	d0, r8, r9
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fe68 	bl	8005990 <printi>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	441c      	add	r4, r3
				continue;
 8005cc4:	e03a      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'u' ) {
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b75      	cmp	r3, #117	; 0x75
 8005ccc:	d116      	bne.n	8005cfc <print+0x1c8>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1d1a      	adds	r2, r3, #4
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc2c 	bl	8000534 <__aeabi_i2d>
 8005cdc:	4680      	mov	r8, r0
 8005cde:	4689      	mov	r9, r1
 8005ce0:	2361      	movs	r3, #97	; 0x61
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	9500      	str	r5, [sp, #0]
 8005ce6:	4633      	mov	r3, r6
 8005ce8:	2200      	movs	r2, #0
 8005cea:	210a      	movs	r1, #10
 8005cec:	ec49 8b10 	vmov	d0, r8, r9
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fe4d 	bl	8005990 <printi>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	441c      	add	r4, r3
				continue;
 8005cfa:	e01f      	b.n	8005d3c <print+0x208>
			}
			if( *format == 'c' ) {
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b63      	cmp	r3, #99	; 0x63
 8005d02:	d11b      	bne.n	8005d3c <print+0x208>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1d1a      	adds	r2, r3, #4
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	753b      	strb	r3, [r7, #20]
				scr[1] = '\0';
 8005d10:	2300      	movs	r3, #0
 8005d12:	757b      	strb	r3, [r7, #21]
				pc += prints (out, scr, width, pad);
 8005d14:	f107 0114 	add.w	r1, r7, #20
 8005d18:	462b      	mov	r3, r5
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff fddf 	bl	80058e0 <prints>
 8005d22:	4603      	mov	r3, r0
 8005d24:	441c      	add	r4, r3
				continue;
 8005d26:	e009      	b.n	8005d3c <print+0x208>
			}
		}
		else {
		out:
 8005d28:	bf00      	nop
 8005d2a:	e000      	b.n	8005d2e <print+0x1fa>
			if (*format == '%') goto out;
 8005d2c:	bf00      	nop
			printchar (out, *format);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff fdaf 	bl	8005898 <printchar>
			++pc;
 8005d3a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f aefd 	bne.w	8005b46 <print+0x12>
 8005d4c:	e000      	b.n	8005d50 <print+0x21c>
			if (*format == '\0') break;
 8005d4e:	bf00      	nop
		}
	}
	if (out) **out = '\0';
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <print+0x22a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8005d5e:	4623      	mov	r3, r4
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d6a:	bf00      	nop
 8005d6c:	0800ce8c 	.word	0x0800ce8c

08005d70 <my_printf>:

int my_printf(const char *format, ...)
{
 8005d70:	b40f      	push	{r0, r1, r2, r3}
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8005d78:	f107 0314 	add.w	r3, r7, #20
 8005d7c:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6939      	ldr	r1, [r7, #16]
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7ff fed6 	bl	8005b34 <print>
 8005d88:	4603      	mov	r3, r0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d94:	b004      	add	sp, #16
 8005d96:	4770      	bx	lr

08005d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <HAL_MspInit+0x4c>)
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <HAL_MspInit+0x4c>)
 8005da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dac:	6453      	str	r3, [r2, #68]	; 0x44
 8005dae:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <HAL_MspInit+0x4c>)
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	603b      	str	r3, [r7, #0]
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_MspInit+0x4c>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <HAL_MspInit+0x4c>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <HAL_MspInit+0x4c>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800

08005de8 <HAL_UART_MspInit>:
//* This function configures the hardware resources used in this example
//* @param huart: UART handle pointer
//* @retval None
//*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a34      	ldr	r2, [pc, #208]	; (8005ed8 <HAL_UART_MspInit+0xf0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d162      	bne.n	8005ed0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	4b33      	ldr	r3, [pc, #204]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a32      	ldr	r2, [pc, #200]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b30      	ldr	r3, [pc, #192]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6313      	str	r3, [r2, #48]	; 0x30
 8005e36:	4b29      	ldr	r3, [pc, #164]	; (8005edc <HAL_UART_MspInit+0xf4>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e42:	230c      	movs	r3, #12
 8005e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e46:	2302      	movs	r3, #2
 8005e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e52:	2307      	movs	r3, #7
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e56:	f107 0314 	add.w	r3, r7, #20
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4820      	ldr	r0, [pc, #128]	; (8005ee0 <HAL_UART_MspInit+0xf8>)
 8005e5e:	f000 fe93 	bl	8006b88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005e62:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e64:	4a20      	ldr	r2, [pc, #128]	; (8005ee8 <HAL_UART_MspInit+0x100>)
 8005e66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e70:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e84:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e8a:	4b16      	ldr	r3, [pc, #88]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005e90:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e9e:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005ea4:	480f      	ldr	r0, [pc, #60]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005ea6:	f000 faff 	bl	80064a8 <HAL_DMA_Init>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005eb0:	f7ff f9ee 	bl	8005290 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_UART_MspInit+0xfc>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6393      	str	r3, [r2, #56]	; 0x38


    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	2026      	movs	r0, #38	; 0x26
 8005ec6:	f000 fab8 	bl	800643a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005eca:	2026      	movs	r0, #38	; 0x26
 8005ecc:	f000 fad1 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ed0:	bf00      	nop
 8005ed2:	3728      	adds	r7, #40	; 0x28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40004400 	.word	0x40004400
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40020000 	.word	0x40020000
 8005ee4:	20000eb4 	.word	0x20000eb4
 8005ee8:	40026088 	.word	0x40026088

08005eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ef0:	e7fe      	b.n	8005ef0 <NMI_Handler+0x4>

08005ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ef6:	e7fe      	b.n	8005ef6 <HardFault_Handler+0x4>

08005ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005efc:	e7fe      	b.n	8005efc <MemManage_Handler+0x4>

08005efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f02:	e7fe      	b.n	8005f02 <BusFault_Handler+0x4>

08005f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f08:	e7fe      	b.n	8005f08 <UsageFault_Handler+0x4>

08005f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f26:	b480      	push	{r7}
 8005f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f38:	f000 f960 	bl	80061fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <DMA1_Stream5_IRQHandler>:
//
///**
//  * @brief This function handles DMA1 stream5 global interrupt.
//  */
void DMA1_Stream5_IRQHandler(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005f44:	4802      	ldr	r0, [pc, #8]	; (8005f50 <DMA1_Stream5_IRQHandler+0x10>)
 8005f46:	f000 fbb5 	bl	80066b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000eb4 	.word	0x20000eb4

08005f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
	return 1;
 8005f58:	2301      	movs	r3, #1
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <_kill>:

int _kill(int pid, int sig)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f6e:	f003 fb83 	bl	8009678 <__errno>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2216      	movs	r2, #22
 8005f76:	601a      	str	r2, [r3, #0]
	return -1;
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <_exit>:

void _exit (int status)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ffe7 	bl	8005f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f96:	e7fe      	b.n	8005f96 <_exit+0x12>

08005f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e00a      	b.n	8005fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005faa:	f3af 8000 	nop.w
 8005fae:	4601      	mov	r1, r0
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	60ba      	str	r2, [r7, #8]
 8005fb6:	b2ca      	uxtb	r2, r1
 8005fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	dbf0      	blt.n	8005faa <_read+0x12>
	}

return len;
 8005fc8:	687b      	ldr	r3, [r7, #4]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e009      	b.n	8005ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	60ba      	str	r2, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	dbf1      	blt.n	8005fe4 <_write+0x12>
	}
	return len;
 8006000:	687b      	ldr	r3, [r7, #4]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <_close>:

int _close(int file)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
	return -1;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006032:	605a      	str	r2, [r3, #4]
	return 0;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <_isatty>:

int _isatty(int file)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
	return 1;
 800604a:	2301      	movs	r3, #1
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
	return 0;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <_sbrk+0x5c>)
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <_sbrk+0x60>)
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <_sbrk+0x64>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <_sbrk+0x64>)
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <_sbrk+0x68>)
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <_sbrk+0x64>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d207      	bcs.n	80060b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060a4:	f003 fae8 	bl	8009678 <__errno>
 80060a8:	4603      	mov	r3, r0
 80060aa:	220c      	movs	r2, #12
 80060ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	e009      	b.n	80060c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060b4:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <_sbrk+0x64>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <_sbrk+0x64>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <_sbrk+0x64>)
 80060c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20018000 	.word	0x20018000
 80060d4:	00000400 	.word	0x00000400
 80060d8:	20000f5c 	.word	0x20000f5c
 80060dc:	200010b0 	.word	0x200010b0

080060e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <SystemInit+0x20>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	4a05      	ldr	r2, [pc, #20]	; (8006100 <SystemInit+0x20>)
 80060ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	e000ed00 	.word	0xe000ed00

08006104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800613c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800610a:	490e      	ldr	r1, [pc, #56]	; (8006144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800610c:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800610e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006110:	e002      	b.n	8006118 <LoopCopyDataInit>

08006112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006116:	3304      	adds	r3, #4

08006118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800611a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800611c:	d3f9      	bcc.n	8006112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800611e:	4a0b      	ldr	r2, [pc, #44]	; (800614c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006120:	4c0b      	ldr	r4, [pc, #44]	; (8006150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006124:	e001      	b.n	800612a <LoopFillZerobss>

08006126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006128:	3204      	adds	r2, #4

0800612a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800612a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800612c:	d3fb      	bcc.n	8006126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800612e:	f7ff ffd7 	bl	80060e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006132:	f003 faa7 	bl	8009684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006136:	f7ff f873 	bl	8005220 <main>
  bx  lr    
 800613a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800613c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006144:	200005d8 	.word	0x200005d8
  ldr r2, =_sidata
 8006148:	0800d2d8 	.word	0x0800d2d8
  ldr r2, =_sbss
 800614c:	200005d8 	.word	0x200005d8
  ldr r4, =_ebss
 8006150:	200010b0 	.word	0x200010b0

08006154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006154:	e7fe      	b.n	8006154 <ADC_IRQHandler>
	...

08006158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_Init+0x40>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <HAL_Init+0x40>)
 8006162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_Init+0x40>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <HAL_Init+0x40>)
 800616e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006174:	4b08      	ldr	r3, [pc, #32]	; (8006198 <HAL_Init+0x40>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a07      	ldr	r2, [pc, #28]	; (8006198 <HAL_Init+0x40>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006180:	2003      	movs	r0, #3
 8006182:	f000 f94f 	bl	8006424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006186:	2000      	movs	r0, #0
 8006188:	f000 f808 	bl	800619c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800618c:	f7ff fe04 	bl	8005d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40023c00 	.word	0x40023c00

0800619c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061a4:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_InitTick+0x54>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <HAL_InitTick+0x58>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	4619      	mov	r1, r3
 80061ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 f967 	bl	800648e <HAL_SYSTICK_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e00e      	b.n	80061e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b0f      	cmp	r3, #15
 80061ce:	d80a      	bhi.n	80061e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d0:	2200      	movs	r2, #0
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	f000 f92f 	bl	800643a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061dc:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <HAL_InitTick+0x5c>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200003f0 	.word	0x200003f0
 80061f4:	200003f8 	.word	0x200003f8
 80061f8:	200003f4 	.word	0x200003f4

080061fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <HAL_IncTick+0x20>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b06      	ldr	r3, [pc, #24]	; (8006220 <HAL_IncTick+0x24>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4413      	add	r3, r2
 800620c:	4a04      	ldr	r2, [pc, #16]	; (8006220 <HAL_IncTick+0x24>)
 800620e:	6013      	str	r3, [r2, #0]
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	200003f8 	.word	0x200003f8
 8006220:	20000f60 	.word	0x20000f60

08006224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return uwTick;
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_GetTick+0x14>)
 800622a:	681b      	ldr	r3, [r3, #0]
}
 800622c:	4618      	mov	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	20000f60 	.word	0x20000f60

0800623c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006244:	f7ff ffee 	bl	8006224 <HAL_GetTick>
 8006248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d005      	beq.n	8006262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006256:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <HAL_Delay+0x44>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006262:	bf00      	nop
 8006264:	f7ff ffde 	bl	8006224 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	429a      	cmp	r2, r3
 8006272:	d8f7      	bhi.n	8006264 <HAL_Delay+0x28>
  {
  }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200003f8 	.word	0x200003f8

08006284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062a0:	4013      	ands	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062b6:	4a04      	ldr	r2, [pc, #16]	; (80062c8 <__NVIC_SetPriorityGrouping+0x44>)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	60d3      	str	r3, [r2, #12]
}
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	e000ed00 	.word	0xe000ed00

080062cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <__NVIC_GetPriorityGrouping+0x18>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	f003 0307 	and.w	r3, r3, #7
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	e000ed00 	.word	0xe000ed00

080062e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	db0b      	blt.n	8006312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	f003 021f 	and.w	r2, r3, #31
 8006300:	4907      	ldr	r1, [pc, #28]	; (8006320 <__NVIC_EnableIRQ+0x38>)
 8006302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2001      	movs	r0, #1
 800630a:	fa00 f202 	lsl.w	r2, r0, r2
 800630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	e000e100 	.word	0xe000e100

08006324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006334:	2b00      	cmp	r3, #0
 8006336:	db0a      	blt.n	800634e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	490c      	ldr	r1, [pc, #48]	; (8006370 <__NVIC_SetPriority+0x4c>)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	440b      	add	r3, r1
 8006348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800634c:	e00a      	b.n	8006364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4908      	ldr	r1, [pc, #32]	; (8006374 <__NVIC_SetPriority+0x50>)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	3b04      	subs	r3, #4
 800635c:	0112      	lsls	r2, r2, #4
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	440b      	add	r3, r1
 8006362:	761a      	strb	r2, [r3, #24]
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000e100 	.word	0xe000e100
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006378:	b480      	push	{r7}
 800637a:	b089      	sub	sp, #36	; 0x24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f1c3 0307 	rsb	r3, r3, #7
 8006392:	2b04      	cmp	r3, #4
 8006394:	bf28      	it	cs
 8006396:	2304      	movcs	r3, #4
 8006398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3304      	adds	r3, #4
 800639e:	2b06      	cmp	r3, #6
 80063a0:	d902      	bls.n	80063a8 <NVIC_EncodePriority+0x30>
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3b03      	subs	r3, #3
 80063a6:	e000      	b.n	80063aa <NVIC_EncodePriority+0x32>
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43da      	mvns	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	401a      	ands	r2, r3
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c0:	f04f 31ff 	mov.w	r1, #4294967295
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	43d9      	mvns	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d0:	4313      	orrs	r3, r2
         );
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3724      	adds	r7, #36	; 0x24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f0:	d301      	bcc.n	80063f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00f      	b.n	8006416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063f6:	4a0a      	ldr	r2, [pc, #40]	; (8006420 <SysTick_Config+0x40>)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063fe:	210f      	movs	r1, #15
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	f7ff ff8e 	bl	8006324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <SysTick_Config+0x40>)
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <SysTick_Config+0x40>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000e010 	.word	0xe000e010

08006424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ff29 	bl	8006284 <__NVIC_SetPriorityGrouping>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	4603      	mov	r3, r0
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800644c:	f7ff ff3e 	bl	80062cc <__NVIC_GetPriorityGrouping>
 8006450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f7ff ff8e 	bl	8006378 <NVIC_EncodePriority>
 800645c:	4602      	mov	r2, r0
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff5d 	bl	8006324 <__NVIC_SetPriority>
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	4603      	mov	r3, r0
 800647a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800647c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff31 	bl	80062e8 <__NVIC_EnableIRQ>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff ffa2 	bl	80063e0 <SysTick_Config>
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064b4:	f7ff feb6 	bl	8006224 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e099      	b.n	80065f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064e4:	e00f      	b.n	8006506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064e6:	f7ff fe9d 	bl	8006224 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	d908      	bls.n	8006506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2203      	movs	r2, #3
 80064fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e078      	b.n	80065f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e8      	bne.n	80064e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4b38      	ldr	r3, [pc, #224]	; (8006600 <HAL_DMA_Init+0x158>)
 8006520:	4013      	ands	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800653e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b04      	cmp	r3, #4
 800655e:	d107      	bne.n	8006570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	4313      	orrs	r3, r2
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0307 	bic.w	r3, r3, #7
 8006586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b04      	cmp	r3, #4
 8006598:	d117      	bne.n	80065ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa6f 	bl	8006a90 <DMA_CheckFifoParam>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065c6:	2301      	movs	r3, #1
 80065c8:	e016      	b.n	80065f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa26 	bl	8006a24 <DMA_CalcBaseAndBitshift>
 80065d8:	4603      	mov	r3, r0
 80065da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e0:	223f      	movs	r2, #63	; 0x3f
 80065e2:	409a      	lsls	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	f010803f 	.word	0xf010803f

08006604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_DMA_Start_IT+0x26>
 8006626:	2302      	movs	r3, #2
 8006628:	e040      	b.n	80066ac <HAL_DMA_Start_IT+0xa8>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d12f      	bne.n	800669e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f9b8 	bl	80069c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665c:	223f      	movs	r2, #63	; 0x3f
 800665e:	409a      	lsls	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0216 	orr.w	r2, r2, #22
 8006672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0208 	orr.w	r2, r2, #8
 800668a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e005      	b.n	80066aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
 80066a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066c0:	4b8e      	ldr	r3, [pc, #568]	; (80068fc <HAL_DMA_IRQHandler+0x248>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a8e      	ldr	r2, [pc, #568]	; (8006900 <HAL_DMA_IRQHandler+0x24c>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0a9b      	lsrs	r3, r3, #10
 80066cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066de:	2208      	movs	r2, #8
 80066e0:	409a      	lsls	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01a      	beq.n	8006720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d013      	beq.n	8006720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0204 	bic.w	r2, r2, #4
 8006706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	2208      	movs	r2, #8
 800670e:	409a      	lsls	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006718:	f043 0201 	orr.w	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	2201      	movs	r2, #1
 8006726:	409a      	lsls	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d012      	beq.n	8006756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00b      	beq.n	8006756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006742:	2201      	movs	r2, #1
 8006744:	409a      	lsls	r2, r3
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	f043 0202 	orr.w	r2, r3, #2
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	2204      	movs	r2, #4
 800675c:	409a      	lsls	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4013      	ands	r3, r2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d012      	beq.n	800678c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006778:	2204      	movs	r2, #4
 800677a:	409a      	lsls	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	f043 0204 	orr.w	r2, r3, #4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006790:	2210      	movs	r2, #16
 8006792:	409a      	lsls	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d043      	beq.n	8006824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d03c      	beq.n	8006824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ae:	2210      	movs	r2, #16
 80067b0:	409a      	lsls	r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d018      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d108      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d024      	beq.n	8006824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	e01f      	b.n	8006824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01b      	beq.n	8006824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
 80067f4:	e016      	b.n	8006824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0208 	bic.w	r2, r2, #8
 8006812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	2220      	movs	r2, #32
 800682a:	409a      	lsls	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4013      	ands	r3, r2
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 808f 	beq.w	8006954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8087 	beq.w	8006954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684a:	2220      	movs	r2, #32
 800684c:	409a      	lsls	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b05      	cmp	r3, #5
 800685c:	d136      	bne.n	80068cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0216 	bic.w	r2, r2, #22
 800686c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <HAL_DMA_IRQHandler+0x1da>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0208 	bic.w	r2, r2, #8
 800689c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a2:	223f      	movs	r2, #63	; 0x3f
 80068a4:	409a      	lsls	r2, r3
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d07e      	beq.n	80069c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
        }
        return;
 80068ca:	e079      	b.n	80069c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01d      	beq.n	8006916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10d      	bne.n	8006904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d031      	beq.n	8006954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
 80068f8:	e02c      	b.n	8006954 <HAL_DMA_IRQHandler+0x2a0>
 80068fa:	bf00      	nop
 80068fc:	200003f0 	.word	0x200003f0
 8006900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d023      	beq.n	8006954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
 8006914:	e01e      	b.n	8006954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10f      	bne.n	8006944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0210 	bic.w	r2, r2, #16
 8006932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	2b00      	cmp	r3, #0
 800695a:	d032      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d022      	beq.n	80069ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2205      	movs	r2, #5
 800696c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0201 	bic.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3301      	adds	r3, #1
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d307      	bcc.n	800699c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f2      	bne.n	8006980 <HAL_DMA_IRQHandler+0x2cc>
 800699a:	e000      	b.n	800699e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800699c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	e000      	b.n	80069c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80069c0:	bf00      	nop
    }
  }
}
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d108      	bne.n	8006a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a06:	e007      	b.n	8006a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	3b10      	subs	r3, #16
 8006a34:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <DMA_CalcBaseAndBitshift+0x64>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	091b      	lsrs	r3, r3, #4
 8006a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a3e:	4a13      	ldr	r2, [pc, #76]	; (8006a8c <DMA_CalcBaseAndBitshift+0x68>)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d909      	bls.n	8006a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	659a      	str	r2, [r3, #88]	; 0x58
 8006a64:	e007      	b.n	8006a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a6e:	f023 0303 	bic.w	r3, r3, #3
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	aaaaaaab 	.word	0xaaaaaaab
 8006a8c:	0800ceac 	.word	0x0800ceac

08006a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11f      	bne.n	8006aea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d856      	bhi.n	8006b5e <DMA_CheckFifoParam+0xce>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <DMA_CheckFifoParam+0x28>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006ac9 	.word	0x08006ac9
 8006abc:	08006adb 	.word	0x08006adb
 8006ac0:	08006ac9 	.word	0x08006ac9
 8006ac4:	08006b5f 	.word	0x08006b5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d046      	beq.n	8006b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ad8:	e043      	b.n	8006b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ae2:	d140      	bne.n	8006b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ae8:	e03d      	b.n	8006b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	d121      	bne.n	8006b38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d837      	bhi.n	8006b6a <DMA_CheckFifoParam+0xda>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <DMA_CheckFifoParam+0x70>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b11 	.word	0x08006b11
 8006b04:	08006b17 	.word	0x08006b17
 8006b08:	08006b11 	.word	0x08006b11
 8006b0c:	08006b29 	.word	0x08006b29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
      break;
 8006b14:	e030      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d025      	beq.n	8006b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b26:	e022      	b.n	8006b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b30:	d11f      	bne.n	8006b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b36:	e01c      	b.n	8006b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d903      	bls.n	8006b46 <DMA_CheckFifoParam+0xb6>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d003      	beq.n	8006b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006b44:	e018      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
      break;
 8006b4a:	e015      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00e      	beq.n	8006b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5c:	e00b      	b.n	8006b76 <DMA_CheckFifoParam+0xe6>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e00a      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;
 8006b62:	bf00      	nop
 8006b64:	e008      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;
 8006b66:	bf00      	nop
 8006b68:	e006      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;
 8006b6a:	bf00      	nop
 8006b6c:	e004      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;
 8006b6e:	bf00      	nop
 8006b70:	e002      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <DMA_CheckFifoParam+0xe8>
      break;
 8006b76:	bf00      	nop
    }
  } 
  
  return status; 
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop

08006b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	e159      	b.n	8006e58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	f040 8148 	bne.w	8006e52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d005      	beq.n	8006bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d130      	bne.n	8006c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	2203      	movs	r2, #3
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c10:	2201      	movs	r2, #1
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	091b      	lsrs	r3, r3, #4
 8006c26:	f003 0201 	and.w	r2, r3, #1
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d017      	beq.n	8006c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	2203      	movs	r2, #3
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d123      	bne.n	8006ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	08da      	lsrs	r2, r3, #3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3208      	adds	r2, #8
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	220f      	movs	r2, #15
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	08da      	lsrs	r2, r3, #3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3208      	adds	r2, #8
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 0203 	and.w	r2, r3, #3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a2 	beq.w	8006e52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	4b57      	ldr	r3, [pc, #348]	; (8006e70 <HAL_GPIO_Init+0x2e8>)
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	4a56      	ldr	r2, [pc, #344]	; (8006e70 <HAL_GPIO_Init+0x2e8>)
 8006d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d1e:	4b54      	ldr	r3, [pc, #336]	; (8006e70 <HAL_GPIO_Init+0x2e8>)
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d2a:	4a52      	ldr	r2, [pc, #328]	; (8006e74 <HAL_GPIO_Init+0x2ec>)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	089b      	lsrs	r3, r3, #2
 8006d30:	3302      	adds	r3, #2
 8006d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	220f      	movs	r2, #15
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a49      	ldr	r2, [pc, #292]	; (8006e78 <HAL_GPIO_Init+0x2f0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d019      	beq.n	8006d8a <HAL_GPIO_Init+0x202>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a48      	ldr	r2, [pc, #288]	; (8006e7c <HAL_GPIO_Init+0x2f4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_GPIO_Init+0x1fe>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a47      	ldr	r2, [pc, #284]	; (8006e80 <HAL_GPIO_Init+0x2f8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00d      	beq.n	8006d82 <HAL_GPIO_Init+0x1fa>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a46      	ldr	r2, [pc, #280]	; (8006e84 <HAL_GPIO_Init+0x2fc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <HAL_GPIO_Init+0x1f6>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a45      	ldr	r2, [pc, #276]	; (8006e88 <HAL_GPIO_Init+0x300>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d101      	bne.n	8006d7a <HAL_GPIO_Init+0x1f2>
 8006d76:	2304      	movs	r3, #4
 8006d78:	e008      	b.n	8006d8c <HAL_GPIO_Init+0x204>
 8006d7a:	2307      	movs	r3, #7
 8006d7c:	e006      	b.n	8006d8c <HAL_GPIO_Init+0x204>
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e004      	b.n	8006d8c <HAL_GPIO_Init+0x204>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e002      	b.n	8006d8c <HAL_GPIO_Init+0x204>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_GPIO_Init+0x204>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	f002 0203 	and.w	r2, r2, #3
 8006d92:	0092      	lsls	r2, r2, #2
 8006d94:	4093      	lsls	r3, r2
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d9c:	4935      	ldr	r1, [pc, #212]	; (8006e74 <HAL_GPIO_Init+0x2ec>)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	3302      	adds	r3, #2
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006daa:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	43db      	mvns	r3, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	4013      	ands	r3, r2
 8006db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006dce:	4a2f      	ldr	r2, [pc, #188]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4013      	ands	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	43db      	mvns	r3, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e22:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e28:	4b18      	ldr	r3, [pc, #96]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	4013      	ands	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e4c:	4a0f      	ldr	r2, [pc, #60]	; (8006e8c <HAL_GPIO_Init+0x304>)
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	f67f aea2 	bls.w	8006ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	3724      	adds	r7, #36	; 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40013800 	.word	0x40013800
 8006e78:	40020000 	.word	0x40020000
 8006e7c:	40020400 	.word	0x40020400
 8006e80:	40020800 	.word	0x40020800
 8006e84:	40020c00 	.word	0x40020c00
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	40013c00 	.word	0x40013c00

08006e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ea0:	787b      	ldrb	r3, [r7, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ea6:	887a      	ldrh	r2, [r7, #2]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006eac:	e003      	b.n	8006eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	041a      	lsls	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e267      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d075      	beq.n	8006fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ee2:	4b88      	ldr	r3, [pc, #544]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d00c      	beq.n	8006f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eee:	4b85      	ldr	r3, [pc, #532]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d112      	bne.n	8006f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006efa:	4b82      	ldr	r3, [pc, #520]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f06:	d10b      	bne.n	8006f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f08:	4b7e      	ldr	r3, [pc, #504]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d05b      	beq.n	8006fcc <HAL_RCC_OscConfig+0x108>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d157      	bne.n	8006fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e242      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d106      	bne.n	8006f38 <HAL_RCC_OscConfig+0x74>
 8006f2a:	4b76      	ldr	r3, [pc, #472]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a75      	ldr	r2, [pc, #468]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	e01d      	b.n	8006f74 <HAL_RCC_OscConfig+0xb0>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f40:	d10c      	bne.n	8006f5c <HAL_RCC_OscConfig+0x98>
 8006f42:	4b70      	ldr	r3, [pc, #448]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a6f      	ldr	r2, [pc, #444]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	4b6d      	ldr	r3, [pc, #436]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6c      	ldr	r2, [pc, #432]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e00b      	b.n	8006f74 <HAL_RCC_OscConfig+0xb0>
 8006f5c:	4b69      	ldr	r3, [pc, #420]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a68      	ldr	r2, [pc, #416]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b66      	ldr	r3, [pc, #408]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a65      	ldr	r2, [pc, #404]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7c:	f7ff f952 	bl	8006224 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f84:	f7ff f94e 	bl	8006224 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e207      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f96:	4b5b      	ldr	r3, [pc, #364]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0xc0>
 8006fa2:	e014      	b.n	8006fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa4:	f7ff f93e 	bl	8006224 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fac:	f7ff f93a 	bl	8006224 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b64      	cmp	r3, #100	; 0x64
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e1f3      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fbe:	4b51      	ldr	r3, [pc, #324]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <HAL_RCC_OscConfig+0xe8>
 8006fca:	e000      	b.n	8006fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d063      	beq.n	80070a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fda:	4b4a      	ldr	r3, [pc, #296]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 030c 	and.w	r3, r3, #12
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fe6:	4b47      	ldr	r3, [pc, #284]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fee:	2b08      	cmp	r3, #8
 8006ff0:	d11c      	bne.n	800702c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ff2:	4b44      	ldr	r3, [pc, #272]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d116      	bne.n	800702c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ffe:	4b41      	ldr	r3, [pc, #260]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_RCC_OscConfig+0x152>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e1c7      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	4937      	ldr	r1, [pc, #220]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007026:	4313      	orrs	r3, r2
 8007028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800702a:	e03a      	b.n	80070a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d020      	beq.n	8007076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007034:	4b34      	ldr	r3, [pc, #208]	; (8007108 <HAL_RCC_OscConfig+0x244>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703a:	f7ff f8f3 	bl	8006224 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007042:	f7ff f8ef 	bl	8006224 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e1a8      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007054:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007060:	4b28      	ldr	r3, [pc, #160]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	4925      	ldr	r1, [pc, #148]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]
 8007074:	e015      	b.n	80070a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <HAL_RCC_OscConfig+0x244>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707c:	f7ff f8d2 	bl	8006224 <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007084:	f7ff f8ce 	bl	8006224 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e187      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007096:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d036      	beq.n	800711c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <HAL_RCC_OscConfig+0x248>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7ff f8b2 	bl	8006224 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070c4:	f7ff f8ae 	bl	8006224 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e167      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_OscConfig+0x240>)
 80070d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0x200>
 80070e2:	e01b      	b.n	800711c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_OscConfig+0x248>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ea:	f7ff f89b 	bl	8006224 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f0:	e00e      	b.n	8007110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070f2:	f7ff f897 	bl	8006224 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d907      	bls.n	8007110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e150      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
 8007104:	40023800 	.word	0x40023800
 8007108:	42470000 	.word	0x42470000
 800710c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1ea      	bne.n	80070f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 8097 	beq.w	8007258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800712e:	4b81      	ldr	r3, [pc, #516]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10f      	bne.n	800715a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	4b7d      	ldr	r3, [pc, #500]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	4a7c      	ldr	r2, [pc, #496]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007148:	6413      	str	r3, [r2, #64]	; 0x40
 800714a:	4b7a      	ldr	r3, [pc, #488]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007152:	60bb      	str	r3, [r7, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007156:	2301      	movs	r3, #1
 8007158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800715a:	4b77      	ldr	r3, [pc, #476]	; (8007338 <HAL_RCC_OscConfig+0x474>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d118      	bne.n	8007198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007166:	4b74      	ldr	r3, [pc, #464]	; (8007338 <HAL_RCC_OscConfig+0x474>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a73      	ldr	r2, [pc, #460]	; (8007338 <HAL_RCC_OscConfig+0x474>)
 800716c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007172:	f7ff f857 	bl	8006224 <HAL_GetTick>
 8007176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007178:	e008      	b.n	800718c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800717a:	f7ff f853 	bl	8006224 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	2b02      	cmp	r3, #2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e10c      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800718c:	4b6a      	ldr	r3, [pc, #424]	; (8007338 <HAL_RCC_OscConfig+0x474>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007194:	2b00      	cmp	r3, #0
 8007196:	d0f0      	beq.n	800717a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d106      	bne.n	80071ae <HAL_RCC_OscConfig+0x2ea>
 80071a0:	4b64      	ldr	r3, [pc, #400]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	4a63      	ldr	r2, [pc, #396]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6713      	str	r3, [r2, #112]	; 0x70
 80071ac:	e01c      	b.n	80071e8 <HAL_RCC_OscConfig+0x324>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d10c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x30c>
 80071b6:	4b5f      	ldr	r3, [pc, #380]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	4a5e      	ldr	r2, [pc, #376]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071bc:	f043 0304 	orr.w	r3, r3, #4
 80071c0:	6713      	str	r3, [r2, #112]	; 0x70
 80071c2:	4b5c      	ldr	r3, [pc, #368]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	4a5b      	ldr	r2, [pc, #364]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071c8:	f043 0301 	orr.w	r3, r3, #1
 80071cc:	6713      	str	r3, [r2, #112]	; 0x70
 80071ce:	e00b      	b.n	80071e8 <HAL_RCC_OscConfig+0x324>
 80071d0:	4b58      	ldr	r3, [pc, #352]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	4a57      	ldr	r2, [pc, #348]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	6713      	str	r3, [r2, #112]	; 0x70
 80071dc:	4b55      	ldr	r3, [pc, #340]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a54      	ldr	r2, [pc, #336]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80071e2:	f023 0304 	bic.w	r3, r3, #4
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f0:	f7ff f818 	bl	8006224 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f6:	e00a      	b.n	800720e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071f8:	f7ff f814 	bl	8006224 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	f241 3288 	movw	r2, #5000	; 0x1388
 8007206:	4293      	cmp	r3, r2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e0cb      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720e:	4b49      	ldr	r3, [pc, #292]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ee      	beq.n	80071f8 <HAL_RCC_OscConfig+0x334>
 800721a:	e014      	b.n	8007246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721c:	f7ff f802 	bl	8006224 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007222:	e00a      	b.n	800723a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007224:	f7fe fffe 	bl	8006224 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e0b5      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800723a:	4b3e      	ldr	r3, [pc, #248]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1ee      	bne.n	8007224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d105      	bne.n	8007258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800724c:	4b39      	ldr	r3, [pc, #228]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	4a38      	ldr	r2, [pc, #224]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80a1 	beq.w	80073a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
 800726a:	2b08      	cmp	r3, #8
 800726c:	d05c      	beq.n	8007328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b02      	cmp	r3, #2
 8007274:	d141      	bne.n	80072fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007276:	4b31      	ldr	r3, [pc, #196]	; (800733c <HAL_RCC_OscConfig+0x478>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727c:	f7fe ffd2 	bl	8006224 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007284:	f7fe ffce 	bl	8006224 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e087      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007296:	4b27      	ldr	r3, [pc, #156]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f0      	bne.n	8007284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69da      	ldr	r2, [r3, #28]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	019b      	lsls	r3, r3, #6
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	3b01      	subs	r3, #1
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	061b      	lsls	r3, r3, #24
 80072c6:	491b      	ldr	r1, [pc, #108]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <HAL_RCC_OscConfig+0x478>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d2:	f7fe ffa7 	bl	8006224 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072da:	f7fe ffa3 	bl	8006224 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e05c      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ec:	4b11      	ldr	r3, [pc, #68]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <HAL_RCC_OscConfig+0x416>
 80072f8:	e054      	b.n	80073a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072fa:	4b10      	ldr	r3, [pc, #64]	; (800733c <HAL_RCC_OscConfig+0x478>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007300:	f7fe ff90 	bl	8006224 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007308:	f7fe ff8c 	bl	8006224 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e045      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <HAL_RCC_OscConfig+0x470>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f0      	bne.n	8007308 <HAL_RCC_OscConfig+0x444>
 8007326:	e03d      	b.n	80073a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d107      	bne.n	8007340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e038      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
 8007334:	40023800 	.word	0x40023800
 8007338:	40007000 	.word	0x40007000
 800733c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007340:	4b1b      	ldr	r3, [pc, #108]	; (80073b0 <HAL_RCC_OscConfig+0x4ec>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d028      	beq.n	80073a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d121      	bne.n	80073a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007366:	429a      	cmp	r2, r3
 8007368:	d11a      	bne.n	80073a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007378:	4293      	cmp	r3, r2
 800737a:	d111      	bne.n	80073a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	085b      	lsrs	r3, r3, #1
 8007388:	3b01      	subs	r3, #1
 800738a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800738c:	429a      	cmp	r2, r3
 800738e:	d107      	bne.n	80073a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800

080073b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0cc      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073c8:	4b68      	ldr	r3, [pc, #416]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d90c      	bls.n	80073f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d6:	4b65      	ldr	r3, [pc, #404]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b63      	ldr	r3, [pc, #396]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0b8      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d020      	beq.n	800743e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007408:	4b59      	ldr	r3, [pc, #356]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	4a58      	ldr	r2, [pc, #352]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007420:	4b53      	ldr	r3, [pc, #332]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	4a52      	ldr	r2, [pc, #328]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800742a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800742c:	4b50      	ldr	r3, [pc, #320]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	494d      	ldr	r1, [pc, #308]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 800743a:	4313      	orrs	r3, r2
 800743c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d044      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d107      	bne.n	8007462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007452:	4b47      	ldr	r3, [pc, #284]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d119      	bne.n	8007492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e07f      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d003      	beq.n	8007472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800746e:	2b03      	cmp	r3, #3
 8007470:	d107      	bne.n	8007482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007472:	4b3f      	ldr	r3, [pc, #252]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e06f      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007482:	4b3b      	ldr	r3, [pc, #236]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e067      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007492:	4b37      	ldr	r3, [pc, #220]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f023 0203 	bic.w	r2, r3, #3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4934      	ldr	r1, [pc, #208]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074a4:	f7fe febe 	bl	8006224 <HAL_GetTick>
 80074a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074aa:	e00a      	b.n	80074c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ac:	f7fe feba 	bl	8006224 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e04f      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c2:	4b2b      	ldr	r3, [pc, #172]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 020c 	and.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d1eb      	bne.n	80074ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d20c      	bcs.n	80074fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e2:	4b22      	ldr	r3, [pc, #136]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCC_ClockConfig+0x1b8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d001      	beq.n	80074fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e032      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007508:	4b19      	ldr	r3, [pc, #100]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4916      	ldr	r1, [pc, #88]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	490e      	ldr	r1, [pc, #56]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	4313      	orrs	r3, r2
 8007538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800753a:	f000 f821 	bl	8007580 <HAL_RCC_GetSysClockFreq>
 800753e:	4602      	mov	r2, r0
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	091b      	lsrs	r3, r3, #4
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	490a      	ldr	r1, [pc, #40]	; (8007574 <HAL_RCC_ClockConfig+0x1c0>)
 800754c:	5ccb      	ldrb	r3, [r1, r3]
 800754e:	fa22 f303 	lsr.w	r3, r2, r3
 8007552:	4a09      	ldr	r2, [pc, #36]	; (8007578 <HAL_RCC_ClockConfig+0x1c4>)
 8007554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <HAL_RCC_ClockConfig+0x1c8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fe1e 	bl	800619c <HAL_InitTick>

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40023c00 	.word	0x40023c00
 8007570:	40023800 	.word	0x40023800
 8007574:	0800ce94 	.word	0x0800ce94
 8007578:	200003f0 	.word	0x200003f0
 800757c:	200003f4 	.word	0x200003f4

08007580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007584:	b090      	sub	sp, #64	; 0x40
 8007586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	637b      	str	r3, [r7, #52]	; 0x34
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007590:	2300      	movs	r3, #0
 8007592:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007598:	4b59      	ldr	r3, [pc, #356]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d00d      	beq.n	80075c0 <HAL_RCC_GetSysClockFreq+0x40>
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	f200 80a1 	bhi.w	80076ec <HAL_RCC_GetSysClockFreq+0x16c>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <HAL_RCC_GetSysClockFreq+0x34>
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d003      	beq.n	80075ba <HAL_RCC_GetSysClockFreq+0x3a>
 80075b2:	e09b      	b.n	80076ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075b4:	4b53      	ldr	r3, [pc, #332]	; (8007704 <HAL_RCC_GetSysClockFreq+0x184>)
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80075b8:	e09b      	b.n	80076f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075ba:	4b53      	ldr	r3, [pc, #332]	; (8007708 <HAL_RCC_GetSysClockFreq+0x188>)
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075be:	e098      	b.n	80076f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075c0:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075ca:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d028      	beq.n	8007628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075d6:	4b4a      	ldr	r3, [pc, #296]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	099b      	lsrs	r3, r3, #6
 80075dc:	2200      	movs	r2, #0
 80075de:	623b      	str	r3, [r7, #32]
 80075e0:	627a      	str	r2, [r7, #36]	; 0x24
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075e8:	2100      	movs	r1, #0
 80075ea:	4b47      	ldr	r3, [pc, #284]	; (8007708 <HAL_RCC_GetSysClockFreq+0x188>)
 80075ec:	fb03 f201 	mul.w	r2, r3, r1
 80075f0:	2300      	movs	r3, #0
 80075f2:	fb00 f303 	mul.w	r3, r0, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	4a43      	ldr	r2, [pc, #268]	; (8007708 <HAL_RCC_GetSysClockFreq+0x188>)
 80075fa:	fba0 1202 	umull	r1, r2, r0, r2
 80075fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007600:	460a      	mov	r2, r1
 8007602:	62ba      	str	r2, [r7, #40]	; 0x28
 8007604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007606:	4413      	add	r3, r2
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760c:	2200      	movs	r2, #0
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	61fa      	str	r2, [r7, #28]
 8007612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800761a:	f7f9 fc4b 	bl	8000eb4 <__aeabi_uldivmod>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4613      	mov	r3, r2
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007626:	e053      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007628:	4b35      	ldr	r3, [pc, #212]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	099b      	lsrs	r3, r3, #6
 800762e:	2200      	movs	r2, #0
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	617a      	str	r2, [r7, #20]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800763a:	f04f 0b00 	mov.w	fp, #0
 800763e:	4652      	mov	r2, sl
 8007640:	465b      	mov	r3, fp
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f04f 0100 	mov.w	r1, #0
 800764a:	0159      	lsls	r1, r3, #5
 800764c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007650:	0150      	lsls	r0, r2, #5
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	ebb2 080a 	subs.w	r8, r2, sl
 800765a:	eb63 090b 	sbc.w	r9, r3, fp
 800765e:	f04f 0200 	mov.w	r2, #0
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800766a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800766e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007672:	ebb2 0408 	subs.w	r4, r2, r8
 8007676:	eb63 0509 	sbc.w	r5, r3, r9
 800767a:	f04f 0200 	mov.w	r2, #0
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	00eb      	lsls	r3, r5, #3
 8007684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007688:	00e2      	lsls	r2, r4, #3
 800768a:	4614      	mov	r4, r2
 800768c:	461d      	mov	r5, r3
 800768e:	eb14 030a 	adds.w	r3, r4, sl
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	eb45 030b 	adc.w	r3, r5, fp
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076a6:	4629      	mov	r1, r5
 80076a8:	028b      	lsls	r3, r1, #10
 80076aa:	4621      	mov	r1, r4
 80076ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076b0:	4621      	mov	r1, r4
 80076b2:	028a      	lsls	r2, r1, #10
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ba:	2200      	movs	r2, #0
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	60fa      	str	r2, [r7, #12]
 80076c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076c4:	f7f9 fbf6 	bl	8000eb4 <__aeabi_uldivmod>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4613      	mov	r3, r2
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <HAL_RCC_GetSysClockFreq+0x180>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	0c1b      	lsrs	r3, r3, #16
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	3301      	adds	r3, #1
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80076e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076ea:	e002      	b.n	80076f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <HAL_RCC_GetSysClockFreq+0x184>)
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3740      	adds	r7, #64	; 0x40
 80076f8:	46bd      	mov	sp, r7
 80076fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800
 8007704:	00f42400 	.word	0x00f42400
 8007708:	017d7840 	.word	0x017d7840

0800770c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <HAL_RCC_GetHCLKFreq+0x14>)
 8007712:	681b      	ldr	r3, [r3, #0]
}
 8007714:	4618      	mov	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	200003f0 	.word	0x200003f0

08007724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007728:	f7ff fff0 	bl	800770c <HAL_RCC_GetHCLKFreq>
 800772c:	4602      	mov	r2, r0
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	0a9b      	lsrs	r3, r3, #10
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	4903      	ldr	r1, [pc, #12]	; (8007748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800773a:	5ccb      	ldrb	r3, [r1, r3]
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40023800 	.word	0x40023800
 8007748:	0800cea4 	.word	0x0800cea4

0800774c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007750:	f7ff ffdc 	bl	800770c <HAL_RCC_GetHCLKFreq>
 8007754:	4602      	mov	r2, r0
 8007756:	4b05      	ldr	r3, [pc, #20]	; (800776c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	0b5b      	lsrs	r3, r3, #13
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	4903      	ldr	r1, [pc, #12]	; (8007770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007762:	5ccb      	ldrb	r3, [r1, r3]
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007768:	4618      	mov	r0, r3
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40023800 	.word	0x40023800
 8007770:	0800cea4 	.word	0x0800cea4

08007774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e07b      	b.n	800787e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	d108      	bne.n	80077a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007796:	d009      	beq.n	80077ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	61da      	str	r2, [r3, #28]
 800779e:	e005      	b.n	80077ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f85d 	bl	8007886 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	ea42 0103 	orr.w	r1, r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	0c1b      	lsrs	r3, r3, #16
 800784a:	f003 0104 	and.w	r1, r3, #4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	f003 0210 	and.w	r2, r3, #16
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800786c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b08c      	sub	sp, #48	; 0x30
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	607a      	str	r2, [r7, #4]
 80078a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078a8:	2301      	movs	r3, #1
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_SPI_TransmitReceive+0x26>
 80078bc:	2302      	movs	r3, #2
 80078be:	e18a      	b.n	8007bd6 <HAL_SPI_TransmitReceive+0x33c>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c8:	f7fe fcac 	bl	8006224 <HAL_GetTick>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078de:	887b      	ldrh	r3, [r7, #2]
 80078e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d00f      	beq.n	800790a <HAL_SPI_TransmitReceive+0x70>
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f0:	d107      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x68>
 80078fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d003      	beq.n	800790a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007902:	2302      	movs	r3, #2
 8007904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007908:	e15b      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <HAL_SPI_TransmitReceive+0x82>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_SPI_TransmitReceive+0x82>
 8007916:	887b      	ldrh	r3, [r7, #2]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007922:	e14e      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b04      	cmp	r3, #4
 800792e:	d003      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2205      	movs	r2, #5
 8007934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	887a      	ldrh	r2, [r7, #2]
 800794e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	887a      	ldrh	r2, [r7, #2]
 800795a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	887a      	ldrh	r2, [r7, #2]
 8007960:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d007      	beq.n	800798c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800798a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007994:	d178      	bne.n	8007a88 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x10a>
 800799e:	8b7b      	ldrh	r3, [r7, #26]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d166      	bne.n	8007a72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	881a      	ldrh	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	1c9a      	adds	r2, r3, #2
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c8:	e053      	b.n	8007a72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d11b      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x176>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x176>
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d113      	bne.n	8007a10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	1c9a      	adds	r2, r3, #2
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d119      	bne.n	8007a52 <HAL_SPI_TransmitReceive+0x1b8>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d014      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	b292      	uxth	r2, r2
 8007a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	1c9a      	adds	r2, r3, #2
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a52:	f7fe fbe7 	bl	8006224 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d807      	bhi.n	8007a72 <HAL_SPI_TransmitReceive+0x1d8>
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d003      	beq.n	8007a72 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a70:	e0a7      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1a6      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x130>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1a1      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x130>
 8007a86:	e07c      	b.n	8007b82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_SPI_TransmitReceive+0x1fc>
 8007a90:	8b7b      	ldrh	r3, [r7, #26]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d16b      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	7812      	ldrb	r2, [r2, #0]
 8007aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007abc:	e057      	b.n	8007b6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d11c      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x26c>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d017      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x26c>
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d114      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d119      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x2ae>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b44:	2301      	movs	r3, #1
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b48:	f7fe fb6c 	bl	8006224 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d803      	bhi.n	8007b60 <HAL_SPI_TransmitReceive+0x2c6>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5e:	d102      	bne.n	8007b66 <HAL_SPI_TransmitReceive+0x2cc>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b6c:	e029      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1a2      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x224>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d19d      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f8b2 	bl	8007cf0 <SPI_EndRxTxTransaction>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d006      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b9e:	e010      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	e000      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3730      	adds	r7, #48	; 0x30
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bf0:	f7fe fb18 	bl	8006224 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c00:	f7fe fb10 	bl	8006224 <HAL_GetTick>
 8007c04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c06:	4b39      	ldr	r3, [pc, #228]	; (8007cec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	015b      	lsls	r3, r3, #5
 8007c0c:	0d1b      	lsrs	r3, r3, #20
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	fb02 f303 	mul.w	r3, r2, r3
 8007c14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c16:	e054      	b.n	8007cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d050      	beq.n	8007cc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c20:	f7fe fb00 	bl	8006224 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d902      	bls.n	8007c36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d13d      	bne.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4e:	d111      	bne.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c58:	d004      	beq.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c62:	d107      	bne.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7c:	d10f      	bne.n	8007c9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e017      	b.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	bf0c      	ite	eq
 8007cd2:	2301      	moveq	r3, #1
 8007cd4:	2300      	movne	r3, #0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	461a      	mov	r2, r3
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d19b      	bne.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200003f0 	.word	0x200003f0

08007cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cfc:	4b1b      	ldr	r3, [pc, #108]	; (8007d6c <SPI_EndRxTxTransaction+0x7c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1b      	ldr	r2, [pc, #108]	; (8007d70 <SPI_EndRxTxTransaction+0x80>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	0d5b      	lsrs	r3, r3, #21
 8007d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d1a:	d112      	bne.n	8007d42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	2180      	movs	r1, #128	; 0x80
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff ff5a 	bl	8007be0 <SPI_WaitFlagStateUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e00f      	b.n	8007d62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d0f2      	beq.n	8007d42 <SPI_EndRxTxTransaction+0x52>
 8007d5c:	e000      	b.n	8007d60 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d5e:	bf00      	nop
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200003f0 	.word	0x200003f0
 8007d70:	165e9f81 	.word	0x165e9f81

08007d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e03f      	b.n	8007e06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fe f824 	bl	8005de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2224      	movs	r2, #36	; 0x24
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fb97 	bl	80084ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691a      	ldr	r2, [r3, #16]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695a      	ldr	r2, [r3, #20]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b08a      	sub	sp, #40	; 0x28
 8007e12:	af02      	add	r7, sp, #8
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d17c      	bne.n	8007f28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_UART_Transmit+0x2c>
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e075      	b.n	8007f2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_UART_Transmit+0x3e>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e06e      	b.n	8007f2a <HAL_UART_Transmit+0x11c>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2221      	movs	r2, #33	; 0x21
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e62:	f7fe f9df 	bl	8006224 <HAL_GetTick>
 8007e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	88fa      	ldrh	r2, [r7, #6]
 8007e72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d108      	bne.n	8007e90 <HAL_UART_Transmit+0x82>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d104      	bne.n	8007e90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e003      	b.n	8007e98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ea0:	e02a      	b.n	8007ef8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2180      	movs	r1, #128	; 0x80
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f988 	bl	80081c2 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e036      	b.n	8007f2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	e007      	b.n	8007eea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1cf      	bne.n	8007ea2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2140      	movs	r1, #64	; 0x40
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f958 	bl	80081c2 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e006      	b.n	8007f2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e000      	b.n	8007f2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d11d      	bne.n	8007f88 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Receive_DMA+0x26>
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e016      	b.n	8007f8a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Receive_DMA+0x38>
 8007f66:	2302      	movs	r3, #2
 8007f68:	e00f      	b.n	8007f8a <HAL_UART_Receive_DMA+0x58>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f98e 	bl	80082a0 <UART_Start_Receive_DMA>
 8007f84:	4603      	mov	r3, r0
 8007f86:	e000      	b.n	8007f8a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
  }
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b083      	sub	sp, #12
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b09c      	sub	sp, #112	; 0x70
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d172      	bne.n	80080d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800800a:	66bb      	str	r3, [r7, #104]	; 0x68
 800800c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008014:	65ba      	str	r2, [r7, #88]	; 0x58
 8008016:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800801a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3314      	adds	r3, #20
 800802e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	667b      	str	r3, [r7, #100]	; 0x64
 8008040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3314      	adds	r3, #20
 8008046:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008048:	647a      	str	r2, [r7, #68]	; 0x44
 800804a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800804e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e5      	bne.n	8008028 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3314      	adds	r3, #20
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	623b      	str	r3, [r7, #32]
   return(result);
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008072:	663b      	str	r3, [r7, #96]	; 0x60
 8008074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3314      	adds	r3, #20
 800807a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800807c:	633a      	str	r2, [r7, #48]	; 0x30
 800807e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e5      	bne.n	800805c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	2b01      	cmp	r3, #1
 800809e:	d119      	bne.n	80080d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0310 	bic.w	r3, r3, #16
 80080b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080c0:	61fa      	str	r2, [r7, #28]
 80080c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	69b9      	ldr	r1, [r7, #24]
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	617b      	str	r3, [r7, #20]
   return(result);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e5      	bne.n	80080a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d106      	bne.n	80080ea <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080e0:	4619      	mov	r1, r3
 80080e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080e4:	f7ff ff69 	bl	8007fba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080e8:	e002      	b.n	80080f0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80080ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80080ec:	f7fd fbc4 	bl	8005878 <HAL_UART_RxCpltCallback>
}
 80080f0:	bf00      	nop
 80080f2:	3770      	adds	r7, #112	; 0x70
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	2b01      	cmp	r3, #1
 800810c:	d108      	bne.n	8008120 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	b29b      	uxth	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff ff4e 	bl	8007fba <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800811e:	e002      	b.n	8008126 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff ff36 	bl	8007f92 <HAL_UART_RxHalfCpltCallback>
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b80      	cmp	r3, #128	; 0x80
 800814c:	bf0c      	ite	eq
 800814e:	2301      	moveq	r3, #1
 8008150:	2300      	movne	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b21      	cmp	r3, #33	; 0x21
 8008160:	d108      	bne.n	8008174 <UART_DMAError+0x46>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800816e:	68b8      	ldr	r0, [r7, #8]
 8008170:	f000 f930 	bl	80083d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	bf0c      	ite	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	2300      	movne	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b22      	cmp	r3, #34	; 0x22
 8008194:	d108      	bne.n	80081a8 <UART_DMAError+0x7a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80081a2:	68b8      	ldr	r0, [r7, #8]
 80081a4:	f000 f93e 	bl	8008424 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	f043 0210 	orr.w	r2, r3, #16
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081b4:	68b8      	ldr	r0, [r7, #8]
 80081b6:	f7ff fef6 	bl	8007fa6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b090      	sub	sp, #64	; 0x40
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d2:	e050      	b.n	8008276 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d04c      	beq.n	8008276 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d007      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80081e2:	f7fe f81f 	bl	8006224 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d241      	bcs.n	8008276 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	330c      	adds	r3, #12
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008212:	637a      	str	r2, [r7, #52]	; 0x34
 8008214:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821a:	e841 2300 	strex	r3, r2, [r1]
 800821e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d1e5      	bne.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3314      	adds	r3, #20
 800822c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f023 0301 	bic.w	r3, r3, #1
 800823c:	63bb      	str	r3, [r7, #56]	; 0x38
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008246:	623a      	str	r2, [r7, #32]
 8008248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	69f9      	ldr	r1, [r7, #28]
 800824c:	6a3a      	ldr	r2, [r7, #32]
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	61bb      	str	r3, [r7, #24]
   return(result);
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e5      	bne.n	8008226 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e00f      	b.n	8008296 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4013      	ands	r3, r2
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	bf0c      	ite	eq
 8008286:	2301      	moveq	r3, #1
 8008288:	2300      	movne	r3, #0
 800828a:	b2db      	uxtb	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	429a      	cmp	r2, r3
 8008292:	d09f      	beq.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3740      	adds	r7, #64	; 0x40
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b098      	sub	sp, #96	; 0x60
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	88fa      	ldrh	r2, [r7, #6]
 80082b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2222      	movs	r2, #34	; 0x22
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	4a3e      	ldr	r2, [pc, #248]	; (80083c8 <UART_Start_Receive_DMA+0x128>)
 80082ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	4a3d      	ldr	r2, [pc, #244]	; (80083cc <UART_Start_Receive_DMA+0x12c>)
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	4a3c      	ldr	r2, [pc, #240]	; (80083d0 <UART_Start_Receive_DMA+0x130>)
 80082de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	2200      	movs	r2, #0
 80082e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	f7fe f980 	bl	8006604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	330c      	adds	r3, #12
 8008328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008338:	65bb      	str	r3, [r7, #88]	; 0x58
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	330c      	adds	r3, #12
 8008340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008342:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008344:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3314      	adds	r3, #20
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	657b      	str	r3, [r7, #84]	; 0x54
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3314      	adds	r3, #20
 8008374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008376:	63ba      	str	r2, [r7, #56]	; 0x38
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800837c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e5      	bne.n	8008356 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	617b      	str	r3, [r7, #20]
   return(result);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	653b      	str	r3, [r7, #80]	; 0x50
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3314      	adds	r3, #20
 80083a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083aa:	627a      	str	r2, [r7, #36]	; 0x24
 80083ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6a39      	ldr	r1, [r7, #32]
 80083b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e5      	bne.n	800838a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3760      	adds	r7, #96	; 0x60
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	08007fd3 	.word	0x08007fd3
 80083cc:	080080f9 	.word	0x080080f9
 80083d0:	0800812f 	.word	0x0800812f

080083d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b089      	sub	sp, #36	; 0x24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	330c      	adds	r3, #12
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	61ba      	str	r2, [r7, #24]
 80083fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6979      	ldr	r1, [r7, #20]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e5      	bne.n	80083dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008418:	bf00      	nop
 800841a:	3724      	adds	r7, #36	; 0x24
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008424:	b480      	push	{r7}
 8008426:	b095      	sub	sp, #84	; 0x54
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800844c:	643a      	str	r2, [r7, #64]	; 0x40
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3314      	adds	r3, #20
 8008466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	f023 0301 	bic.w	r3, r3, #1
 8008476:	64bb      	str	r3, [r7, #72]	; 0x48
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	2b01      	cmp	r3, #1
 800849a:	d119      	bne.n	80084d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	330c      	adds	r3, #12
 80084a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f023 0310 	bic.w	r3, r3, #16
 80084b2:	647b      	str	r3, [r7, #68]	; 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084bc:	61ba      	str	r2, [r7, #24]
 80084be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6979      	ldr	r1, [r7, #20]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e5      	bne.n	800849c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084de:	bf00      	nop
 80084e0:	3754      	adds	r7, #84	; 0x54
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084f0:	b0c0      	sub	sp, #256	; 0x100
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	68d9      	ldr	r1, [r3, #12]
 800850a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	ea40 0301 	orr.w	r3, r0, r1
 8008514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	431a      	orrs	r2, r3
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	431a      	orrs	r2, r3
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	4313      	orrs	r3, r2
 8008534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008544:	f021 010c 	bic.w	r1, r1, #12
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008552:	430b      	orrs	r3, r1
 8008554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008566:	6999      	ldr	r1, [r3, #24]
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	ea40 0301 	orr.w	r3, r0, r1
 8008572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4b8f      	ldr	r3, [pc, #572]	; (80087b8 <UART_SetConfig+0x2cc>)
 800857c:	429a      	cmp	r2, r3
 800857e:	d005      	beq.n	800858c <UART_SetConfig+0xa0>
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	4b8d      	ldr	r3, [pc, #564]	; (80087bc <UART_SetConfig+0x2d0>)
 8008588:	429a      	cmp	r2, r3
 800858a:	d104      	bne.n	8008596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800858c:	f7ff f8de 	bl	800774c <HAL_RCC_GetPCLK2Freq>
 8008590:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008594:	e003      	b.n	800859e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008596:	f7ff f8c5 	bl	8007724 <HAL_RCC_GetPCLK1Freq>
 800859a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a8:	f040 810c 	bne.w	80087c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	1891      	adds	r1, r2, r2
 80085c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80085c6:	415b      	adcs	r3, r3
 80085c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085ce:	4621      	mov	r1, r4
 80085d0:	eb12 0801 	adds.w	r8, r2, r1
 80085d4:	4629      	mov	r1, r5
 80085d6:	eb43 0901 	adc.w	r9, r3, r1
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085ee:	4690      	mov	r8, r2
 80085f0:	4699      	mov	r9, r3
 80085f2:	4623      	mov	r3, r4
 80085f4:	eb18 0303 	adds.w	r3, r8, r3
 80085f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085fc:	462b      	mov	r3, r5
 80085fe:	eb49 0303 	adc.w	r3, r9, r3
 8008602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008612:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800861a:	460b      	mov	r3, r1
 800861c:	18db      	adds	r3, r3, r3
 800861e:	653b      	str	r3, [r7, #80]	; 0x50
 8008620:	4613      	mov	r3, r2
 8008622:	eb42 0303 	adc.w	r3, r2, r3
 8008626:	657b      	str	r3, [r7, #84]	; 0x54
 8008628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800862c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008630:	f7f8 fc40 	bl	8000eb4 <__aeabi_uldivmod>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4b61      	ldr	r3, [pc, #388]	; (80087c0 <UART_SetConfig+0x2d4>)
 800863a:	fba3 2302 	umull	r2, r3, r3, r2
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	011c      	lsls	r4, r3, #4
 8008642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008646:	2200      	movs	r2, #0
 8008648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800864c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	1891      	adds	r1, r2, r2
 800865a:	64b9      	str	r1, [r7, #72]	; 0x48
 800865c:	415b      	adcs	r3, r3
 800865e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008664:	4641      	mov	r1, r8
 8008666:	eb12 0a01 	adds.w	sl, r2, r1
 800866a:	4649      	mov	r1, r9
 800866c:	eb43 0b01 	adc.w	fp, r3, r1
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800867c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008684:	4692      	mov	sl, r2
 8008686:	469b      	mov	fp, r3
 8008688:	4643      	mov	r3, r8
 800868a:	eb1a 0303 	adds.w	r3, sl, r3
 800868e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008692:	464b      	mov	r3, r9
 8008694:	eb4b 0303 	adc.w	r3, fp, r3
 8008698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800869c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086b0:	460b      	mov	r3, r1
 80086b2:	18db      	adds	r3, r3, r3
 80086b4:	643b      	str	r3, [r7, #64]	; 0x40
 80086b6:	4613      	mov	r3, r2
 80086b8:	eb42 0303 	adc.w	r3, r2, r3
 80086bc:	647b      	str	r3, [r7, #68]	; 0x44
 80086be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086c6:	f7f8 fbf5 	bl	8000eb4 <__aeabi_uldivmod>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	4b3b      	ldr	r3, [pc, #236]	; (80087c0 <UART_SetConfig+0x2d4>)
 80086d2:	fba3 2301 	umull	r2, r3, r3, r1
 80086d6:	095b      	lsrs	r3, r3, #5
 80086d8:	2264      	movs	r2, #100	; 0x64
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	1acb      	subs	r3, r1, r3
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086e6:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <UART_SetConfig+0x2d4>)
 80086e8:	fba3 2302 	umull	r2, r3, r3, r2
 80086ec:	095b      	lsrs	r3, r3, #5
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086f4:	441c      	add	r4, r3
 80086f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008700:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008708:	4642      	mov	r2, r8
 800870a:	464b      	mov	r3, r9
 800870c:	1891      	adds	r1, r2, r2
 800870e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008710:	415b      	adcs	r3, r3
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008718:	4641      	mov	r1, r8
 800871a:	1851      	adds	r1, r2, r1
 800871c:	6339      	str	r1, [r7, #48]	; 0x30
 800871e:	4649      	mov	r1, r9
 8008720:	414b      	adcs	r3, r1
 8008722:	637b      	str	r3, [r7, #52]	; 0x34
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008730:	4659      	mov	r1, fp
 8008732:	00cb      	lsls	r3, r1, #3
 8008734:	4651      	mov	r1, sl
 8008736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800873a:	4651      	mov	r1, sl
 800873c:	00ca      	lsls	r2, r1, #3
 800873e:	4610      	mov	r0, r2
 8008740:	4619      	mov	r1, r3
 8008742:	4603      	mov	r3, r0
 8008744:	4642      	mov	r2, r8
 8008746:	189b      	adds	r3, r3, r2
 8008748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800874c:	464b      	mov	r3, r9
 800874e:	460a      	mov	r2, r1
 8008750:	eb42 0303 	adc.w	r3, r2, r3
 8008754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008764:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800876c:	460b      	mov	r3, r1
 800876e:	18db      	adds	r3, r3, r3
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
 8008772:	4613      	mov	r3, r2
 8008774:	eb42 0303 	adc.w	r3, r2, r3
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800877e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008782:	f7f8 fb97 	bl	8000eb4 <__aeabi_uldivmod>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <UART_SetConfig+0x2d4>)
 800878c:	fba3 1302 	umull	r1, r3, r3, r2
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	2164      	movs	r1, #100	; 0x64
 8008794:	fb01 f303 	mul.w	r3, r1, r3
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	3332      	adds	r3, #50	; 0x32
 800879e:	4a08      	ldr	r2, [pc, #32]	; (80087c0 <UART_SetConfig+0x2d4>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	f003 0207 	and.w	r2, r3, #7
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4422      	add	r2, r4
 80087b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087b4:	e106      	b.n	80089c4 <UART_SetConfig+0x4d8>
 80087b6:	bf00      	nop
 80087b8:	40011000 	.word	0x40011000
 80087bc:	40011400 	.word	0x40011400
 80087c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087d6:	4642      	mov	r2, r8
 80087d8:	464b      	mov	r3, r9
 80087da:	1891      	adds	r1, r2, r2
 80087dc:	6239      	str	r1, [r7, #32]
 80087de:	415b      	adcs	r3, r3
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
 80087e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087e6:	4641      	mov	r1, r8
 80087e8:	1854      	adds	r4, r2, r1
 80087ea:	4649      	mov	r1, r9
 80087ec:	eb43 0501 	adc.w	r5, r3, r1
 80087f0:	f04f 0200 	mov.w	r2, #0
 80087f4:	f04f 0300 	mov.w	r3, #0
 80087f8:	00eb      	lsls	r3, r5, #3
 80087fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087fe:	00e2      	lsls	r2, r4, #3
 8008800:	4614      	mov	r4, r2
 8008802:	461d      	mov	r5, r3
 8008804:	4643      	mov	r3, r8
 8008806:	18e3      	adds	r3, r4, r3
 8008808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800880c:	464b      	mov	r3, r9
 800880e:	eb45 0303 	adc.w	r3, r5, r3
 8008812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	f04f 0300 	mov.w	r3, #0
 800882e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008832:	4629      	mov	r1, r5
 8008834:	008b      	lsls	r3, r1, #2
 8008836:	4621      	mov	r1, r4
 8008838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800883c:	4621      	mov	r1, r4
 800883e:	008a      	lsls	r2, r1, #2
 8008840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008844:	f7f8 fb36 	bl	8000eb4 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4b60      	ldr	r3, [pc, #384]	; (80089d0 <UART_SetConfig+0x4e4>)
 800884e:	fba3 2302 	umull	r2, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	011c      	lsls	r4, r3, #4
 8008856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800885a:	2200      	movs	r2, #0
 800885c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	1891      	adds	r1, r2, r2
 800886e:	61b9      	str	r1, [r7, #24]
 8008870:	415b      	adcs	r3, r3
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008878:	4641      	mov	r1, r8
 800887a:	1851      	adds	r1, r2, r1
 800887c:	6139      	str	r1, [r7, #16]
 800887e:	4649      	mov	r1, r9
 8008880:	414b      	adcs	r3, r1
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008890:	4659      	mov	r1, fp
 8008892:	00cb      	lsls	r3, r1, #3
 8008894:	4651      	mov	r1, sl
 8008896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800889a:	4651      	mov	r1, sl
 800889c:	00ca      	lsls	r2, r1, #3
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	4642      	mov	r2, r8
 80088a6:	189b      	adds	r3, r3, r2
 80088a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ac:	464b      	mov	r3, r9
 80088ae:	460a      	mov	r2, r1
 80088b0:	eb42 0303 	adc.w	r3, r2, r3
 80088b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80088c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088d0:	4649      	mov	r1, r9
 80088d2:	008b      	lsls	r3, r1, #2
 80088d4:	4641      	mov	r1, r8
 80088d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088da:	4641      	mov	r1, r8
 80088dc:	008a      	lsls	r2, r1, #2
 80088de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088e2:	f7f8 fae7 	bl	8000eb4 <__aeabi_uldivmod>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	4b38      	ldr	r3, [pc, #224]	; (80089d0 <UART_SetConfig+0x4e4>)
 80088ee:	fba3 2301 	umull	r2, r3, r3, r1
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	2264      	movs	r2, #100	; 0x64
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	1acb      	subs	r3, r1, r3
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	3332      	adds	r3, #50	; 0x32
 8008900:	4a33      	ldr	r2, [pc, #204]	; (80089d0 <UART_SetConfig+0x4e4>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	095b      	lsrs	r3, r3, #5
 8008908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800890c:	441c      	add	r4, r3
 800890e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008912:	2200      	movs	r2, #0
 8008914:	673b      	str	r3, [r7, #112]	; 0x70
 8008916:	677a      	str	r2, [r7, #116]	; 0x74
 8008918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800891c:	4642      	mov	r2, r8
 800891e:	464b      	mov	r3, r9
 8008920:	1891      	adds	r1, r2, r2
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	415b      	adcs	r3, r3
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800892c:	4641      	mov	r1, r8
 800892e:	1851      	adds	r1, r2, r1
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	4649      	mov	r1, r9
 8008934:	414b      	adcs	r3, r1
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008944:	4659      	mov	r1, fp
 8008946:	00cb      	lsls	r3, r1, #3
 8008948:	4651      	mov	r1, sl
 800894a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800894e:	4651      	mov	r1, sl
 8008950:	00ca      	lsls	r2, r1, #3
 8008952:	4610      	mov	r0, r2
 8008954:	4619      	mov	r1, r3
 8008956:	4603      	mov	r3, r0
 8008958:	4642      	mov	r2, r8
 800895a:	189b      	adds	r3, r3, r2
 800895c:	66bb      	str	r3, [r7, #104]	; 0x68
 800895e:	464b      	mov	r3, r9
 8008960:	460a      	mov	r2, r1
 8008962:	eb42 0303 	adc.w	r3, r2, r3
 8008966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	663b      	str	r3, [r7, #96]	; 0x60
 8008972:	667a      	str	r2, [r7, #100]	; 0x64
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008980:	4649      	mov	r1, r9
 8008982:	008b      	lsls	r3, r1, #2
 8008984:	4641      	mov	r1, r8
 8008986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800898a:	4641      	mov	r1, r8
 800898c:	008a      	lsls	r2, r1, #2
 800898e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008992:	f7f8 fa8f 	bl	8000eb4 <__aeabi_uldivmod>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <UART_SetConfig+0x4e4>)
 800899c:	fba3 1302 	umull	r1, r3, r3, r2
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	2164      	movs	r1, #100	; 0x64
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	3332      	adds	r3, #50	; 0x32
 80089ae:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <UART_SetConfig+0x4e4>)
 80089b0:	fba2 2303 	umull	r2, r3, r2, r3
 80089b4:	095b      	lsrs	r3, r3, #5
 80089b6:	f003 020f 	and.w	r2, r3, #15
 80089ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4422      	add	r2, r4
 80089c2:	609a      	str	r2, [r3, #8]
}
 80089c4:	bf00      	nop
 80089c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089ca:	46bd      	mov	sp, r7
 80089cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089d0:	51eb851f 	.word	0x51eb851f

080089d4 <__cvt>:
 80089d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	ec55 4b10 	vmov	r4, r5, d0
 80089dc:	2d00      	cmp	r5, #0
 80089de:	460e      	mov	r6, r1
 80089e0:	4619      	mov	r1, r3
 80089e2:	462b      	mov	r3, r5
 80089e4:	bfbb      	ittet	lt
 80089e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089ea:	461d      	movlt	r5, r3
 80089ec:	2300      	movge	r3, #0
 80089ee:	232d      	movlt	r3, #45	; 0x2d
 80089f0:	700b      	strb	r3, [r1, #0]
 80089f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089f8:	4691      	mov	r9, r2
 80089fa:	f023 0820 	bic.w	r8, r3, #32
 80089fe:	bfbc      	itt	lt
 8008a00:	4622      	movlt	r2, r4
 8008a02:	4614      	movlt	r4, r2
 8008a04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a08:	d005      	beq.n	8008a16 <__cvt+0x42>
 8008a0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a0e:	d100      	bne.n	8008a12 <__cvt+0x3e>
 8008a10:	3601      	adds	r6, #1
 8008a12:	2102      	movs	r1, #2
 8008a14:	e000      	b.n	8008a18 <__cvt+0x44>
 8008a16:	2103      	movs	r1, #3
 8008a18:	ab03      	add	r3, sp, #12
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	ab02      	add	r3, sp, #8
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	ec45 4b10 	vmov	d0, r4, r5
 8008a24:	4653      	mov	r3, sl
 8008a26:	4632      	mov	r2, r6
 8008a28:	f000 ff0a 	bl	8009840 <_dtoa_r>
 8008a2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a30:	4607      	mov	r7, r0
 8008a32:	d102      	bne.n	8008a3a <__cvt+0x66>
 8008a34:	f019 0f01 	tst.w	r9, #1
 8008a38:	d022      	beq.n	8008a80 <__cvt+0xac>
 8008a3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a3e:	eb07 0906 	add.w	r9, r7, r6
 8008a42:	d110      	bne.n	8008a66 <__cvt+0x92>
 8008a44:	783b      	ldrb	r3, [r7, #0]
 8008a46:	2b30      	cmp	r3, #48	; 0x30
 8008a48:	d10a      	bne.n	8008a60 <__cvt+0x8c>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	f7f8 f841 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a56:	b918      	cbnz	r0, 8008a60 <__cvt+0x8c>
 8008a58:	f1c6 0601 	rsb	r6, r6, #1
 8008a5c:	f8ca 6000 	str.w	r6, [sl]
 8008a60:	f8da 3000 	ldr.w	r3, [sl]
 8008a64:	4499      	add	r9, r3
 8008a66:	2200      	movs	r2, #0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f8 f833 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a72:	b108      	cbz	r0, 8008a78 <__cvt+0xa4>
 8008a74:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a78:	2230      	movs	r2, #48	; 0x30
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	454b      	cmp	r3, r9
 8008a7e:	d307      	bcc.n	8008a90 <__cvt+0xbc>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a84:	1bdb      	subs	r3, r3, r7
 8008a86:	4638      	mov	r0, r7
 8008a88:	6013      	str	r3, [r2, #0]
 8008a8a:	b004      	add	sp, #16
 8008a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a90:	1c59      	adds	r1, r3, #1
 8008a92:	9103      	str	r1, [sp, #12]
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e7f0      	b.n	8008a7a <__cvt+0xa6>

08008a98 <__exponent>:
 8008a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	bfb8      	it	lt
 8008aa0:	4249      	neglt	r1, r1
 8008aa2:	f803 2b02 	strb.w	r2, [r3], #2
 8008aa6:	bfb4      	ite	lt
 8008aa8:	222d      	movlt	r2, #45	; 0x2d
 8008aaa:	222b      	movge	r2, #43	; 0x2b
 8008aac:	2909      	cmp	r1, #9
 8008aae:	7042      	strb	r2, [r0, #1]
 8008ab0:	dd2a      	ble.n	8008b08 <__exponent+0x70>
 8008ab2:	f10d 0207 	add.w	r2, sp, #7
 8008ab6:	4617      	mov	r7, r2
 8008ab8:	260a      	movs	r6, #10
 8008aba:	4694      	mov	ip, r2
 8008abc:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ac0:	fb06 1415 	mls	r4, r6, r5, r1
 8008ac4:	3430      	adds	r4, #48	; 0x30
 8008ac6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008aca:	460c      	mov	r4, r1
 8008acc:	2c63      	cmp	r4, #99	; 0x63
 8008ace:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	dcf1      	bgt.n	8008aba <__exponent+0x22>
 8008ad6:	3130      	adds	r1, #48	; 0x30
 8008ad8:	f1ac 0402 	sub.w	r4, ip, #2
 8008adc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ae0:	1c41      	adds	r1, r0, #1
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	42ba      	cmp	r2, r7
 8008ae6:	d30a      	bcc.n	8008afe <__exponent+0x66>
 8008ae8:	f10d 0209 	add.w	r2, sp, #9
 8008aec:	eba2 020c 	sub.w	r2, r2, ip
 8008af0:	42bc      	cmp	r4, r7
 8008af2:	bf88      	it	hi
 8008af4:	2200      	movhi	r2, #0
 8008af6:	4413      	add	r3, r2
 8008af8:	1a18      	subs	r0, r3, r0
 8008afa:	b003      	add	sp, #12
 8008afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b02:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b06:	e7ed      	b.n	8008ae4 <__exponent+0x4c>
 8008b08:	2330      	movs	r3, #48	; 0x30
 8008b0a:	3130      	adds	r1, #48	; 0x30
 8008b0c:	7083      	strb	r3, [r0, #2]
 8008b0e:	70c1      	strb	r1, [r0, #3]
 8008b10:	1d03      	adds	r3, r0, #4
 8008b12:	e7f1      	b.n	8008af8 <__exponent+0x60>

08008b14 <_printf_float>:
 8008b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b18:	ed2d 8b02 	vpush	{d8}
 8008b1c:	b08d      	sub	sp, #52	; 0x34
 8008b1e:	460c      	mov	r4, r1
 8008b20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b24:	4616      	mov	r6, r2
 8008b26:	461f      	mov	r7, r3
 8008b28:	4605      	mov	r5, r0
 8008b2a:	f000 fd5b 	bl	80095e4 <_localeconv_r>
 8008b2e:	f8d0 a000 	ldr.w	sl, [r0]
 8008b32:	4650      	mov	r0, sl
 8008b34:	f7f7 fba4 	bl	8000280 <strlen>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	9305      	str	r3, [sp, #20]
 8008b40:	f8d8 3000 	ldr.w	r3, [r8]
 8008b44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b48:	3307      	adds	r3, #7
 8008b4a:	f023 0307 	bic.w	r3, r3, #7
 8008b4e:	f103 0208 	add.w	r2, r3, #8
 8008b52:	f8c8 2000 	str.w	r2, [r8]
 8008b56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b70:	4b9e      	ldr	r3, [pc, #632]	; (8008dec <_printf_float+0x2d8>)
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295
 8008b76:	f7f7 ffe1 	bl	8000b3c <__aeabi_dcmpun>
 8008b7a:	bb88      	cbnz	r0, 8008be0 <_printf_float+0xcc>
 8008b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b80:	4b9a      	ldr	r3, [pc, #616]	; (8008dec <_printf_float+0x2d8>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	f7f7 ffbb 	bl	8000b00 <__aeabi_dcmple>
 8008b8a:	bb48      	cbnz	r0, 8008be0 <_printf_float+0xcc>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 ffaa 	bl	8000aec <__aeabi_dcmplt>
 8008b98:	b110      	cbz	r0, 8008ba0 <_printf_float+0x8c>
 8008b9a:	232d      	movs	r3, #45	; 0x2d
 8008b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ba0:	4a93      	ldr	r2, [pc, #588]	; (8008df0 <_printf_float+0x2dc>)
 8008ba2:	4b94      	ldr	r3, [pc, #592]	; (8008df4 <_printf_float+0x2e0>)
 8008ba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ba8:	bf94      	ite	ls
 8008baa:	4690      	movls	r8, r2
 8008bac:	4698      	movhi	r8, r3
 8008bae:	2303      	movs	r3, #3
 8008bb0:	6123      	str	r3, [r4, #16]
 8008bb2:	9b05      	ldr	r3, [sp, #20]
 8008bb4:	f023 0304 	bic.w	r3, r3, #4
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	9700      	str	r7, [sp, #0]
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 f9da 	bl	8008f80 <_printf_common>
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f040 8090 	bne.w	8008cf2 <_printf_float+0x1de>
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	b00d      	add	sp, #52	; 0x34
 8008bd8:	ecbd 8b02 	vpop	{d8}
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 ffa8 	bl	8000b3c <__aeabi_dcmpun>
 8008bec:	b140      	cbz	r0, 8008c00 <_printf_float+0xec>
 8008bee:	464b      	mov	r3, r9
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbc      	itt	lt
 8008bf4:	232d      	movlt	r3, #45	; 0x2d
 8008bf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bfa:	4a7f      	ldr	r2, [pc, #508]	; (8008df8 <_printf_float+0x2e4>)
 8008bfc:	4b7f      	ldr	r3, [pc, #508]	; (8008dfc <_printf_float+0x2e8>)
 8008bfe:	e7d1      	b.n	8008ba4 <_printf_float+0x90>
 8008c00:	6863      	ldr	r3, [r4, #4]
 8008c02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c06:	9206      	str	r2, [sp, #24]
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	d13f      	bne.n	8008c8c <_printf_float+0x178>
 8008c0c:	2306      	movs	r3, #6
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	6861      	ldr	r1, [r4, #4]
 8008c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c22:	ab09      	add	r3, sp, #36	; 0x24
 8008c24:	ec49 8b10 	vmov	d0, r8, r9
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c30:	4628      	mov	r0, r5
 8008c32:	f7ff fecf 	bl	80089d4 <__cvt>
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c3a:	2b47      	cmp	r3, #71	; 0x47
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	d108      	bne.n	8008c52 <_printf_float+0x13e>
 8008c40:	1cc8      	adds	r0, r1, #3
 8008c42:	db02      	blt.n	8008c4a <_printf_float+0x136>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	4299      	cmp	r1, r3
 8008c48:	dd41      	ble.n	8008cce <_printf_float+0x1ba>
 8008c4a:	f1ab 0302 	sub.w	r3, fp, #2
 8008c4e:	fa5f fb83 	uxtb.w	fp, r3
 8008c52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c56:	d820      	bhi.n	8008c9a <_printf_float+0x186>
 8008c58:	3901      	subs	r1, #1
 8008c5a:	465a      	mov	r2, fp
 8008c5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c60:	9109      	str	r1, [sp, #36]	; 0x24
 8008c62:	f7ff ff19 	bl	8008a98 <__exponent>
 8008c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c68:	1813      	adds	r3, r2, r0
 8008c6a:	2a01      	cmp	r2, #1
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	6123      	str	r3, [r4, #16]
 8008c70:	dc02      	bgt.n	8008c78 <_printf_float+0x164>
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	07d2      	lsls	r2, r2, #31
 8008c76:	d501      	bpl.n	8008c7c <_printf_float+0x168>
 8008c78:	3301      	adds	r3, #1
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d09c      	beq.n	8008bbe <_printf_float+0xaa>
 8008c84:	232d      	movs	r3, #45	; 0x2d
 8008c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c8a:	e798      	b.n	8008bbe <_printf_float+0xaa>
 8008c8c:	9a06      	ldr	r2, [sp, #24]
 8008c8e:	2a47      	cmp	r2, #71	; 0x47
 8008c90:	d1be      	bne.n	8008c10 <_printf_float+0xfc>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1bc      	bne.n	8008c10 <_printf_float+0xfc>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7b9      	b.n	8008c0e <_printf_float+0xfa>
 8008c9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c9e:	d118      	bne.n	8008cd2 <_printf_float+0x1be>
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	dd0b      	ble.n	8008cbe <_printf_float+0x1aa>
 8008ca6:	6121      	str	r1, [r4, #16]
 8008ca8:	b913      	cbnz	r3, 8008cb0 <_printf_float+0x19c>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	07d0      	lsls	r0, r2, #31
 8008cae:	d502      	bpl.n	8008cb6 <_printf_float+0x1a2>
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	440b      	add	r3, r1
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cb8:	f04f 0900 	mov.w	r9, #0
 8008cbc:	e7de      	b.n	8008c7c <_printf_float+0x168>
 8008cbe:	b913      	cbnz	r3, 8008cc6 <_printf_float+0x1b2>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	07d2      	lsls	r2, r2, #31
 8008cc4:	d501      	bpl.n	8008cca <_printf_float+0x1b6>
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	e7f4      	b.n	8008cb4 <_printf_float+0x1a0>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e7f2      	b.n	8008cb4 <_printf_float+0x1a0>
 8008cce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	db05      	blt.n	8008ce4 <_printf_float+0x1d0>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	6121      	str	r1, [r4, #16]
 8008cdc:	07d8      	lsls	r0, r3, #31
 8008cde:	d5ea      	bpl.n	8008cb6 <_printf_float+0x1a2>
 8008ce0:	1c4b      	adds	r3, r1, #1
 8008ce2:	e7e7      	b.n	8008cb4 <_printf_float+0x1a0>
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	bfd4      	ite	le
 8008ce8:	f1c1 0202 	rsble	r2, r1, #2
 8008cec:	2201      	movgt	r2, #1
 8008cee:	4413      	add	r3, r2
 8008cf0:	e7e0      	b.n	8008cb4 <_printf_float+0x1a0>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	055a      	lsls	r2, r3, #21
 8008cf6:	d407      	bmi.n	8008d08 <_printf_float+0x1f4>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	47b8      	blx	r7
 8008d02:	3001      	adds	r0, #1
 8008d04:	d12c      	bne.n	8008d60 <_printf_float+0x24c>
 8008d06:	e764      	b.n	8008bd2 <_printf_float+0xbe>
 8008d08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d0c:	f240 80e0 	bls.w	8008ed0 <_printf_float+0x3bc>
 8008d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	f7f7 fede 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d034      	beq.n	8008d8a <_printf_float+0x276>
 8008d20:	4a37      	ldr	r2, [pc, #220]	; (8008e00 <_printf_float+0x2ec>)
 8008d22:	2301      	movs	r3, #1
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af51 	beq.w	8008bd2 <_printf_float+0xbe>
 8008d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d34:	429a      	cmp	r2, r3
 8008d36:	db02      	blt.n	8008d3e <_printf_float+0x22a>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	07d8      	lsls	r0, r3, #31
 8008d3c:	d510      	bpl.n	8008d60 <_printf_float+0x24c>
 8008d3e:	ee18 3a10 	vmov	r3, s16
 8008d42:	4652      	mov	r2, sl
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af41 	beq.w	8008bd2 <_printf_float+0xbe>
 8008d50:	f04f 0800 	mov.w	r8, #0
 8008d54:	f104 091a 	add.w	r9, r4, #26
 8008d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	4543      	cmp	r3, r8
 8008d5e:	dc09      	bgt.n	8008d74 <_printf_float+0x260>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	079b      	lsls	r3, r3, #30
 8008d64:	f100 8107 	bmi.w	8008f76 <_printf_float+0x462>
 8008d68:	68e0      	ldr	r0, [r4, #12]
 8008d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	bfb8      	it	lt
 8008d70:	4618      	movlt	r0, r3
 8008d72:	e730      	b.n	8008bd6 <_printf_float+0xc2>
 8008d74:	2301      	movs	r3, #1
 8008d76:	464a      	mov	r2, r9
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af27 	beq.w	8008bd2 <_printf_float+0xbe>
 8008d84:	f108 0801 	add.w	r8, r8, #1
 8008d88:	e7e6      	b.n	8008d58 <_printf_float+0x244>
 8008d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc39      	bgt.n	8008e04 <_printf_float+0x2f0>
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <_printf_float+0x2ec>)
 8008d92:	2301      	movs	r3, #1
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	47b8      	blx	r7
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f43f af19 	beq.w	8008bd2 <_printf_float+0xbe>
 8008da0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008da4:	4313      	orrs	r3, r2
 8008da6:	d102      	bne.n	8008dae <_printf_float+0x29a>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	07d9      	lsls	r1, r3, #31
 8008dac:	d5d8      	bpl.n	8008d60 <_printf_float+0x24c>
 8008dae:	ee18 3a10 	vmov	r3, s16
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af09 	beq.w	8008bd2 <_printf_float+0xbe>
 8008dc0:	f04f 0900 	mov.w	r9, #0
 8008dc4:	f104 0a1a 	add.w	sl, r4, #26
 8008dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dca:	425b      	negs	r3, r3
 8008dcc:	454b      	cmp	r3, r9
 8008dce:	dc01      	bgt.n	8008dd4 <_printf_float+0x2c0>
 8008dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd2:	e792      	b.n	8008cfa <_printf_float+0x1e6>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b8      	blx	r7
 8008dde:	3001      	adds	r0, #1
 8008de0:	f43f aef7 	beq.w	8008bd2 <_printf_float+0xbe>
 8008de4:	f109 0901 	add.w	r9, r9, #1
 8008de8:	e7ee      	b.n	8008dc8 <_printf_float+0x2b4>
 8008dea:	bf00      	nop
 8008dec:	7fefffff 	.word	0x7fefffff
 8008df0:	0800ceb4 	.word	0x0800ceb4
 8008df4:	0800ceb8 	.word	0x0800ceb8
 8008df8:	0800cebc 	.word	0x0800cebc
 8008dfc:	0800cec0 	.word	0x0800cec0
 8008e00:	0800cec4 	.word	0x0800cec4
 8008e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bfa8      	it	ge
 8008e0c:	461a      	movge	r2, r3
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	4691      	mov	r9, r2
 8008e12:	dc37      	bgt.n	8008e84 <_printf_float+0x370>
 8008e14:	f04f 0b00 	mov.w	fp, #0
 8008e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e1c:	f104 021a 	add.w	r2, r4, #26
 8008e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	eba3 0309 	sub.w	r3, r3, r9
 8008e28:	455b      	cmp	r3, fp
 8008e2a:	dc33      	bgt.n	8008e94 <_printf_float+0x380>
 8008e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e30:	429a      	cmp	r2, r3
 8008e32:	db3b      	blt.n	8008eac <_printf_float+0x398>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	07da      	lsls	r2, r3, #31
 8008e38:	d438      	bmi.n	8008eac <_printf_float+0x398>
 8008e3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e3e:	eba2 0903 	sub.w	r9, r2, r3
 8008e42:	9b05      	ldr	r3, [sp, #20]
 8008e44:	1ad2      	subs	r2, r2, r3
 8008e46:	4591      	cmp	r9, r2
 8008e48:	bfa8      	it	ge
 8008e4a:	4691      	movge	r9, r2
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	dc35      	bgt.n	8008ebe <_printf_float+0x3aa>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5a:	f104 0a1a 	add.w	sl, r4, #26
 8008e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	eba3 0309 	sub.w	r3, r3, r9
 8008e68:	4543      	cmp	r3, r8
 8008e6a:	f77f af79 	ble.w	8008d60 <_printf_float+0x24c>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4652      	mov	r2, sl
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f aeaa 	beq.w	8008bd2 <_printf_float+0xbe>
 8008e7e:	f108 0801 	add.w	r8, r8, #1
 8008e82:	e7ec      	b.n	8008e5e <_printf_float+0x34a>
 8008e84:	4613      	mov	r3, r2
 8008e86:	4631      	mov	r1, r6
 8008e88:	4642      	mov	r2, r8
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d1c0      	bne.n	8008e14 <_printf_float+0x300>
 8008e92:	e69e      	b.n	8008bd2 <_printf_float+0xbe>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	9205      	str	r2, [sp, #20]
 8008e9c:	47b8      	blx	r7
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f43f ae97 	beq.w	8008bd2 <_printf_float+0xbe>
 8008ea4:	9a05      	ldr	r2, [sp, #20]
 8008ea6:	f10b 0b01 	add.w	fp, fp, #1
 8008eaa:	e7b9      	b.n	8008e20 <_printf_float+0x30c>
 8008eac:	ee18 3a10 	vmov	r3, s16
 8008eb0:	4652      	mov	r2, sl
 8008eb2:	4631      	mov	r1, r6
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	47b8      	blx	r7
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d1be      	bne.n	8008e3a <_printf_float+0x326>
 8008ebc:	e689      	b.n	8008bd2 <_printf_float+0xbe>
 8008ebe:	9a05      	ldr	r2, [sp, #20]
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4442      	add	r2, r8
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d1c1      	bne.n	8008e52 <_printf_float+0x33e>
 8008ece:	e680      	b.n	8008bd2 <_printf_float+0xbe>
 8008ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed2:	2a01      	cmp	r2, #1
 8008ed4:	dc01      	bgt.n	8008eda <_printf_float+0x3c6>
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d53a      	bpl.n	8008f50 <_printf_float+0x43c>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4642      	mov	r2, r8
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b8      	blx	r7
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	f43f ae74 	beq.w	8008bd2 <_printf_float+0xbe>
 8008eea:	ee18 3a10 	vmov	r3, s16
 8008eee:	4652      	mov	r2, sl
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f ae6b 	beq.w	8008bd2 <_printf_float+0xbe>
 8008efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008f08:	f7f7 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f0c:	b9d8      	cbnz	r0, 8008f46 <_printf_float+0x432>
 8008f0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f12:	f108 0201 	add.w	r2, r8, #1
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d10e      	bne.n	8008f3e <_printf_float+0x42a>
 8008f20:	e657      	b.n	8008bd2 <_printf_float+0xbe>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4652      	mov	r2, sl
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f43f ae50 	beq.w	8008bd2 <_printf_float+0xbe>
 8008f32:	f108 0801 	add.w	r8, r8, #1
 8008f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	4543      	cmp	r3, r8
 8008f3c:	dcf1      	bgt.n	8008f22 <_printf_float+0x40e>
 8008f3e:	464b      	mov	r3, r9
 8008f40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f44:	e6da      	b.n	8008cfc <_printf_float+0x1e8>
 8008f46:	f04f 0800 	mov.w	r8, #0
 8008f4a:	f104 0a1a 	add.w	sl, r4, #26
 8008f4e:	e7f2      	b.n	8008f36 <_printf_float+0x422>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4642      	mov	r2, r8
 8008f54:	e7df      	b.n	8008f16 <_printf_float+0x402>
 8008f56:	2301      	movs	r3, #1
 8008f58:	464a      	mov	r2, r9
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f ae36 	beq.w	8008bd2 <_printf_float+0xbe>
 8008f66:	f108 0801 	add.w	r8, r8, #1
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f6e:	1a5b      	subs	r3, r3, r1
 8008f70:	4543      	cmp	r3, r8
 8008f72:	dcf0      	bgt.n	8008f56 <_printf_float+0x442>
 8008f74:	e6f8      	b.n	8008d68 <_printf_float+0x254>
 8008f76:	f04f 0800 	mov.w	r8, #0
 8008f7a:	f104 0919 	add.w	r9, r4, #25
 8008f7e:	e7f4      	b.n	8008f6a <_printf_float+0x456>

08008f80 <_printf_common>:
 8008f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f84:	4616      	mov	r6, r2
 8008f86:	4699      	mov	r9, r3
 8008f88:	688a      	ldr	r2, [r1, #8]
 8008f8a:	690b      	ldr	r3, [r1, #16]
 8008f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	bfb8      	it	lt
 8008f94:	4613      	movlt	r3, r2
 8008f96:	6033      	str	r3, [r6, #0]
 8008f98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_printf_common+0x26>
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	0699      	lsls	r1, r3, #26
 8008faa:	bf42      	ittt	mi
 8008fac:	6833      	ldrmi	r3, [r6, #0]
 8008fae:	3302      	addmi	r3, #2
 8008fb0:	6033      	strmi	r3, [r6, #0]
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	f015 0506 	ands.w	r5, r5, #6
 8008fb8:	d106      	bne.n	8008fc8 <_printf_common+0x48>
 8008fba:	f104 0a19 	add.w	sl, r4, #25
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	6832      	ldr	r2, [r6, #0]
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dc26      	bgt.n	8009016 <_printf_common+0x96>
 8008fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fcc:	1e13      	subs	r3, r2, #0
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	0692      	lsls	r2, r2, #26
 8008fd6:	d42b      	bmi.n	8009030 <_printf_common+0xb0>
 8008fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fdc:	4649      	mov	r1, r9
 8008fde:	4638      	mov	r0, r7
 8008fe0:	47c0      	blx	r8
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d01e      	beq.n	8009024 <_printf_common+0xa4>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	f003 0306 	and.w	r3, r3, #6
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	bf02      	ittt	eq
 8008ff2:	68e5      	ldreq	r5, [r4, #12]
 8008ff4:	6833      	ldreq	r3, [r6, #0]
 8008ff6:	1aed      	subeq	r5, r5, r3
 8008ff8:	68a3      	ldr	r3, [r4, #8]
 8008ffa:	bf0c      	ite	eq
 8008ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009000:	2500      	movne	r5, #0
 8009002:	4293      	cmp	r3, r2
 8009004:	bfc4      	itt	gt
 8009006:	1a9b      	subgt	r3, r3, r2
 8009008:	18ed      	addgt	r5, r5, r3
 800900a:	2600      	movs	r6, #0
 800900c:	341a      	adds	r4, #26
 800900e:	42b5      	cmp	r5, r6
 8009010:	d11a      	bne.n	8009048 <_printf_common+0xc8>
 8009012:	2000      	movs	r0, #0
 8009014:	e008      	b.n	8009028 <_printf_common+0xa8>
 8009016:	2301      	movs	r3, #1
 8009018:	4652      	mov	r2, sl
 800901a:	4649      	mov	r1, r9
 800901c:	4638      	mov	r0, r7
 800901e:	47c0      	blx	r8
 8009020:	3001      	adds	r0, #1
 8009022:	d103      	bne.n	800902c <_printf_common+0xac>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	3501      	adds	r5, #1
 800902e:	e7c6      	b.n	8008fbe <_printf_common+0x3e>
 8009030:	18e1      	adds	r1, r4, r3
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	2030      	movs	r0, #48	; 0x30
 8009036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800903a:	4422      	add	r2, r4
 800903c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009044:	3302      	adds	r3, #2
 8009046:	e7c7      	b.n	8008fd8 <_printf_common+0x58>
 8009048:	2301      	movs	r3, #1
 800904a:	4622      	mov	r2, r4
 800904c:	4649      	mov	r1, r9
 800904e:	4638      	mov	r0, r7
 8009050:	47c0      	blx	r8
 8009052:	3001      	adds	r0, #1
 8009054:	d0e6      	beq.n	8009024 <_printf_common+0xa4>
 8009056:	3601      	adds	r6, #1
 8009058:	e7d9      	b.n	800900e <_printf_common+0x8e>
	...

0800905c <_printf_i>:
 800905c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	7e0f      	ldrb	r7, [r1, #24]
 8009062:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009064:	2f78      	cmp	r7, #120	; 0x78
 8009066:	4691      	mov	r9, r2
 8009068:	4680      	mov	r8, r0
 800906a:	460c      	mov	r4, r1
 800906c:	469a      	mov	sl, r3
 800906e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009072:	d807      	bhi.n	8009084 <_printf_i+0x28>
 8009074:	2f62      	cmp	r7, #98	; 0x62
 8009076:	d80a      	bhi.n	800908e <_printf_i+0x32>
 8009078:	2f00      	cmp	r7, #0
 800907a:	f000 80d4 	beq.w	8009226 <_printf_i+0x1ca>
 800907e:	2f58      	cmp	r7, #88	; 0x58
 8009080:	f000 80c0 	beq.w	8009204 <_printf_i+0x1a8>
 8009084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800908c:	e03a      	b.n	8009104 <_printf_i+0xa8>
 800908e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009092:	2b15      	cmp	r3, #21
 8009094:	d8f6      	bhi.n	8009084 <_printf_i+0x28>
 8009096:	a101      	add	r1, pc, #4	; (adr r1, 800909c <_printf_i+0x40>)
 8009098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	08009109 	.word	0x08009109
 80090a4:	08009085 	.word	0x08009085
 80090a8:	08009085 	.word	0x08009085
 80090ac:	08009085 	.word	0x08009085
 80090b0:	08009085 	.word	0x08009085
 80090b4:	08009109 	.word	0x08009109
 80090b8:	08009085 	.word	0x08009085
 80090bc:	08009085 	.word	0x08009085
 80090c0:	08009085 	.word	0x08009085
 80090c4:	08009085 	.word	0x08009085
 80090c8:	0800920d 	.word	0x0800920d
 80090cc:	08009135 	.word	0x08009135
 80090d0:	080091c7 	.word	0x080091c7
 80090d4:	08009085 	.word	0x08009085
 80090d8:	08009085 	.word	0x08009085
 80090dc:	0800922f 	.word	0x0800922f
 80090e0:	08009085 	.word	0x08009085
 80090e4:	08009135 	.word	0x08009135
 80090e8:	08009085 	.word	0x08009085
 80090ec:	08009085 	.word	0x08009085
 80090f0:	080091cf 	.word	0x080091cf
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	1d1a      	adds	r2, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	602a      	str	r2, [r5, #0]
 80090fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009104:	2301      	movs	r3, #1
 8009106:	e09f      	b.n	8009248 <_printf_i+0x1ec>
 8009108:	6820      	ldr	r0, [r4, #0]
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	0607      	lsls	r7, r0, #24
 800910e:	f103 0104 	add.w	r1, r3, #4
 8009112:	6029      	str	r1, [r5, #0]
 8009114:	d501      	bpl.n	800911a <_printf_i+0xbe>
 8009116:	681e      	ldr	r6, [r3, #0]
 8009118:	e003      	b.n	8009122 <_printf_i+0xc6>
 800911a:	0646      	lsls	r6, r0, #25
 800911c:	d5fb      	bpl.n	8009116 <_printf_i+0xba>
 800911e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009122:	2e00      	cmp	r6, #0
 8009124:	da03      	bge.n	800912e <_printf_i+0xd2>
 8009126:	232d      	movs	r3, #45	; 0x2d
 8009128:	4276      	negs	r6, r6
 800912a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912e:	485a      	ldr	r0, [pc, #360]	; (8009298 <_printf_i+0x23c>)
 8009130:	230a      	movs	r3, #10
 8009132:	e012      	b.n	800915a <_printf_i+0xfe>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	6820      	ldr	r0, [r4, #0]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	6029      	str	r1, [r5, #0]
 800913c:	0605      	lsls	r5, r0, #24
 800913e:	d501      	bpl.n	8009144 <_printf_i+0xe8>
 8009140:	681e      	ldr	r6, [r3, #0]
 8009142:	e002      	b.n	800914a <_printf_i+0xee>
 8009144:	0641      	lsls	r1, r0, #25
 8009146:	d5fb      	bpl.n	8009140 <_printf_i+0xe4>
 8009148:	881e      	ldrh	r6, [r3, #0]
 800914a:	4853      	ldr	r0, [pc, #332]	; (8009298 <_printf_i+0x23c>)
 800914c:	2f6f      	cmp	r7, #111	; 0x6f
 800914e:	bf0c      	ite	eq
 8009150:	2308      	moveq	r3, #8
 8009152:	230a      	movne	r3, #10
 8009154:	2100      	movs	r1, #0
 8009156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800915a:	6865      	ldr	r5, [r4, #4]
 800915c:	60a5      	str	r5, [r4, #8]
 800915e:	2d00      	cmp	r5, #0
 8009160:	bfa2      	ittt	ge
 8009162:	6821      	ldrge	r1, [r4, #0]
 8009164:	f021 0104 	bicge.w	r1, r1, #4
 8009168:	6021      	strge	r1, [r4, #0]
 800916a:	b90e      	cbnz	r6, 8009170 <_printf_i+0x114>
 800916c:	2d00      	cmp	r5, #0
 800916e:	d04b      	beq.n	8009208 <_printf_i+0x1ac>
 8009170:	4615      	mov	r5, r2
 8009172:	fbb6 f1f3 	udiv	r1, r6, r3
 8009176:	fb03 6711 	mls	r7, r3, r1, r6
 800917a:	5dc7      	ldrb	r7, [r0, r7]
 800917c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009180:	4637      	mov	r7, r6
 8009182:	42bb      	cmp	r3, r7
 8009184:	460e      	mov	r6, r1
 8009186:	d9f4      	bls.n	8009172 <_printf_i+0x116>
 8009188:	2b08      	cmp	r3, #8
 800918a:	d10b      	bne.n	80091a4 <_printf_i+0x148>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	07de      	lsls	r6, r3, #31
 8009190:	d508      	bpl.n	80091a4 <_printf_i+0x148>
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	6861      	ldr	r1, [r4, #4]
 8009196:	4299      	cmp	r1, r3
 8009198:	bfde      	ittt	le
 800919a:	2330      	movle	r3, #48	; 0x30
 800919c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091a4:	1b52      	subs	r2, r2, r5
 80091a6:	6122      	str	r2, [r4, #16]
 80091a8:	f8cd a000 	str.w	sl, [sp]
 80091ac:	464b      	mov	r3, r9
 80091ae:	aa03      	add	r2, sp, #12
 80091b0:	4621      	mov	r1, r4
 80091b2:	4640      	mov	r0, r8
 80091b4:	f7ff fee4 	bl	8008f80 <_printf_common>
 80091b8:	3001      	adds	r0, #1
 80091ba:	d14a      	bne.n	8009252 <_printf_i+0x1f6>
 80091bc:	f04f 30ff 	mov.w	r0, #4294967295
 80091c0:	b004      	add	sp, #16
 80091c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	f043 0320 	orr.w	r3, r3, #32
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	4833      	ldr	r0, [pc, #204]	; (800929c <_printf_i+0x240>)
 80091d0:	2778      	movs	r7, #120	; 0x78
 80091d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	6829      	ldr	r1, [r5, #0]
 80091da:	061f      	lsls	r7, r3, #24
 80091dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80091e0:	d402      	bmi.n	80091e8 <_printf_i+0x18c>
 80091e2:	065f      	lsls	r7, r3, #25
 80091e4:	bf48      	it	mi
 80091e6:	b2b6      	uxthmi	r6, r6
 80091e8:	07df      	lsls	r7, r3, #31
 80091ea:	bf48      	it	mi
 80091ec:	f043 0320 	orrmi.w	r3, r3, #32
 80091f0:	6029      	str	r1, [r5, #0]
 80091f2:	bf48      	it	mi
 80091f4:	6023      	strmi	r3, [r4, #0]
 80091f6:	b91e      	cbnz	r6, 8009200 <_printf_i+0x1a4>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	f023 0320 	bic.w	r3, r3, #32
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	2310      	movs	r3, #16
 8009202:	e7a7      	b.n	8009154 <_printf_i+0xf8>
 8009204:	4824      	ldr	r0, [pc, #144]	; (8009298 <_printf_i+0x23c>)
 8009206:	e7e4      	b.n	80091d2 <_printf_i+0x176>
 8009208:	4615      	mov	r5, r2
 800920a:	e7bd      	b.n	8009188 <_printf_i+0x12c>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	6826      	ldr	r6, [r4, #0]
 8009210:	6961      	ldr	r1, [r4, #20]
 8009212:	1d18      	adds	r0, r3, #4
 8009214:	6028      	str	r0, [r5, #0]
 8009216:	0635      	lsls	r5, r6, #24
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	d501      	bpl.n	8009220 <_printf_i+0x1c4>
 800921c:	6019      	str	r1, [r3, #0]
 800921e:	e002      	b.n	8009226 <_printf_i+0x1ca>
 8009220:	0670      	lsls	r0, r6, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0x1c0>
 8009224:	8019      	strh	r1, [r3, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	4615      	mov	r5, r2
 800922c:	e7bc      	b.n	80091a8 <_printf_i+0x14c>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	1d1a      	adds	r2, r3, #4
 8009232:	602a      	str	r2, [r5, #0]
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	6862      	ldr	r2, [r4, #4]
 8009238:	2100      	movs	r1, #0
 800923a:	4628      	mov	r0, r5
 800923c:	f7f6 ffd0 	bl	80001e0 <memchr>
 8009240:	b108      	cbz	r0, 8009246 <_printf_i+0x1ea>
 8009242:	1b40      	subs	r0, r0, r5
 8009244:	6060      	str	r0, [r4, #4]
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	2300      	movs	r3, #0
 800924c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009250:	e7aa      	b.n	80091a8 <_printf_i+0x14c>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	462a      	mov	r2, r5
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d0ad      	beq.n	80091bc <_printf_i+0x160>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	079b      	lsls	r3, r3, #30
 8009264:	d413      	bmi.n	800928e <_printf_i+0x232>
 8009266:	68e0      	ldr	r0, [r4, #12]
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	4298      	cmp	r0, r3
 800926c:	bfb8      	it	lt
 800926e:	4618      	movlt	r0, r3
 8009270:	e7a6      	b.n	80091c0 <_printf_i+0x164>
 8009272:	2301      	movs	r3, #1
 8009274:	4632      	mov	r2, r6
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	47d0      	blx	sl
 800927c:	3001      	adds	r0, #1
 800927e:	d09d      	beq.n	80091bc <_printf_i+0x160>
 8009280:	3501      	adds	r5, #1
 8009282:	68e3      	ldr	r3, [r4, #12]
 8009284:	9903      	ldr	r1, [sp, #12]
 8009286:	1a5b      	subs	r3, r3, r1
 8009288:	42ab      	cmp	r3, r5
 800928a:	dcf2      	bgt.n	8009272 <_printf_i+0x216>
 800928c:	e7eb      	b.n	8009266 <_printf_i+0x20a>
 800928e:	2500      	movs	r5, #0
 8009290:	f104 0619 	add.w	r6, r4, #25
 8009294:	e7f5      	b.n	8009282 <_printf_i+0x226>
 8009296:	bf00      	nop
 8009298:	0800cec6 	.word	0x0800cec6
 800929c:	0800ced7 	.word	0x0800ced7

080092a0 <std>:
 80092a0:	2300      	movs	r3, #0
 80092a2:	b510      	push	{r4, lr}
 80092a4:	4604      	mov	r4, r0
 80092a6:	e9c0 3300 	strd	r3, r3, [r0]
 80092aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092ae:	6083      	str	r3, [r0, #8]
 80092b0:	8181      	strh	r1, [r0, #12]
 80092b2:	6643      	str	r3, [r0, #100]	; 0x64
 80092b4:	81c2      	strh	r2, [r0, #14]
 80092b6:	6183      	str	r3, [r0, #24]
 80092b8:	4619      	mov	r1, r3
 80092ba:	2208      	movs	r2, #8
 80092bc:	305c      	adds	r0, #92	; 0x5c
 80092be:	f000 f989 	bl	80095d4 <memset>
 80092c2:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <std+0x58>)
 80092c4:	6263      	str	r3, [r4, #36]	; 0x24
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <std+0x5c>)
 80092c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092ca:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <std+0x60>)
 80092cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ce:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <std+0x64>)
 80092d0:	6323      	str	r3, [r4, #48]	; 0x30
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <std+0x68>)
 80092d4:	6224      	str	r4, [r4, #32]
 80092d6:	429c      	cmp	r4, r3
 80092d8:	d006      	beq.n	80092e8 <std+0x48>
 80092da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80092de:	4294      	cmp	r4, r2
 80092e0:	d002      	beq.n	80092e8 <std+0x48>
 80092e2:	33d0      	adds	r3, #208	; 0xd0
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d105      	bne.n	80092f4 <std+0x54>
 80092e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f0:	f000 b9ec 	b.w	80096cc <__retarget_lock_init_recursive>
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	08009425 	.word	0x08009425
 80092fc:	08009447 	.word	0x08009447
 8009300:	0800947f 	.word	0x0800947f
 8009304:	080094a3 	.word	0x080094a3
 8009308:	20000f64 	.word	0x20000f64

0800930c <stdio_exit_handler>:
 800930c:	4a02      	ldr	r2, [pc, #8]	; (8009318 <stdio_exit_handler+0xc>)
 800930e:	4903      	ldr	r1, [pc, #12]	; (800931c <stdio_exit_handler+0x10>)
 8009310:	4803      	ldr	r0, [pc, #12]	; (8009320 <stdio_exit_handler+0x14>)
 8009312:	f000 b869 	b.w	80093e8 <_fwalk_sglue>
 8009316:	bf00      	nop
 8009318:	200003fc 	.word	0x200003fc
 800931c:	0800b0b1 	.word	0x0800b0b1
 8009320:	20000408 	.word	0x20000408

08009324 <cleanup_stdio>:
 8009324:	6841      	ldr	r1, [r0, #4]
 8009326:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <cleanup_stdio+0x34>)
 8009328:	4299      	cmp	r1, r3
 800932a:	b510      	push	{r4, lr}
 800932c:	4604      	mov	r4, r0
 800932e:	d001      	beq.n	8009334 <cleanup_stdio+0x10>
 8009330:	f001 febe 	bl	800b0b0 <_fflush_r>
 8009334:	68a1      	ldr	r1, [r4, #8]
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <cleanup_stdio+0x38>)
 8009338:	4299      	cmp	r1, r3
 800933a:	d002      	beq.n	8009342 <cleanup_stdio+0x1e>
 800933c:	4620      	mov	r0, r4
 800933e:	f001 feb7 	bl	800b0b0 <_fflush_r>
 8009342:	68e1      	ldr	r1, [r4, #12]
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <cleanup_stdio+0x3c>)
 8009346:	4299      	cmp	r1, r3
 8009348:	d004      	beq.n	8009354 <cleanup_stdio+0x30>
 800934a:	4620      	mov	r0, r4
 800934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009350:	f001 beae 	b.w	800b0b0 <_fflush_r>
 8009354:	bd10      	pop	{r4, pc}
 8009356:	bf00      	nop
 8009358:	20000f64 	.word	0x20000f64
 800935c:	20000fcc 	.word	0x20000fcc
 8009360:	20001034 	.word	0x20001034

08009364 <global_stdio_init.part.0>:
 8009364:	b510      	push	{r4, lr}
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <global_stdio_init.part.0+0x30>)
 8009368:	4c0b      	ldr	r4, [pc, #44]	; (8009398 <global_stdio_init.part.0+0x34>)
 800936a:	4a0c      	ldr	r2, [pc, #48]	; (800939c <global_stdio_init.part.0+0x38>)
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	4620      	mov	r0, r4
 8009370:	2200      	movs	r2, #0
 8009372:	2104      	movs	r1, #4
 8009374:	f7ff ff94 	bl	80092a0 <std>
 8009378:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800937c:	2201      	movs	r2, #1
 800937e:	2109      	movs	r1, #9
 8009380:	f7ff ff8e 	bl	80092a0 <std>
 8009384:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009388:	2202      	movs	r2, #2
 800938a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938e:	2112      	movs	r1, #18
 8009390:	f7ff bf86 	b.w	80092a0 <std>
 8009394:	2000109c 	.word	0x2000109c
 8009398:	20000f64 	.word	0x20000f64
 800939c:	0800930d 	.word	0x0800930d

080093a0 <__sfp_lock_acquire>:
 80093a0:	4801      	ldr	r0, [pc, #4]	; (80093a8 <__sfp_lock_acquire+0x8>)
 80093a2:	f000 b994 	b.w	80096ce <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	200010a5 	.word	0x200010a5

080093ac <__sfp_lock_release>:
 80093ac:	4801      	ldr	r0, [pc, #4]	; (80093b4 <__sfp_lock_release+0x8>)
 80093ae:	f000 b98f 	b.w	80096d0 <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	200010a5 	.word	0x200010a5

080093b8 <__sinit>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	4604      	mov	r4, r0
 80093bc:	f7ff fff0 	bl	80093a0 <__sfp_lock_acquire>
 80093c0:	6a23      	ldr	r3, [r4, #32]
 80093c2:	b11b      	cbz	r3, 80093cc <__sinit+0x14>
 80093c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c8:	f7ff bff0 	b.w	80093ac <__sfp_lock_release>
 80093cc:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <__sinit+0x28>)
 80093ce:	6223      	str	r3, [r4, #32]
 80093d0:	4b04      	ldr	r3, [pc, #16]	; (80093e4 <__sinit+0x2c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1f5      	bne.n	80093c4 <__sinit+0xc>
 80093d8:	f7ff ffc4 	bl	8009364 <global_stdio_init.part.0>
 80093dc:	e7f2      	b.n	80093c4 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	08009325 	.word	0x08009325
 80093e4:	2000109c 	.word	0x2000109c

080093e8 <_fwalk_sglue>:
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	4607      	mov	r7, r0
 80093ee:	4688      	mov	r8, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	2600      	movs	r6, #0
 80093f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f8:	f1b9 0901 	subs.w	r9, r9, #1
 80093fc:	d505      	bpl.n	800940a <_fwalk_sglue+0x22>
 80093fe:	6824      	ldr	r4, [r4, #0]
 8009400:	2c00      	cmp	r4, #0
 8009402:	d1f7      	bne.n	80093f4 <_fwalk_sglue+0xc>
 8009404:	4630      	mov	r0, r6
 8009406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940a:	89ab      	ldrh	r3, [r5, #12]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d907      	bls.n	8009420 <_fwalk_sglue+0x38>
 8009410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009414:	3301      	adds	r3, #1
 8009416:	d003      	beq.n	8009420 <_fwalk_sglue+0x38>
 8009418:	4629      	mov	r1, r5
 800941a:	4638      	mov	r0, r7
 800941c:	47c0      	blx	r8
 800941e:	4306      	orrs	r6, r0
 8009420:	3568      	adds	r5, #104	; 0x68
 8009422:	e7e9      	b.n	80093f8 <_fwalk_sglue+0x10>

08009424 <__sread>:
 8009424:	b510      	push	{r4, lr}
 8009426:	460c      	mov	r4, r1
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	f000 f900 	bl	8009630 <_read_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	bfab      	itete	ge
 8009434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009436:	89a3      	ldrhlt	r3, [r4, #12]
 8009438:	181b      	addge	r3, r3, r0
 800943a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800943e:	bfac      	ite	ge
 8009440:	6563      	strge	r3, [r4, #84]	; 0x54
 8009442:	81a3      	strhlt	r3, [r4, #12]
 8009444:	bd10      	pop	{r4, pc}

08009446 <__swrite>:
 8009446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	461f      	mov	r7, r3
 800944c:	898b      	ldrh	r3, [r1, #12]
 800944e:	05db      	lsls	r3, r3, #23
 8009450:	4605      	mov	r5, r0
 8009452:	460c      	mov	r4, r1
 8009454:	4616      	mov	r6, r2
 8009456:	d505      	bpl.n	8009464 <__swrite+0x1e>
 8009458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945c:	2302      	movs	r3, #2
 800945e:	2200      	movs	r2, #0
 8009460:	f000 f8d4 	bl	800960c <_lseek_r>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	4632      	mov	r2, r6
 8009472:	463b      	mov	r3, r7
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	f000 b8eb 	b.w	8009654 <_write_r>

0800947e <__sseek>:
 800947e:	b510      	push	{r4, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009486:	f000 f8c1 	bl	800960c <_lseek_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	bf15      	itete	ne
 8009490:	6560      	strne	r0, [r4, #84]	; 0x54
 8009492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strheq	r3, [r4, #12]
 800949c:	bf18      	it	ne
 800949e:	81a3      	strhne	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__sclose>:
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 b8a1 	b.w	80095ec <_close_r>

080094aa <__swbuf_r>:
 80094aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ac:	460e      	mov	r6, r1
 80094ae:	4614      	mov	r4, r2
 80094b0:	4605      	mov	r5, r0
 80094b2:	b118      	cbz	r0, 80094bc <__swbuf_r+0x12>
 80094b4:	6a03      	ldr	r3, [r0, #32]
 80094b6:	b90b      	cbnz	r3, 80094bc <__swbuf_r+0x12>
 80094b8:	f7ff ff7e 	bl	80093b8 <__sinit>
 80094bc:	69a3      	ldr	r3, [r4, #24]
 80094be:	60a3      	str	r3, [r4, #8]
 80094c0:	89a3      	ldrh	r3, [r4, #12]
 80094c2:	071a      	lsls	r2, r3, #28
 80094c4:	d525      	bpl.n	8009512 <__swbuf_r+0x68>
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	b31b      	cbz	r3, 8009512 <__swbuf_r+0x68>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	6922      	ldr	r2, [r4, #16]
 80094ce:	1a98      	subs	r0, r3, r2
 80094d0:	6963      	ldr	r3, [r4, #20]
 80094d2:	b2f6      	uxtb	r6, r6
 80094d4:	4283      	cmp	r3, r0
 80094d6:	4637      	mov	r7, r6
 80094d8:	dc04      	bgt.n	80094e4 <__swbuf_r+0x3a>
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f001 fde7 	bl	800b0b0 <_fflush_r>
 80094e2:	b9e0      	cbnz	r0, 800951e <__swbuf_r+0x74>
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	60a3      	str	r3, [r4, #8]
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	701e      	strb	r6, [r3, #0]
 80094f2:	6962      	ldr	r2, [r4, #20]
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d004      	beq.n	8009504 <__swbuf_r+0x5a>
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	07db      	lsls	r3, r3, #31
 80094fe:	d506      	bpl.n	800950e <__swbuf_r+0x64>
 8009500:	2e0a      	cmp	r6, #10
 8009502:	d104      	bne.n	800950e <__swbuf_r+0x64>
 8009504:	4621      	mov	r1, r4
 8009506:	4628      	mov	r0, r5
 8009508:	f001 fdd2 	bl	800b0b0 <_fflush_r>
 800950c:	b938      	cbnz	r0, 800951e <__swbuf_r+0x74>
 800950e:	4638      	mov	r0, r7
 8009510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009512:	4621      	mov	r1, r4
 8009514:	4628      	mov	r0, r5
 8009516:	f000 f805 	bl	8009524 <__swsetup_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0d5      	beq.n	80094ca <__swbuf_r+0x20>
 800951e:	f04f 37ff 	mov.w	r7, #4294967295
 8009522:	e7f4      	b.n	800950e <__swbuf_r+0x64>

08009524 <__swsetup_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4b2a      	ldr	r3, [pc, #168]	; (80095d0 <__swsetup_r+0xac>)
 8009528:	4605      	mov	r5, r0
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	460c      	mov	r4, r1
 800952e:	b118      	cbz	r0, 8009538 <__swsetup_r+0x14>
 8009530:	6a03      	ldr	r3, [r0, #32]
 8009532:	b90b      	cbnz	r3, 8009538 <__swsetup_r+0x14>
 8009534:	f7ff ff40 	bl	80093b8 <__sinit>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800953e:	0718      	lsls	r0, r3, #28
 8009540:	d422      	bmi.n	8009588 <__swsetup_r+0x64>
 8009542:	06d9      	lsls	r1, r3, #27
 8009544:	d407      	bmi.n	8009556 <__swsetup_r+0x32>
 8009546:	2309      	movs	r3, #9
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	e034      	b.n	80095c0 <__swsetup_r+0x9c>
 8009556:	0758      	lsls	r0, r3, #29
 8009558:	d512      	bpl.n	8009580 <__swsetup_r+0x5c>
 800955a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800955c:	b141      	cbz	r1, 8009570 <__swsetup_r+0x4c>
 800955e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009562:	4299      	cmp	r1, r3
 8009564:	d002      	beq.n	800956c <__swsetup_r+0x48>
 8009566:	4628      	mov	r0, r5
 8009568:	f000 ff5c 	bl	800a424 <_free_r>
 800956c:	2300      	movs	r3, #0
 800956e:	6363      	str	r3, [r4, #52]	; 0x34
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	2300      	movs	r3, #0
 800957a:	6063      	str	r3, [r4, #4]
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	f043 0308 	orr.w	r3, r3, #8
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b94b      	cbnz	r3, 80095a0 <__swsetup_r+0x7c>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009596:	d003      	beq.n	80095a0 <__swsetup_r+0x7c>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f001 fde8 	bl	800b170 <__smakebuf_r>
 80095a0:	89a0      	ldrh	r0, [r4, #12]
 80095a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a6:	f010 0301 	ands.w	r3, r0, #1
 80095aa:	d00a      	beq.n	80095c2 <__swsetup_r+0x9e>
 80095ac:	2300      	movs	r3, #0
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	6963      	ldr	r3, [r4, #20]
 80095b2:	425b      	negs	r3, r3
 80095b4:	61a3      	str	r3, [r4, #24]
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	b943      	cbnz	r3, 80095cc <__swsetup_r+0xa8>
 80095ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095be:	d1c4      	bne.n	800954a <__swsetup_r+0x26>
 80095c0:	bd38      	pop	{r3, r4, r5, pc}
 80095c2:	0781      	lsls	r1, r0, #30
 80095c4:	bf58      	it	pl
 80095c6:	6963      	ldrpl	r3, [r4, #20]
 80095c8:	60a3      	str	r3, [r4, #8]
 80095ca:	e7f4      	b.n	80095b6 <__swsetup_r+0x92>
 80095cc:	2000      	movs	r0, #0
 80095ce:	e7f7      	b.n	80095c0 <__swsetup_r+0x9c>
 80095d0:	20000454 	.word	0x20000454

080095d4 <memset>:
 80095d4:	4402      	add	r2, r0
 80095d6:	4603      	mov	r3, r0
 80095d8:	4293      	cmp	r3, r2
 80095da:	d100      	bne.n	80095de <memset+0xa>
 80095dc:	4770      	bx	lr
 80095de:	f803 1b01 	strb.w	r1, [r3], #1
 80095e2:	e7f9      	b.n	80095d8 <memset+0x4>

080095e4 <_localeconv_r>:
 80095e4:	4800      	ldr	r0, [pc, #0]	; (80095e8 <_localeconv_r+0x4>)
 80095e6:	4770      	bx	lr
 80095e8:	20000548 	.word	0x20000548

080095ec <_close_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_close_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7fc fd07 	bl	800600a <_close>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_close_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_close_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	200010a0 	.word	0x200010a0

0800960c <_lseek_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d07      	ldr	r5, [pc, #28]	; (800962c <_lseek_r+0x20>)
 8009610:	4604      	mov	r4, r0
 8009612:	4608      	mov	r0, r1
 8009614:	4611      	mov	r1, r2
 8009616:	2200      	movs	r2, #0
 8009618:	602a      	str	r2, [r5, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	f7fc fd1c 	bl	8006058 <_lseek>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_lseek_r+0x1e>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_lseek_r+0x1e>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	200010a0 	.word	0x200010a0

08009630 <_read_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d07      	ldr	r5, [pc, #28]	; (8009650 <_read_r+0x20>)
 8009634:	4604      	mov	r4, r0
 8009636:	4608      	mov	r0, r1
 8009638:	4611      	mov	r1, r2
 800963a:	2200      	movs	r2, #0
 800963c:	602a      	str	r2, [r5, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f7fc fcaa 	bl	8005f98 <_read>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_read_r+0x1e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_read_r+0x1e>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	200010a0 	.word	0x200010a0

08009654 <_write_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_write_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7fc fcb5 	bl	8005fd2 <_write>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_write_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_write_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	200010a0 	.word	0x200010a0

08009678 <__errno>:
 8009678:	4b01      	ldr	r3, [pc, #4]	; (8009680 <__errno+0x8>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	20000454 	.word	0x20000454

08009684 <__libc_init_array>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	4d0d      	ldr	r5, [pc, #52]	; (80096bc <__libc_init_array+0x38>)
 8009688:	4c0d      	ldr	r4, [pc, #52]	; (80096c0 <__libc_init_array+0x3c>)
 800968a:	1b64      	subs	r4, r4, r5
 800968c:	10a4      	asrs	r4, r4, #2
 800968e:	2600      	movs	r6, #0
 8009690:	42a6      	cmp	r6, r4
 8009692:	d109      	bne.n	80096a8 <__libc_init_array+0x24>
 8009694:	4d0b      	ldr	r5, [pc, #44]	; (80096c4 <__libc_init_array+0x40>)
 8009696:	4c0c      	ldr	r4, [pc, #48]	; (80096c8 <__libc_init_array+0x44>)
 8009698:	f003 fabc 	bl	800cc14 <_init>
 800969c:	1b64      	subs	r4, r4, r5
 800969e:	10a4      	asrs	r4, r4, #2
 80096a0:	2600      	movs	r6, #0
 80096a2:	42a6      	cmp	r6, r4
 80096a4:	d105      	bne.n	80096b2 <__libc_init_array+0x2e>
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ac:	4798      	blx	r3
 80096ae:	3601      	adds	r6, #1
 80096b0:	e7ee      	b.n	8009690 <__libc_init_array+0xc>
 80096b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b6:	4798      	blx	r3
 80096b8:	3601      	adds	r6, #1
 80096ba:	e7f2      	b.n	80096a2 <__libc_init_array+0x1e>
 80096bc:	0800d2d0 	.word	0x0800d2d0
 80096c0:	0800d2d0 	.word	0x0800d2d0
 80096c4:	0800d2d0 	.word	0x0800d2d0
 80096c8:	0800d2d4 	.word	0x0800d2d4

080096cc <__retarget_lock_init_recursive>:
 80096cc:	4770      	bx	lr

080096ce <__retarget_lock_acquire_recursive>:
 80096ce:	4770      	bx	lr

080096d0 <__retarget_lock_release_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <memcpy>:
 80096d2:	440a      	add	r2, r1
 80096d4:	4291      	cmp	r1, r2
 80096d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80096da:	d100      	bne.n	80096de <memcpy+0xc>
 80096dc:	4770      	bx	lr
 80096de:	b510      	push	{r4, lr}
 80096e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096e8:	4291      	cmp	r1, r2
 80096ea:	d1f9      	bne.n	80096e0 <memcpy+0xe>
 80096ec:	bd10      	pop	{r4, pc}
	...

080096f0 <__assert_func>:
 80096f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f2:	4614      	mov	r4, r2
 80096f4:	461a      	mov	r2, r3
 80096f6:	4b09      	ldr	r3, [pc, #36]	; (800971c <__assert_func+0x2c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4605      	mov	r5, r0
 80096fc:	68d8      	ldr	r0, [r3, #12]
 80096fe:	b14c      	cbz	r4, 8009714 <__assert_func+0x24>
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <__assert_func+0x30>)
 8009702:	9100      	str	r1, [sp, #0]
 8009704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009708:	4906      	ldr	r1, [pc, #24]	; (8009724 <__assert_func+0x34>)
 800970a:	462b      	mov	r3, r5
 800970c:	f001 fcf8 	bl	800b100 <fiprintf>
 8009710:	f001 fd9c 	bl	800b24c <abort>
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <__assert_func+0x38>)
 8009716:	461c      	mov	r4, r3
 8009718:	e7f3      	b.n	8009702 <__assert_func+0x12>
 800971a:	bf00      	nop
 800971c:	20000454 	.word	0x20000454
 8009720:	0800cee8 	.word	0x0800cee8
 8009724:	0800cef5 	.word	0x0800cef5
 8009728:	0800cf23 	.word	0x0800cf23

0800972c <quorem>:
 800972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	6903      	ldr	r3, [r0, #16]
 8009732:	690c      	ldr	r4, [r1, #16]
 8009734:	42a3      	cmp	r3, r4
 8009736:	4607      	mov	r7, r0
 8009738:	db7e      	blt.n	8009838 <quorem+0x10c>
 800973a:	3c01      	subs	r4, #1
 800973c:	f101 0814 	add.w	r8, r1, #20
 8009740:	f100 0514 	add.w	r5, r0, #20
 8009744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800974e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009752:	3301      	adds	r3, #1
 8009754:	429a      	cmp	r2, r3
 8009756:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800975a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800975e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009762:	d331      	bcc.n	80097c8 <quorem+0x9c>
 8009764:	f04f 0e00 	mov.w	lr, #0
 8009768:	4640      	mov	r0, r8
 800976a:	46ac      	mov	ip, r5
 800976c:	46f2      	mov	sl, lr
 800976e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009772:	b293      	uxth	r3, r2
 8009774:	fb06 e303 	mla	r3, r6, r3, lr
 8009778:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800977c:	0c1a      	lsrs	r2, r3, #16
 800977e:	b29b      	uxth	r3, r3
 8009780:	ebaa 0303 	sub.w	r3, sl, r3
 8009784:	f8dc a000 	ldr.w	sl, [ip]
 8009788:	fa13 f38a 	uxtah	r3, r3, sl
 800978c:	fb06 220e 	mla	r2, r6, lr, r2
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	9b00      	ldr	r3, [sp, #0]
 8009794:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009798:	b292      	uxth	r2, r2
 800979a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800979e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80097a6:	4581      	cmp	r9, r0
 80097a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ac:	f84c 3b04 	str.w	r3, [ip], #4
 80097b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097b4:	d2db      	bcs.n	800976e <quorem+0x42>
 80097b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80097ba:	b92b      	cbnz	r3, 80097c8 <quorem+0x9c>
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	3b04      	subs	r3, #4
 80097c0:	429d      	cmp	r5, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	d32c      	bcc.n	8009820 <quorem+0xf4>
 80097c6:	613c      	str	r4, [r7, #16]
 80097c8:	4638      	mov	r0, r7
 80097ca:	f001 f9a7 	bl	800ab1c <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	db22      	blt.n	8009818 <quorem+0xec>
 80097d2:	3601      	adds	r6, #1
 80097d4:	4629      	mov	r1, r5
 80097d6:	2000      	movs	r0, #0
 80097d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097dc:	f8d1 c000 	ldr.w	ip, [r1]
 80097e0:	b293      	uxth	r3, r2
 80097e2:	1ac3      	subs	r3, r0, r3
 80097e4:	0c12      	lsrs	r2, r2, #16
 80097e6:	fa13 f38c 	uxtah	r3, r3, ip
 80097ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097f8:	45c1      	cmp	r9, r8
 80097fa:	f841 3b04 	str.w	r3, [r1], #4
 80097fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009802:	d2e9      	bcs.n	80097d8 <quorem+0xac>
 8009804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009808:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800980c:	b922      	cbnz	r2, 8009818 <quorem+0xec>
 800980e:	3b04      	subs	r3, #4
 8009810:	429d      	cmp	r5, r3
 8009812:	461a      	mov	r2, r3
 8009814:	d30a      	bcc.n	800982c <quorem+0x100>
 8009816:	613c      	str	r4, [r7, #16]
 8009818:	4630      	mov	r0, r6
 800981a:	b003      	add	sp, #12
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	6812      	ldr	r2, [r2, #0]
 8009822:	3b04      	subs	r3, #4
 8009824:	2a00      	cmp	r2, #0
 8009826:	d1ce      	bne.n	80097c6 <quorem+0x9a>
 8009828:	3c01      	subs	r4, #1
 800982a:	e7c9      	b.n	80097c0 <quorem+0x94>
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	3b04      	subs	r3, #4
 8009830:	2a00      	cmp	r2, #0
 8009832:	d1f0      	bne.n	8009816 <quorem+0xea>
 8009834:	3c01      	subs	r4, #1
 8009836:	e7eb      	b.n	8009810 <quorem+0xe4>
 8009838:	2000      	movs	r0, #0
 800983a:	e7ee      	b.n	800981a <quorem+0xee>
 800983c:	0000      	movs	r0, r0
	...

08009840 <_dtoa_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	ed2d 8b04 	vpush	{d8-d9}
 8009848:	69c5      	ldr	r5, [r0, #28]
 800984a:	b093      	sub	sp, #76	; 0x4c
 800984c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009858:	9107      	str	r1, [sp, #28]
 800985a:	4604      	mov	r4, r0
 800985c:	920a      	str	r2, [sp, #40]	; 0x28
 800985e:	930d      	str	r3, [sp, #52]	; 0x34
 8009860:	b975      	cbnz	r5, 8009880 <_dtoa_r+0x40>
 8009862:	2010      	movs	r0, #16
 8009864:	f000 fe2a 	bl	800a4bc <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	61e0      	str	r0, [r4, #28]
 800986c:	b920      	cbnz	r0, 8009878 <_dtoa_r+0x38>
 800986e:	4bae      	ldr	r3, [pc, #696]	; (8009b28 <_dtoa_r+0x2e8>)
 8009870:	21ef      	movs	r1, #239	; 0xef
 8009872:	48ae      	ldr	r0, [pc, #696]	; (8009b2c <_dtoa_r+0x2ec>)
 8009874:	f7ff ff3c 	bl	80096f0 <__assert_func>
 8009878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987c:	6005      	str	r5, [r0, #0]
 800987e:	60c5      	str	r5, [r0, #12]
 8009880:	69e3      	ldr	r3, [r4, #28]
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	b151      	cbz	r1, 800989c <_dtoa_r+0x5c>
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	604a      	str	r2, [r1, #4]
 800988a:	2301      	movs	r3, #1
 800988c:	4093      	lsls	r3, r2
 800988e:	608b      	str	r3, [r1, #8]
 8009890:	4620      	mov	r0, r4
 8009892:	f000 ff07 	bl	800a6a4 <_Bfree>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	1e3b      	subs	r3, r7, #0
 800989e:	bfbb      	ittet	lt
 80098a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	9303      	strlt	r3, [sp, #12]
 80098a6:	2300      	movge	r3, #0
 80098a8:	2201      	movlt	r2, #1
 80098aa:	bfac      	ite	ge
 80098ac:	f8c8 3000 	strge.w	r3, [r8]
 80098b0:	f8c8 2000 	strlt.w	r2, [r8]
 80098b4:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <_dtoa_r+0x2f0>)
 80098b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80098ba:	ea33 0308 	bics.w	r3, r3, r8
 80098be:	d11b      	bne.n	80098f8 <_dtoa_r+0xb8>
 80098c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098cc:	4333      	orrs	r3, r6
 80098ce:	f000 8593 	beq.w	800a3f8 <_dtoa_r+0xbb8>
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	b963      	cbnz	r3, 80098f0 <_dtoa_r+0xb0>
 80098d6:	4b97      	ldr	r3, [pc, #604]	; (8009b34 <_dtoa_r+0x2f4>)
 80098d8:	e027      	b.n	800992a <_dtoa_r+0xea>
 80098da:	4b97      	ldr	r3, [pc, #604]	; (8009b38 <_dtoa_r+0x2f8>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9800      	ldr	r0, [sp, #0]
 80098e6:	b013      	add	sp, #76	; 0x4c
 80098e8:	ecbd 8b04 	vpop	{d8-d9}
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4b90      	ldr	r3, [pc, #576]	; (8009b34 <_dtoa_r+0x2f4>)
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	3303      	adds	r3, #3
 80098f6:	e7f3      	b.n	80098e0 <_dtoa_r+0xa0>
 80098f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	ec51 0b17 	vmov	r0, r1, d7
 8009902:	eeb0 8a47 	vmov.f32	s16, s14
 8009906:	eef0 8a67 	vmov.f32	s17, s15
 800990a:	2300      	movs	r3, #0
 800990c:	f7f7 f8e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009910:	4681      	mov	r9, r0
 8009912:	b160      	cbz	r0, 800992e <_dtoa_r+0xee>
 8009914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009916:	2301      	movs	r3, #1
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8568 	beq.w	800a3f2 <_dtoa_r+0xbb2>
 8009922:	4b86      	ldr	r3, [pc, #536]	; (8009b3c <_dtoa_r+0x2fc>)
 8009924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	3b01      	subs	r3, #1
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	e7da      	b.n	80098e4 <_dtoa_r+0xa4>
 800992e:	aa10      	add	r2, sp, #64	; 0x40
 8009930:	a911      	add	r1, sp, #68	; 0x44
 8009932:	4620      	mov	r0, r4
 8009934:	eeb0 0a48 	vmov.f32	s0, s16
 8009938:	eef0 0a68 	vmov.f32	s1, s17
 800993c:	f001 f994 	bl	800ac68 <__d2b>
 8009940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009944:	4682      	mov	sl, r0
 8009946:	2d00      	cmp	r5, #0
 8009948:	d07f      	beq.n	8009a4a <_dtoa_r+0x20a>
 800994a:	ee18 3a90 	vmov	r3, s17
 800994e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009956:	ec51 0b18 	vmov	r0, r1, d8
 800995a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800995e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009966:	4619      	mov	r1, r3
 8009968:	2200      	movs	r2, #0
 800996a:	4b75      	ldr	r3, [pc, #468]	; (8009b40 <_dtoa_r+0x300>)
 800996c:	f7f6 fc94 	bl	8000298 <__aeabi_dsub>
 8009970:	a367      	add	r3, pc, #412	; (adr r3, 8009b10 <_dtoa_r+0x2d0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe47 	bl	8000608 <__aeabi_dmul>
 800997a:	a367      	add	r3, pc, #412	; (adr r3, 8009b18 <_dtoa_r+0x2d8>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fc8c 	bl	800029c <__adddf3>
 8009984:	4606      	mov	r6, r0
 8009986:	4628      	mov	r0, r5
 8009988:	460f      	mov	r7, r1
 800998a:	f7f6 fdd3 	bl	8000534 <__aeabi_i2d>
 800998e:	a364      	add	r3, pc, #400	; (adr r3, 8009b20 <_dtoa_r+0x2e0>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fe38 	bl	8000608 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4630      	mov	r0, r6
 800999e:	4639      	mov	r1, r7
 80099a0:	f7f6 fc7c 	bl	800029c <__adddf3>
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	f7f7 f8de 	bl	8000b68 <__aeabi_d2iz>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4683      	mov	fp, r0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f7 f899 	bl	8000aec <__aeabi_dcmplt>
 80099ba:	b148      	cbz	r0, 80099d0 <_dtoa_r+0x190>
 80099bc:	4658      	mov	r0, fp
 80099be:	f7f6 fdb9 	bl	8000534 <__aeabi_i2d>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	f7f7 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ca:	b908      	cbnz	r0, 80099d0 <_dtoa_r+0x190>
 80099cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099d0:	f1bb 0f16 	cmp.w	fp, #22
 80099d4:	d857      	bhi.n	8009a86 <_dtoa_r+0x246>
 80099d6:	4b5b      	ldr	r3, [pc, #364]	; (8009b44 <_dtoa_r+0x304>)
 80099d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	ec51 0b18 	vmov	r0, r1, d8
 80099e4:	f7f7 f882 	bl	8000aec <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d04e      	beq.n	8009a8a <_dtoa_r+0x24a>
 80099ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099f0:	2300      	movs	r3, #0
 80099f2:	930c      	str	r3, [sp, #48]	; 0x30
 80099f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099f6:	1b5b      	subs	r3, r3, r5
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	bf45      	ittet	mi
 80099fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a00:	9305      	strmi	r3, [sp, #20]
 8009a02:	2300      	movpl	r3, #0
 8009a04:	2300      	movmi	r3, #0
 8009a06:	9206      	str	r2, [sp, #24]
 8009a08:	bf54      	ite	pl
 8009a0a:	9305      	strpl	r3, [sp, #20]
 8009a0c:	9306      	strmi	r3, [sp, #24]
 8009a0e:	f1bb 0f00 	cmp.w	fp, #0
 8009a12:	db3c      	blt.n	8009a8e <_dtoa_r+0x24e>
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009a1a:	445b      	add	r3, fp
 8009a1c:	9306      	str	r3, [sp, #24]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9308      	str	r3, [sp, #32]
 8009a22:	9b07      	ldr	r3, [sp, #28]
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d868      	bhi.n	8009afa <_dtoa_r+0x2ba>
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	bfc4      	itt	gt
 8009a2c:	3b04      	subgt	r3, #4
 8009a2e:	9307      	strgt	r3, [sp, #28]
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	f1a3 0302 	sub.w	r3, r3, #2
 8009a36:	bfcc      	ite	gt
 8009a38:	2500      	movgt	r5, #0
 8009a3a:	2501      	movle	r5, #1
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	f200 8085 	bhi.w	8009b4c <_dtoa_r+0x30c>
 8009a42:	e8df f003 	tbb	[pc, r3]
 8009a46:	3b2e      	.short	0x3b2e
 8009a48:	5839      	.short	0x5839
 8009a4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a4e:	441d      	add	r5, r3
 8009a50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	bfc1      	itttt	gt
 8009a58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a68:	bfd6      	itet	le
 8009a6a:	f1c3 0320 	rsble	r3, r3, #32
 8009a6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a72:	fa06 f003 	lslle.w	r0, r6, r3
 8009a76:	f7f6 fd4d 	bl	8000514 <__aeabi_ui2d>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a80:	3d01      	subs	r5, #1
 8009a82:	920e      	str	r2, [sp, #56]	; 0x38
 8009a84:	e76f      	b.n	8009966 <_dtoa_r+0x126>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b3      	b.n	80099f2 <_dtoa_r+0x1b2>
 8009a8a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a8c:	e7b2      	b.n	80099f4 <_dtoa_r+0x1b4>
 8009a8e:	9b05      	ldr	r3, [sp, #20]
 8009a90:	eba3 030b 	sub.w	r3, r3, fp
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f1cb 0300 	rsb	r3, fp, #0
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa0:	e7bf      	b.n	8009a22 <_dtoa_r+0x1e2>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dc52      	bgt.n	8009b52 <_dtoa_r+0x312>
 8009aac:	2301      	movs	r3, #1
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab6:	e00b      	b.n	8009ad0 <_dtoa_r+0x290>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e7f3      	b.n	8009aa4 <_dtoa_r+0x264>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	445b      	add	r3, fp
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	bfb8      	it	lt
 8009ace:	2301      	movlt	r3, #1
 8009ad0:	69e0      	ldr	r0, [r4, #28]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	f102 0614 	add.w	r6, r2, #20
 8009ada:	429e      	cmp	r6, r3
 8009adc:	d93d      	bls.n	8009b5a <_dtoa_r+0x31a>
 8009ade:	6041      	str	r1, [r0, #4]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fd9f 	bl	800a624 <_Balloc>
 8009ae6:	9000      	str	r0, [sp, #0]
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d139      	bne.n	8009b60 <_dtoa_r+0x320>
 8009aec:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <_dtoa_r+0x308>)
 8009aee:	4602      	mov	r2, r0
 8009af0:	f240 11af 	movw	r1, #431	; 0x1af
 8009af4:	e6bd      	b.n	8009872 <_dtoa_r+0x32>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e7e1      	b.n	8009abe <_dtoa_r+0x27e>
 8009afa:	2501      	movs	r5, #1
 8009afc:	2300      	movs	r3, #0
 8009afe:	9307      	str	r3, [sp, #28]
 8009b00:	9509      	str	r5, [sp, #36]	; 0x24
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2312      	movs	r3, #18
 8009b0e:	e7d1      	b.n	8009ab4 <_dtoa_r+0x274>
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800cf31 	.word	0x0800cf31
 8009b2c:	0800cf48 	.word	0x0800cf48
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800cf2d 	.word	0x0800cf2d
 8009b38:	0800cf24 	.word	0x0800cf24
 8009b3c:	0800cec5 	.word	0x0800cec5
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	0800d038 	.word	0x0800d038
 8009b48:	0800cfa0 	.word	0x0800cfa0
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	e7d7      	b.n	8009b02 <_dtoa_r+0x2c2>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	e7ba      	b.n	8009ad0 <_dtoa_r+0x290>
 8009b5a:	3101      	adds	r1, #1
 8009b5c:	0052      	lsls	r2, r2, #1
 8009b5e:	e7ba      	b.n	8009ad6 <_dtoa_r+0x296>
 8009b60:	69e3      	ldr	r3, [r4, #28]
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	2b0e      	cmp	r3, #14
 8009b6a:	f200 80a8 	bhi.w	8009cbe <_dtoa_r+0x47e>
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	f000 80a5 	beq.w	8009cbe <_dtoa_r+0x47e>
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	dd38      	ble.n	8009bec <_dtoa_r+0x3ac>
 8009b7a:	4bc0      	ldr	r3, [pc, #768]	; (8009e7c <_dtoa_r+0x63c>)
 8009b7c:	f00b 020f 	and.w	r2, fp, #15
 8009b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b90:	d019      	beq.n	8009bc6 <_dtoa_r+0x386>
 8009b92:	4bbb      	ldr	r3, [pc, #748]	; (8009e80 <_dtoa_r+0x640>)
 8009b94:	ec51 0b18 	vmov	r0, r1, d8
 8009b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b9c:	f7f6 fe5e 	bl	800085c <__aeabi_ddiv>
 8009ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba4:	f008 080f 	and.w	r8, r8, #15
 8009ba8:	2503      	movs	r5, #3
 8009baa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e80 <_dtoa_r+0x640>
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	d10a      	bne.n	8009bca <_dtoa_r+0x38a>
 8009bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	f7f6 fe4e 	bl	800085c <__aeabi_ddiv>
 8009bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc4:	e02b      	b.n	8009c1e <_dtoa_r+0x3de>
 8009bc6:	2502      	movs	r5, #2
 8009bc8:	e7ef      	b.n	8009baa <_dtoa_r+0x36a>
 8009bca:	f018 0f01 	tst.w	r8, #1
 8009bce:	d008      	beq.n	8009be2 <_dtoa_r+0x3a2>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009bd8:	f7f6 fd16 	bl	8000608 <__aeabi_dmul>
 8009bdc:	3501      	adds	r5, #1
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009be6:	f109 0908 	add.w	r9, r9, #8
 8009bea:	e7e0      	b.n	8009bae <_dtoa_r+0x36e>
 8009bec:	f000 809f 	beq.w	8009d2e <_dtoa_r+0x4ee>
 8009bf0:	f1cb 0600 	rsb	r6, fp, #0
 8009bf4:	4ba1      	ldr	r3, [pc, #644]	; (8009e7c <_dtoa_r+0x63c>)
 8009bf6:	4fa2      	ldr	r7, [pc, #648]	; (8009e80 <_dtoa_r+0x640>)
 8009bf8:	f006 020f 	and.w	r2, r6, #15
 8009bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	ec51 0b18 	vmov	r0, r1, d8
 8009c08:	f7f6 fcfe 	bl	8000608 <__aeabi_dmul>
 8009c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c10:	1136      	asrs	r6, r6, #4
 8009c12:	2300      	movs	r3, #0
 8009c14:	2502      	movs	r5, #2
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d17e      	bne.n	8009d18 <_dtoa_r+0x4d8>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d0      	bne.n	8009bc0 <_dtoa_r+0x380>
 8009c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8084 	beq.w	8009d32 <_dtoa_r+0x4f2>
 8009c2a:	4b96      	ldr	r3, [pc, #600]	; (8009e84 <_dtoa_r+0x644>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 ff5b 	bl	8000aec <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d07b      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d078      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dd39      	ble.n	8009cba <_dtoa_r+0x47a>
 8009c46:	4b90      	ldr	r3, [pc, #576]	; (8009e88 <_dtoa_r+0x648>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fcdb 	bl	8000608 <__aeabi_dmul>
 8009c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c56:	9e01      	ldr	r6, [sp, #4]
 8009c58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7f6 fc66 	bl	8000534 <__aeabi_i2d>
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	f7f6 fccc 	bl	8000608 <__aeabi_dmul>
 8009c70:	4b86      	ldr	r3, [pc, #536]	; (8009e8c <_dtoa_r+0x64c>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fb12 	bl	800029c <__adddf3>
 8009c78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	d158      	bne.n	8009d38 <_dtoa_r+0x4f8>
 8009c86:	4b82      	ldr	r3, [pc, #520]	; (8009e90 <_dtoa_r+0x650>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fb03 	bl	8000298 <__aeabi_dsub>
 8009c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c96:	4680      	mov	r8, r0
 8009c98:	4689      	mov	r9, r1
 8009c9a:	f7f6 ff45 	bl	8000b28 <__aeabi_dcmpgt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8296 	bne.w	800a1d0 <_dtoa_r+0x990>
 8009ca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ca8:	4640      	mov	r0, r8
 8009caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f040 8289 	bne.w	800a1cc <_dtoa_r+0x98c>
 8009cba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f2c0 814e 	blt.w	8009f62 <_dtoa_r+0x722>
 8009cc6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cca:	f300 814a 	bgt.w	8009f62 <_dtoa_r+0x722>
 8009cce:	4b6b      	ldr	r3, [pc, #428]	; (8009e7c <_dtoa_r+0x63c>)
 8009cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f280 80dc 	bge.w	8009e98 <_dtoa_r+0x658>
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f300 80d8 	bgt.w	8009e98 <_dtoa_r+0x658>
 8009ce8:	f040 826f 	bne.w	800a1ca <_dtoa_r+0x98a>
 8009cec:	4b68      	ldr	r3, [pc, #416]	; (8009e90 <_dtoa_r+0x650>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fc88 	bl	8000608 <__aeabi_dmul>
 8009cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cfc:	f7f6 ff0a 	bl	8000b14 <__aeabi_dcmpge>
 8009d00:	9e04      	ldr	r6, [sp, #16]
 8009d02:	4637      	mov	r7, r6
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 8245 	bne.w	800a194 <_dtoa_r+0x954>
 8009d0a:	9d00      	ldr	r5, [sp, #0]
 8009d0c:	2331      	movs	r3, #49	; 0x31
 8009d0e:	f805 3b01 	strb.w	r3, [r5], #1
 8009d12:	f10b 0b01 	add.w	fp, fp, #1
 8009d16:	e241      	b.n	800a19c <_dtoa_r+0x95c>
 8009d18:	07f2      	lsls	r2, r6, #31
 8009d1a:	d505      	bpl.n	8009d28 <_dtoa_r+0x4e8>
 8009d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d20:	f7f6 fc72 	bl	8000608 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	2301      	movs	r3, #1
 8009d28:	1076      	asrs	r6, r6, #1
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	e773      	b.n	8009c16 <_dtoa_r+0x3d6>
 8009d2e:	2502      	movs	r5, #2
 8009d30:	e775      	b.n	8009c1e <_dtoa_r+0x3de>
 8009d32:	9e04      	ldr	r6, [sp, #16]
 8009d34:	465f      	mov	r7, fp
 8009d36:	e792      	b.n	8009c5e <_dtoa_r+0x41e>
 8009d38:	9900      	ldr	r1, [sp, #0]
 8009d3a:	4b50      	ldr	r3, [pc, #320]	; (8009e7c <_dtoa_r+0x63c>)
 8009d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d40:	4431      	add	r1, r6
 8009d42:	9102      	str	r1, [sp, #8]
 8009d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d46:	eeb0 9a47 	vmov.f32	s18, s14
 8009d4a:	eef0 9a67 	vmov.f32	s19, s15
 8009d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d044      	beq.n	8009de4 <_dtoa_r+0x5a4>
 8009d5a:	494e      	ldr	r1, [pc, #312]	; (8009e94 <_dtoa_r+0x654>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd7d 	bl	800085c <__aeabi_ddiv>
 8009d62:	ec53 2b19 	vmov	r2, r3, d9
 8009d66:	f7f6 fa97 	bl	8000298 <__aeabi_dsub>
 8009d6a:	9d00      	ldr	r5, [sp, #0]
 8009d6c:	ec41 0b19 	vmov	d9, r0, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7f6 fef8 	bl	8000b68 <__aeabi_d2iz>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f7f6 fbdb 	bl	8000534 <__aeabi_i2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 fa87 	bl	8000298 <__aeabi_dsub>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d90:	ec53 2b19 	vmov	r2, r3, d9
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 fea8 	bl	8000aec <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d164      	bne.n	8009e6a <_dtoa_r+0x62a>
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	4937      	ldr	r1, [pc, #220]	; (8009e84 <_dtoa_r+0x644>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa76 	bl	8000298 <__aeabi_dsub>
 8009dac:	ec53 2b19 	vmov	r2, r3, d9
 8009db0:	f7f6 fe9c 	bl	8000aec <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b6 	bne.w	8009f26 <_dtoa_r+0x6e6>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	f43f af7c 	beq.w	8009cba <_dtoa_r+0x47a>
 8009dc2:	4b31      	ldr	r3, [pc, #196]	; (8009e88 <_dtoa_r+0x648>)
 8009dc4:	ec51 0b19 	vmov	r0, r1, d9
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f7f6 fc1d 	bl	8000608 <__aeabi_dmul>
 8009dce:	4b2e      	ldr	r3, [pc, #184]	; (8009e88 <_dtoa_r+0x648>)
 8009dd0:	ec41 0b19 	vmov	d9, r0, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fc15 	bl	8000608 <__aeabi_dmul>
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	e7c5      	b.n	8009d70 <_dtoa_r+0x530>
 8009de4:	ec51 0b17 	vmov	r0, r1, d7
 8009de8:	f7f6 fc0e 	bl	8000608 <__aeabi_dmul>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	9d00      	ldr	r5, [sp, #0]
 8009df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df2:	ec41 0b19 	vmov	d9, r0, r1
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f7f6 feb5 	bl	8000b68 <__aeabi_d2iz>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	f7f6 fb98 	bl	8000534 <__aeabi_i2d>
 8009e04:	3630      	adds	r6, #48	; 0x30
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa43 	bl	8000298 <__aeabi_dsub>
 8009e12:	f805 6b01 	strb.w	r6, [r5], #1
 8009e16:	9b02      	ldr	r3, [sp, #8]
 8009e18:	429d      	cmp	r5, r3
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	d124      	bne.n	8009e6e <_dtoa_r+0x62e>
 8009e24:	4b1b      	ldr	r3, [pc, #108]	; (8009e94 <_dtoa_r+0x654>)
 8009e26:	ec51 0b19 	vmov	r0, r1, d9
 8009e2a:	f7f6 fa37 	bl	800029c <__adddf3>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	f7f6 fe77 	bl	8000b28 <__aeabi_dcmpgt>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d173      	bne.n	8009f26 <_dtoa_r+0x6e6>
 8009e3e:	ec53 2b19 	vmov	r2, r3, d9
 8009e42:	4914      	ldr	r1, [pc, #80]	; (8009e94 <_dtoa_r+0x654>)
 8009e44:	2000      	movs	r0, #0
 8009e46:	f7f6 fa27 	bl	8000298 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fe4b 	bl	8000aec <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f af2f 	beq.w	8009cba <_dtoa_r+0x47a>
 8009e5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e5e:	1e6b      	subs	r3, r5, #1
 8009e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e66:	2b30      	cmp	r3, #48	; 0x30
 8009e68:	d0f8      	beq.n	8009e5c <_dtoa_r+0x61c>
 8009e6a:	46bb      	mov	fp, r7
 8009e6c:	e04a      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <_dtoa_r+0x648>)
 8009e70:	f7f6 fbca 	bl	8000608 <__aeabi_dmul>
 8009e74:	4680      	mov	r8, r0
 8009e76:	4689      	mov	r9, r1
 8009e78:	e7bd      	b.n	8009df6 <_dtoa_r+0x5b6>
 8009e7a:	bf00      	nop
 8009e7c:	0800d038 	.word	0x0800d038
 8009e80:	0800d010 	.word	0x0800d010
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	40240000 	.word	0x40240000
 8009e8c:	401c0000 	.word	0x401c0000
 8009e90:	40140000 	.word	0x40140000
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e9c:	9d00      	ldr	r5, [sp, #0]
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fcd9 	bl	800085c <__aeabi_ddiv>
 8009eaa:	f7f6 fe5d 	bl	8000b68 <__aeabi_d2iz>
 8009eae:	9001      	str	r0, [sp, #4]
 8009eb0:	f7f6 fb40 	bl	8000534 <__aeabi_i2d>
 8009eb4:	4642      	mov	r2, r8
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	9e01      	ldr	r6, [sp, #4]
 8009eca:	9f04      	ldr	r7, [sp, #16]
 8009ecc:	3630      	adds	r6, #48	; 0x30
 8009ece:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed2:	9e00      	ldr	r6, [sp, #0]
 8009ed4:	1bae      	subs	r6, r5, r6
 8009ed6:	42b7      	cmp	r7, r6
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	d134      	bne.n	8009f48 <_dtoa_r+0x708>
 8009ede:	f7f6 f9dd 	bl	800029c <__adddf3>
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	f7f6 fe1d 	bl	8000b28 <__aeabi_dcmpgt>
 8009eee:	b9c8      	cbnz	r0, 8009f24 <_dtoa_r+0x6e4>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8009efc:	b110      	cbz	r0, 8009f04 <_dtoa_r+0x6c4>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	07db      	lsls	r3, r3, #31
 8009f02:	d40f      	bmi.n	8009f24 <_dtoa_r+0x6e4>
 8009f04:	4651      	mov	r1, sl
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fbcc 	bl	800a6a4 <_Bfree>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f10:	702b      	strb	r3, [r5, #0]
 8009f12:	f10b 0301 	add.w	r3, fp, #1
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f43f ace2 	beq.w	80098e4 <_dtoa_r+0xa4>
 8009f20:	601d      	str	r5, [r3, #0]
 8009f22:	e4df      	b.n	80098e4 <_dtoa_r+0xa4>
 8009f24:	465f      	mov	r7, fp
 8009f26:	462b      	mov	r3, r5
 8009f28:	461d      	mov	r5, r3
 8009f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2e:	2a39      	cmp	r2, #57	; 0x39
 8009f30:	d106      	bne.n	8009f40 <_dtoa_r+0x700>
 8009f32:	9a00      	ldr	r2, [sp, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d1f7      	bne.n	8009f28 <_dtoa_r+0x6e8>
 8009f38:	9900      	ldr	r1, [sp, #0]
 8009f3a:	2230      	movs	r2, #48	; 0x30
 8009f3c:	3701      	adds	r7, #1
 8009f3e:	700a      	strb	r2, [r1, #0]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	3201      	adds	r2, #1
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e790      	b.n	8009e6a <_dtoa_r+0x62a>
 8009f48:	4ba3      	ldr	r3, [pc, #652]	; (800a1d8 <_dtoa_r+0x998>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7f6 fb5c 	bl	8000608 <__aeabi_dmul>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	f7f6 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d09e      	beq.n	8009e9e <_dtoa_r+0x65e>
 8009f60:	e7d0      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f000 80ca 	beq.w	800a0fe <_dtoa_r+0x8be>
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	2a01      	cmp	r2, #1
 8009f6e:	f300 80ad 	bgt.w	800a0cc <_dtoa_r+0x88c>
 8009f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80a5 	beq.w	800a0c4 <_dtoa_r+0x884>
 8009f7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f7e:	9e08      	ldr	r6, [sp, #32]
 8009f80:	9d05      	ldr	r5, [sp, #20]
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	441a      	add	r2, r3
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	9a06      	ldr	r2, [sp, #24]
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	441a      	add	r2, r3
 8009f8e:	4620      	mov	r0, r4
 8009f90:	9206      	str	r2, [sp, #24]
 8009f92:	f000 fc3d 	bl	800a810 <__i2b>
 8009f96:	4607      	mov	r7, r0
 8009f98:	b165      	cbz	r5, 8009fb4 <_dtoa_r+0x774>
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd09      	ble.n	8009fb4 <_dtoa_r+0x774>
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	9a05      	ldr	r2, [sp, #20]
 8009fa4:	bfa8      	it	ge
 8009fa6:	462b      	movge	r3, r5
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	9205      	str	r2, [sp, #20]
 8009fac:	9a06      	ldr	r2, [sp, #24]
 8009fae:	1aed      	subs	r5, r5, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	9b08      	ldr	r3, [sp, #32]
 8009fb6:	b1f3      	cbz	r3, 8009ff6 <_dtoa_r+0x7b6>
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80a3 	beq.w	800a106 <_dtoa_r+0x8c6>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd10      	ble.n	8009fe6 <_dtoa_r+0x7a6>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fce1 	bl	800a990 <__pow5mult>
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fc31 	bl	800a83c <__multiply>
 8009fda:	4651      	mov	r1, sl
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fb60 	bl	800a6a4 <_Bfree>
 8009fe4:	46c2      	mov	sl, r8
 8009fe6:	9b08      	ldr	r3, [sp, #32]
 8009fe8:	1b9a      	subs	r2, r3, r6
 8009fea:	d004      	beq.n	8009ff6 <_dtoa_r+0x7b6>
 8009fec:	4651      	mov	r1, sl
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fcce 	bl	800a990 <__pow5mult>
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fc09 	bl	800a810 <__i2b>
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a000:	2b00      	cmp	r3, #0
 800a002:	4606      	mov	r6, r0
 800a004:	f340 8081 	ble.w	800a10a <_dtoa_r+0x8ca>
 800a008:	461a      	mov	r2, r3
 800a00a:	4601      	mov	r1, r0
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fcbf 	bl	800a990 <__pow5mult>
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	2b01      	cmp	r3, #1
 800a016:	4606      	mov	r6, r0
 800a018:	dd7a      	ble.n	800a110 <_dtoa_r+0x8d0>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	6933      	ldr	r3, [r6, #16]
 800a020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a024:	6918      	ldr	r0, [r3, #16]
 800a026:	f000 fba5 	bl	800a774 <__hi0bits>
 800a02a:	f1c0 0020 	rsb	r0, r0, #32
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	4418      	add	r0, r3
 800a032:	f010 001f 	ands.w	r0, r0, #31
 800a036:	f000 8094 	beq.w	800a162 <_dtoa_r+0x922>
 800a03a:	f1c0 0320 	rsb	r3, r0, #32
 800a03e:	2b04      	cmp	r3, #4
 800a040:	f340 8085 	ble.w	800a14e <_dtoa_r+0x90e>
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	f1c0 001c 	rsb	r0, r0, #28
 800a04a:	4403      	add	r3, r0
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	4403      	add	r3, r0
 800a052:	4405      	add	r5, r0
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd05      	ble.n	800a068 <_dtoa_r+0x828>
 800a05c:	4651      	mov	r1, sl
 800a05e:	461a      	mov	r2, r3
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fcef 	bl	800aa44 <__lshift>
 800a066:	4682      	mov	sl, r0
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd05      	ble.n	800a07a <_dtoa_r+0x83a>
 800a06e:	4631      	mov	r1, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fce6 	bl	800aa44 <__lshift>
 800a078:	4606      	mov	r6, r0
 800a07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d072      	beq.n	800a166 <_dtoa_r+0x926>
 800a080:	4631      	mov	r1, r6
 800a082:	4650      	mov	r0, sl
 800a084:	f000 fd4a 	bl	800ab1c <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	da6c      	bge.n	800a166 <_dtoa_r+0x926>
 800a08c:	2300      	movs	r3, #0
 800a08e:	4651      	mov	r1, sl
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fb28 	bl	800a6e8 <__multadd>
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a09e:	4682      	mov	sl, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81b0 	beq.w	800a406 <_dtoa_r+0xbc6>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fb1b 	bl	800a6e8 <__multadd>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	f300 8096 	bgt.w	800a1e8 <_dtoa_r+0x9a8>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	dc59      	bgt.n	800a176 <_dtoa_r+0x936>
 800a0c2:	e091      	b.n	800a1e8 <_dtoa_r+0x9a8>
 800a0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ca:	e758      	b.n	8009f7e <_dtoa_r+0x73e>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	1e5e      	subs	r6, r3, #1
 800a0d0:	9b08      	ldr	r3, [sp, #32]
 800a0d2:	42b3      	cmp	r3, r6
 800a0d4:	bfbf      	itttt	lt
 800a0d6:	9b08      	ldrlt	r3, [sp, #32]
 800a0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a0da:	9608      	strlt	r6, [sp, #32]
 800a0dc:	1af3      	sublt	r3, r6, r3
 800a0de:	bfb4      	ite	lt
 800a0e0:	18d2      	addlt	r2, r2, r3
 800a0e2:	1b9e      	subge	r6, r3, r6
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	bfbc      	itt	lt
 800a0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a0ea:	2600      	movlt	r6, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfb7      	itett	lt
 800a0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a0f8:	1a9d      	sublt	r5, r3, r2
 800a0fa:	2300      	movlt	r3, #0
 800a0fc:	e741      	b.n	8009f82 <_dtoa_r+0x742>
 800a0fe:	9e08      	ldr	r6, [sp, #32]
 800a100:	9d05      	ldr	r5, [sp, #20]
 800a102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a104:	e748      	b.n	8009f98 <_dtoa_r+0x758>
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	e770      	b.n	8009fec <_dtoa_r+0x7ac>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	dc19      	bgt.n	800a144 <_dtoa_r+0x904>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	b9bb      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a11a:	b99b      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a122:	0d1b      	lsrs	r3, r3, #20
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	b183      	cbz	r3, 800a14a <_dtoa_r+0x90a>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	3301      	adds	r3, #1
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	f04f 0801 	mov.w	r8, #1
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f47f af6f 	bne.w	800a01e <_dtoa_r+0x7de>
 800a140:	2001      	movs	r0, #1
 800a142:	e774      	b.n	800a02e <_dtoa_r+0x7ee>
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	e7f6      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14a:	4698      	mov	r8, r3
 800a14c:	e7f4      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14e:	d082      	beq.n	800a056 <_dtoa_r+0x816>
 800a150:	9a05      	ldr	r2, [sp, #20]
 800a152:	331c      	adds	r3, #28
 800a154:	441a      	add	r2, r3
 800a156:	9205      	str	r2, [sp, #20]
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	441a      	add	r2, r3
 800a15c:	441d      	add	r5, r3
 800a15e:	9206      	str	r2, [sp, #24]
 800a160:	e779      	b.n	800a056 <_dtoa_r+0x816>
 800a162:	4603      	mov	r3, r0
 800a164:	e7f4      	b.n	800a150 <_dtoa_r+0x910>
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc37      	bgt.n	800a1dc <_dtoa_r+0x99c>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dd34      	ble.n	800a1dc <_dtoa_r+0x99c>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	b963      	cbnz	r3, 800a194 <_dtoa_r+0x954>
 800a17a:	4631      	mov	r1, r6
 800a17c:	2205      	movs	r2, #5
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fab2 	bl	800a6e8 <__multadd>
 800a184:	4601      	mov	r1, r0
 800a186:	4606      	mov	r6, r0
 800a188:	4650      	mov	r0, sl
 800a18a:	f000 fcc7 	bl	800ab1c <__mcmp>
 800a18e:	2800      	cmp	r0, #0
 800a190:	f73f adbb 	bgt.w	8009d0a <_dtoa_r+0x4ca>
 800a194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a196:	9d00      	ldr	r5, [sp, #0]
 800a198:	ea6f 0b03 	mvn.w	fp, r3
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fa7e 	bl	800a6a4 <_Bfree>
 800a1a8:	2f00      	cmp	r7, #0
 800a1aa:	f43f aeab 	beq.w	8009f04 <_dtoa_r+0x6c4>
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	d005      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b4:	45b8      	cmp	r8, r7
 800a1b6:	d003      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fa72 	bl	800a6a4 <_Bfree>
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fa6e 	bl	800a6a4 <_Bfree>
 800a1c8:	e69c      	b.n	8009f04 <_dtoa_r+0x6c4>
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	e7e1      	b.n	800a194 <_dtoa_r+0x954>
 800a1d0:	46bb      	mov	fp, r7
 800a1d2:	4637      	mov	r7, r6
 800a1d4:	e599      	b.n	8009d0a <_dtoa_r+0x4ca>
 800a1d6:	bf00      	nop
 800a1d8:	40240000 	.word	0x40240000
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80c8 	beq.w	800a374 <_dtoa_r+0xb34>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	dd05      	ble.n	800a1f8 <_dtoa_r+0x9b8>
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fc27 	bl	800aa44 <__lshift>
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	d05b      	beq.n	800a2b6 <_dtoa_r+0xa76>
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fa0f 	bl	800a624 <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b928      	cbnz	r0, 800a216 <_dtoa_r+0x9d6>
 800a20a:	4b83      	ldr	r3, [pc, #524]	; (800a418 <_dtoa_r+0xbd8>)
 800a20c:	4602      	mov	r2, r0
 800a20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a212:	f7ff bb2e 	b.w	8009872 <_dtoa_r+0x32>
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	f107 010c 	add.w	r1, r7, #12
 800a220:	300c      	adds	r0, #12
 800a222:	f7ff fa56 	bl	80096d2 <memcpy>
 800a226:	2201      	movs	r2, #1
 800a228:	4629      	mov	r1, r5
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc0a 	bl	800aa44 <__lshift>
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23a:	4413      	add	r3, r2
 800a23c:	9308      	str	r3, [sp, #32]
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	46b8      	mov	r8, r7
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	4607      	mov	r7, r0
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	3b01      	subs	r3, #1
 800a250:	4650      	mov	r0, sl
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f7ff fa6a 	bl	800972c <quorem>
 800a258:	4641      	mov	r1, r8
 800a25a:	9002      	str	r0, [sp, #8]
 800a25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a260:	4650      	mov	r0, sl
 800a262:	f000 fc5b 	bl	800ab1c <__mcmp>
 800a266:	463a      	mov	r2, r7
 800a268:	9005      	str	r0, [sp, #20]
 800a26a:	4631      	mov	r1, r6
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fc71 	bl	800ab54 <__mdiff>
 800a272:	68c2      	ldr	r2, [r0, #12]
 800a274:	4605      	mov	r5, r0
 800a276:	bb02      	cbnz	r2, 800a2ba <_dtoa_r+0xa7a>
 800a278:	4601      	mov	r1, r0
 800a27a:	4650      	mov	r0, sl
 800a27c:	f000 fc4e 	bl	800ab1c <__mcmp>
 800a280:	4602      	mov	r2, r0
 800a282:	4629      	mov	r1, r5
 800a284:	4620      	mov	r0, r4
 800a286:	9209      	str	r2, [sp, #36]	; 0x24
 800a288:	f000 fa0c 	bl	800a6a4 <_Bfree>
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a290:	9d04      	ldr	r5, [sp, #16]
 800a292:	ea43 0102 	orr.w	r1, r3, r2
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	4319      	orrs	r1, r3
 800a29a:	d110      	bne.n	800a2be <_dtoa_r+0xa7e>
 800a29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2a0:	d029      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd02      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	f883 9000 	strb.w	r9, [r3]
 800a2b4:	e774      	b.n	800a1a0 <_dtoa_r+0x960>
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	e7ba      	b.n	800a230 <_dtoa_r+0x9f0>
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	e7e1      	b.n	800a282 <_dtoa_r+0xa42>
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	db04      	blt.n	800a2ce <_dtoa_r+0xa8e>
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	9906      	ldr	r1, [sp, #24]
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	d120      	bne.n	800a310 <_dtoa_r+0xad0>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dded      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fbb4 	bl	800aa44 <__lshift>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4682      	mov	sl, r0
 800a2e0:	f000 fc1c 	bl	800ab1c <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	dc03      	bgt.n	800a2f0 <_dtoa_r+0xab0>
 800a2e8:	d1e1      	bne.n	800a2ae <_dtoa_r+0xa6e>
 800a2ea:	f019 0f01 	tst.w	r9, #1
 800a2ee:	d0de      	beq.n	800a2ae <_dtoa_r+0xa6e>
 800a2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2f4:	d1d8      	bne.n	800a2a8 <_dtoa_r+0xa68>
 800a2f6:	9a01      	ldr	r2, [sp, #4]
 800a2f8:	2339      	movs	r3, #57	; 0x39
 800a2fa:	7013      	strb	r3, [r2, #0]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	461d      	mov	r5, r3
 800a300:	3b01      	subs	r3, #1
 800a302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a306:	2a39      	cmp	r2, #57	; 0x39
 800a308:	d06c      	beq.n	800a3e4 <_dtoa_r+0xba4>
 800a30a:	3201      	adds	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e747      	b.n	800a1a0 <_dtoa_r+0x960>
 800a310:	2a00      	cmp	r2, #0
 800a312:	dd07      	ble.n	800a324 <_dtoa_r+0xae4>
 800a314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a318:	d0ed      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a31a:	9a01      	ldr	r2, [sp, #4]
 800a31c:	f109 0301 	add.w	r3, r9, #1
 800a320:	7013      	strb	r3, [r2, #0]
 800a322:	e73d      	b.n	800a1a0 <_dtoa_r+0x960>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	9a08      	ldr	r2, [sp, #32]
 800a328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d043      	beq.n	800a3b8 <_dtoa_r+0xb78>
 800a330:	4651      	mov	r1, sl
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f9d6 	bl	800a6e8 <__multadd>
 800a33c:	45b8      	cmp	r8, r7
 800a33e:	4682      	mov	sl, r0
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	f04f 020a 	mov.w	r2, #10
 800a348:	4641      	mov	r1, r8
 800a34a:	4620      	mov	r0, r4
 800a34c:	d107      	bne.n	800a35e <_dtoa_r+0xb1e>
 800a34e:	f000 f9cb 	bl	800a6e8 <__multadd>
 800a352:	4680      	mov	r8, r0
 800a354:	4607      	mov	r7, r0
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	3301      	adds	r3, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	e775      	b.n	800a24a <_dtoa_r+0xa0a>
 800a35e:	f000 f9c3 	bl	800a6e8 <__multadd>
 800a362:	4639      	mov	r1, r7
 800a364:	4680      	mov	r8, r0
 800a366:	2300      	movs	r3, #0
 800a368:	220a      	movs	r2, #10
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f9bc 	bl	800a6e8 <__multadd>
 800a370:	4607      	mov	r7, r0
 800a372:	e7f0      	b.n	800a356 <_dtoa_r+0xb16>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	9d00      	ldr	r5, [sp, #0]
 800a37a:	4631      	mov	r1, r6
 800a37c:	4650      	mov	r0, sl
 800a37e:	f7ff f9d5 	bl	800972c <quorem>
 800a382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	f805 9b01 	strb.w	r9, [r5], #1
 800a38c:	1aea      	subs	r2, r5, r3
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	4293      	cmp	r3, r2
 800a392:	dd07      	ble.n	800a3a4 <_dtoa_r+0xb64>
 800a394:	4651      	mov	r1, sl
 800a396:	2300      	movs	r3, #0
 800a398:	220a      	movs	r2, #10
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f9a4 	bl	800a6e8 <__multadd>
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	e7ea      	b.n	800a37a <_dtoa_r+0xb3a>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfc8      	it	gt
 800a3aa:	461d      	movgt	r5, r3
 800a3ac:	9b00      	ldr	r3, [sp, #0]
 800a3ae:	bfd8      	it	le
 800a3b0:	2501      	movle	r5, #1
 800a3b2:	441d      	add	r5, r3
 800a3b4:	f04f 0800 	mov.w	r8, #0
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 fb41 	bl	800aa44 <__lshift>
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	f000 fba9 	bl	800ab1c <__mcmp>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	dc96      	bgt.n	800a2fc <_dtoa_r+0xabc>
 800a3ce:	d102      	bne.n	800a3d6 <_dtoa_r+0xb96>
 800a3d0:	f019 0f01 	tst.w	r9, #1
 800a3d4:	d192      	bne.n	800a2fc <_dtoa_r+0xabc>
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	461d      	mov	r5, r3
 800a3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3de:	2a30      	cmp	r2, #48	; 0x30
 800a3e0:	d0fa      	beq.n	800a3d8 <_dtoa_r+0xb98>
 800a3e2:	e6dd      	b.n	800a1a0 <_dtoa_r+0x960>
 800a3e4:	9a00      	ldr	r2, [sp, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d189      	bne.n	800a2fe <_dtoa_r+0xabe>
 800a3ea:	f10b 0b01 	add.w	fp, fp, #1
 800a3ee:	2331      	movs	r3, #49	; 0x31
 800a3f0:	e796      	b.n	800a320 <_dtoa_r+0xae0>
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <_dtoa_r+0xbdc>)
 800a3f4:	f7ff ba99 	b.w	800992a <_dtoa_r+0xea>
 800a3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f aa6d 	bne.w	80098da <_dtoa_r+0x9a>
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <_dtoa_r+0xbe0>)
 800a402:	f7ff ba92 	b.w	800992a <_dtoa_r+0xea>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dcb5      	bgt.n	800a378 <_dtoa_r+0xb38>
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	f73f aeb1 	bgt.w	800a176 <_dtoa_r+0x936>
 800a414:	e7b0      	b.n	800a378 <_dtoa_r+0xb38>
 800a416:	bf00      	nop
 800a418:	0800cfa0 	.word	0x0800cfa0
 800a41c:	0800cec4 	.word	0x0800cec4
 800a420:	0800cf24 	.word	0x0800cf24

0800a424 <_free_r>:
 800a424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a426:	2900      	cmp	r1, #0
 800a428:	d044      	beq.n	800a4b4 <_free_r+0x90>
 800a42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42e:	9001      	str	r0, [sp, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f1a1 0404 	sub.w	r4, r1, #4
 800a436:	bfb8      	it	lt
 800a438:	18e4      	addlt	r4, r4, r3
 800a43a:	f000 f8e7 	bl	800a60c <__malloc_lock>
 800a43e:	4a1e      	ldr	r2, [pc, #120]	; (800a4b8 <_free_r+0x94>)
 800a440:	9801      	ldr	r0, [sp, #4]
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	b933      	cbnz	r3, 800a454 <_free_r+0x30>
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	6014      	str	r4, [r2, #0]
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a450:	f000 b8e2 	b.w	800a618 <__malloc_unlock>
 800a454:	42a3      	cmp	r3, r4
 800a456:	d908      	bls.n	800a46a <_free_r+0x46>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf01      	itttt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	1949      	addeq	r1, r1, r5
 800a466:	6021      	streq	r1, [r4, #0]
 800a468:	e7ed      	b.n	800a446 <_free_r+0x22>
 800a46a:	461a      	mov	r2, r3
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b10b      	cbz	r3, 800a474 <_free_r+0x50>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d9fa      	bls.n	800a46a <_free_r+0x46>
 800a474:	6811      	ldr	r1, [r2, #0]
 800a476:	1855      	adds	r5, r2, r1
 800a478:	42a5      	cmp	r5, r4
 800a47a:	d10b      	bne.n	800a494 <_free_r+0x70>
 800a47c:	6824      	ldr	r4, [r4, #0]
 800a47e:	4421      	add	r1, r4
 800a480:	1854      	adds	r4, r2, r1
 800a482:	42a3      	cmp	r3, r4
 800a484:	6011      	str	r1, [r2, #0]
 800a486:	d1e0      	bne.n	800a44a <_free_r+0x26>
 800a488:	681c      	ldr	r4, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	6053      	str	r3, [r2, #4]
 800a48e:	440c      	add	r4, r1
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	e7da      	b.n	800a44a <_free_r+0x26>
 800a494:	d902      	bls.n	800a49c <_free_r+0x78>
 800a496:	230c      	movs	r3, #12
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	e7d6      	b.n	800a44a <_free_r+0x26>
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf04      	itt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	bf04      	itt	eq
 800a4ac:	1949      	addeq	r1, r1, r5
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	6054      	str	r4, [r2, #4]
 800a4b2:	e7ca      	b.n	800a44a <_free_r+0x26>
 800a4b4:	b003      	add	sp, #12
 800a4b6:	bd30      	pop	{r4, r5, pc}
 800a4b8:	200010a8 	.word	0x200010a8

0800a4bc <malloc>:
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <malloc+0xc>)
 800a4be:	4601      	mov	r1, r0
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	f000 b823 	b.w	800a50c <_malloc_r>
 800a4c6:	bf00      	nop
 800a4c8:	20000454 	.word	0x20000454

0800a4cc <sbrk_aligned>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4e0e      	ldr	r6, [pc, #56]	; (800a508 <sbrk_aligned+0x3c>)
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	6831      	ldr	r1, [r6, #0]
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b911      	cbnz	r1, 800a4de <sbrk_aligned+0x12>
 800a4d8:	f000 fea8 	bl	800b22c <_sbrk_r>
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f000 fea3 	bl	800b22c <_sbrk_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	d00a      	beq.n	800a500 <sbrk_aligned+0x34>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d007      	beq.n	800a504 <sbrk_aligned+0x38>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f000 fe98 	bl	800b22c <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d101      	bne.n	800a504 <sbrk_aligned+0x38>
 800a500:	f04f 34ff 	mov.w	r4, #4294967295
 800a504:	4620      	mov	r0, r4
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	200010ac 	.word	0x200010ac

0800a50c <_malloc_r>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4607      	mov	r7, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d905      	bls.n	800a534 <_malloc_r+0x28>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	2600      	movs	r6, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a608 <_malloc_r+0xfc>
 800a538:	f000 f868 	bl	800a60c <__malloc_lock>
 800a53c:	f8d8 3000 	ldr.w	r3, [r8]
 800a540:	461c      	mov	r4, r3
 800a542:	bb5c      	cbnz	r4, 800a59c <_malloc_r+0x90>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ffc0 	bl	800a4cc <sbrk_aligned>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	4604      	mov	r4, r0
 800a550:	d155      	bne.n	800a5fe <_malloc_r+0xf2>
 800a552:	f8d8 4000 	ldr.w	r4, [r8]
 800a556:	4626      	mov	r6, r4
 800a558:	2e00      	cmp	r6, #0
 800a55a:	d145      	bne.n	800a5e8 <_malloc_r+0xdc>
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	d048      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	4631      	mov	r1, r6
 800a564:	4638      	mov	r0, r7
 800a566:	eb04 0903 	add.w	r9, r4, r3
 800a56a:	f000 fe5f 	bl	800b22c <_sbrk_r>
 800a56e:	4581      	cmp	r9, r0
 800a570:	d13f      	bne.n	800a5f2 <_malloc_r+0xe6>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	1a6d      	subs	r5, r5, r1
 800a576:	4629      	mov	r1, r5
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff ffa7 	bl	800a4cc <sbrk_aligned>
 800a57e:	3001      	adds	r0, #1
 800a580:	d037      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	442b      	add	r3, r5
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	f8d8 3000 	ldr.w	r3, [r8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d038      	beq.n	800a602 <_malloc_r+0xf6>
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	42a2      	cmp	r2, r4
 800a594:	d12b      	bne.n	800a5ee <_malloc_r+0xe2>
 800a596:	2200      	movs	r2, #0
 800a598:	605a      	str	r2, [r3, #4]
 800a59a:	e00f      	b.n	800a5bc <_malloc_r+0xb0>
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	1b52      	subs	r2, r2, r5
 800a5a0:	d41f      	bmi.n	800a5e2 <_malloc_r+0xd6>
 800a5a2:	2a0b      	cmp	r2, #11
 800a5a4:	d917      	bls.n	800a5d6 <_malloc_r+0xca>
 800a5a6:	1961      	adds	r1, r4, r5
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	6025      	str	r5, [r4, #0]
 800a5ac:	bf18      	it	ne
 800a5ae:	6059      	strne	r1, [r3, #4]
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	bf08      	it	eq
 800a5b4:	f8c8 1000 	streq.w	r1, [r8]
 800a5b8:	5162      	str	r2, [r4, r5]
 800a5ba:	604b      	str	r3, [r1, #4]
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f104 060b 	add.w	r6, r4, #11
 800a5c2:	f000 f829 	bl	800a618 <__malloc_unlock>
 800a5c6:	f026 0607 	bic.w	r6, r6, #7
 800a5ca:	1d23      	adds	r3, r4, #4
 800a5cc:	1af2      	subs	r2, r6, r3
 800a5ce:	d0ae      	beq.n	800a52e <_malloc_r+0x22>
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	50a3      	str	r3, [r4, r2]
 800a5d4:	e7ab      	b.n	800a52e <_malloc_r+0x22>
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	6862      	ldr	r2, [r4, #4]
 800a5da:	d1dd      	bne.n	800a598 <_malloc_r+0x8c>
 800a5dc:	f8c8 2000 	str.w	r2, [r8]
 800a5e0:	e7ec      	b.n	800a5bc <_malloc_r+0xb0>
 800a5e2:	4623      	mov	r3, r4
 800a5e4:	6864      	ldr	r4, [r4, #4]
 800a5e6:	e7ac      	b.n	800a542 <_malloc_r+0x36>
 800a5e8:	4634      	mov	r4, r6
 800a5ea:	6876      	ldr	r6, [r6, #4]
 800a5ec:	e7b4      	b.n	800a558 <_malloc_r+0x4c>
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	e7cc      	b.n	800a58c <_malloc_r+0x80>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f000 f80e 	bl	800a618 <__malloc_unlock>
 800a5fc:	e797      	b.n	800a52e <_malloc_r+0x22>
 800a5fe:	6025      	str	r5, [r4, #0]
 800a600:	e7dc      	b.n	800a5bc <_malloc_r+0xb0>
 800a602:	605b      	str	r3, [r3, #4]
 800a604:	deff      	udf	#255	; 0xff
 800a606:	bf00      	nop
 800a608:	200010a8 	.word	0x200010a8

0800a60c <__malloc_lock>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__malloc_lock+0x8>)
 800a60e:	f7ff b85e 	b.w	80096ce <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	200010a4 	.word	0x200010a4

0800a618 <__malloc_unlock>:
 800a618:	4801      	ldr	r0, [pc, #4]	; (800a620 <__malloc_unlock+0x8>)
 800a61a:	f7ff b859 	b.w	80096d0 <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	200010a4 	.word	0x200010a4

0800a624 <_Balloc>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	69c6      	ldr	r6, [r0, #28]
 800a628:	4604      	mov	r4, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	b976      	cbnz	r6, 800a64c <_Balloc+0x28>
 800a62e:	2010      	movs	r0, #16
 800a630:	f7ff ff44 	bl	800a4bc <malloc>
 800a634:	4602      	mov	r2, r0
 800a636:	61e0      	str	r0, [r4, #28]
 800a638:	b920      	cbnz	r0, 800a644 <_Balloc+0x20>
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <_Balloc+0x78>)
 800a63c:	4818      	ldr	r0, [pc, #96]	; (800a6a0 <_Balloc+0x7c>)
 800a63e:	216b      	movs	r1, #107	; 0x6b
 800a640:	f7ff f856 	bl	80096f0 <__assert_func>
 800a644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a648:	6006      	str	r6, [r0, #0]
 800a64a:	60c6      	str	r6, [r0, #12]
 800a64c:	69e6      	ldr	r6, [r4, #28]
 800a64e:	68f3      	ldr	r3, [r6, #12]
 800a650:	b183      	cbz	r3, 800a674 <_Balloc+0x50>
 800a652:	69e3      	ldr	r3, [r4, #28]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a65a:	b9b8      	cbnz	r0, 800a68c <_Balloc+0x68>
 800a65c:	2101      	movs	r1, #1
 800a65e:	fa01 f605 	lsl.w	r6, r1, r5
 800a662:	1d72      	adds	r2, r6, #5
 800a664:	0092      	lsls	r2, r2, #2
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fdf7 	bl	800b25a <_calloc_r>
 800a66c:	b160      	cbz	r0, 800a688 <_Balloc+0x64>
 800a66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a672:	e00e      	b.n	800a692 <_Balloc+0x6e>
 800a674:	2221      	movs	r2, #33	; 0x21
 800a676:	2104      	movs	r1, #4
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fdee 	bl	800b25a <_calloc_r>
 800a67e:	69e3      	ldr	r3, [r4, #28]
 800a680:	60f0      	str	r0, [r6, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e4      	bne.n	800a652 <_Balloc+0x2e>
 800a688:	2000      	movs	r0, #0
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	6802      	ldr	r2, [r0, #0]
 800a68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a692:	2300      	movs	r3, #0
 800a694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a698:	e7f7      	b.n	800a68a <_Balloc+0x66>
 800a69a:	bf00      	nop
 800a69c:	0800cf31 	.word	0x0800cf31
 800a6a0:	0800cfb1 	.word	0x0800cfb1

0800a6a4 <_Bfree>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	69c6      	ldr	r6, [r0, #28]
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	b976      	cbnz	r6, 800a6cc <_Bfree+0x28>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	f7ff ff04 	bl	800a4bc <malloc>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	61e8      	str	r0, [r5, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_Bfree+0x20>
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <_Bfree+0x3c>)
 800a6bc:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <_Bfree+0x40>)
 800a6be:	218f      	movs	r1, #143	; 0x8f
 800a6c0:	f7ff f816 	bl	80096f0 <__assert_func>
 800a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c8:	6006      	str	r6, [r0, #0]
 800a6ca:	60c6      	str	r6, [r0, #12]
 800a6cc:	b13c      	cbz	r4, 800a6de <_Bfree+0x3a>
 800a6ce:	69eb      	ldr	r3, [r5, #28]
 800a6d0:	6862      	ldr	r2, [r4, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d8:	6021      	str	r1, [r4, #0]
 800a6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	0800cf31 	.word	0x0800cf31
 800a6e4:	0800cfb1 	.word	0x0800cfb1

0800a6e8 <__multadd>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	690d      	ldr	r5, [r1, #16]
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	461e      	mov	r6, r3
 800a6f4:	f101 0c14 	add.w	ip, r1, #20
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800a6fe:	b299      	uxth	r1, r3
 800a700:	fb02 6101 	mla	r1, r2, r1, r6
 800a704:	0c1e      	lsrs	r6, r3, #16
 800a706:	0c0b      	lsrs	r3, r1, #16
 800a708:	fb02 3306 	mla	r3, r2, r6, r3
 800a70c:	b289      	uxth	r1, r1
 800a70e:	3001      	adds	r0, #1
 800a710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a714:	4285      	cmp	r5, r0
 800a716:	f84c 1b04 	str.w	r1, [ip], #4
 800a71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a71e:	dcec      	bgt.n	800a6fa <__multadd+0x12>
 800a720:	b30e      	cbz	r6, 800a766 <__multadd+0x7e>
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	42ab      	cmp	r3, r5
 800a726:	dc19      	bgt.n	800a75c <__multadd+0x74>
 800a728:	6861      	ldr	r1, [r4, #4]
 800a72a:	4638      	mov	r0, r7
 800a72c:	3101      	adds	r1, #1
 800a72e:	f7ff ff79 	bl	800a624 <_Balloc>
 800a732:	4680      	mov	r8, r0
 800a734:	b928      	cbnz	r0, 800a742 <__multadd+0x5a>
 800a736:	4602      	mov	r2, r0
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <__multadd+0x84>)
 800a73a:	480d      	ldr	r0, [pc, #52]	; (800a770 <__multadd+0x88>)
 800a73c:	21ba      	movs	r1, #186	; 0xba
 800a73e:	f7fe ffd7 	bl	80096f0 <__assert_func>
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	3202      	adds	r2, #2
 800a746:	f104 010c 	add.w	r1, r4, #12
 800a74a:	0092      	lsls	r2, r2, #2
 800a74c:	300c      	adds	r0, #12
 800a74e:	f7fe ffc0 	bl	80096d2 <memcpy>
 800a752:	4621      	mov	r1, r4
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ffa5 	bl	800a6a4 <_Bfree>
 800a75a:	4644      	mov	r4, r8
 800a75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a760:	3501      	adds	r5, #1
 800a762:	615e      	str	r6, [r3, #20]
 800a764:	6125      	str	r5, [r4, #16]
 800a766:	4620      	mov	r0, r4
 800a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76c:	0800cfa0 	.word	0x0800cfa0
 800a770:	0800cfb1 	.word	0x0800cfb1

0800a774 <__hi0bits>:
 800a774:	0c03      	lsrs	r3, r0, #16
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	b9d3      	cbnz	r3, 800a7b0 <__hi0bits+0x3c>
 800a77a:	0400      	lsls	r0, r0, #16
 800a77c:	2310      	movs	r3, #16
 800a77e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a782:	bf04      	itt	eq
 800a784:	0200      	lsleq	r0, r0, #8
 800a786:	3308      	addeq	r3, #8
 800a788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a78c:	bf04      	itt	eq
 800a78e:	0100      	lsleq	r0, r0, #4
 800a790:	3304      	addeq	r3, #4
 800a792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a796:	bf04      	itt	eq
 800a798:	0080      	lsleq	r0, r0, #2
 800a79a:	3302      	addeq	r3, #2
 800a79c:	2800      	cmp	r0, #0
 800a79e:	db05      	blt.n	800a7ac <__hi0bits+0x38>
 800a7a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7a4:	f103 0301 	add.w	r3, r3, #1
 800a7a8:	bf08      	it	eq
 800a7aa:	2320      	moveq	r3, #32
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4770      	bx	lr
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e7e4      	b.n	800a77e <__hi0bits+0xa>

0800a7b4 <__lo0bits>:
 800a7b4:	6803      	ldr	r3, [r0, #0]
 800a7b6:	f013 0207 	ands.w	r2, r3, #7
 800a7ba:	d00c      	beq.n	800a7d6 <__lo0bits+0x22>
 800a7bc:	07d9      	lsls	r1, r3, #31
 800a7be:	d422      	bmi.n	800a806 <__lo0bits+0x52>
 800a7c0:	079a      	lsls	r2, r3, #30
 800a7c2:	bf49      	itett	mi
 800a7c4:	085b      	lsrmi	r3, r3, #1
 800a7c6:	089b      	lsrpl	r3, r3, #2
 800a7c8:	6003      	strmi	r3, [r0, #0]
 800a7ca:	2201      	movmi	r2, #1
 800a7cc:	bf5c      	itt	pl
 800a7ce:	6003      	strpl	r3, [r0, #0]
 800a7d0:	2202      	movpl	r2, #2
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4770      	bx	lr
 800a7d6:	b299      	uxth	r1, r3
 800a7d8:	b909      	cbnz	r1, 800a7de <__lo0bits+0x2a>
 800a7da:	0c1b      	lsrs	r3, r3, #16
 800a7dc:	2210      	movs	r2, #16
 800a7de:	b2d9      	uxtb	r1, r3
 800a7e0:	b909      	cbnz	r1, 800a7e6 <__lo0bits+0x32>
 800a7e2:	3208      	adds	r2, #8
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	0719      	lsls	r1, r3, #28
 800a7e8:	bf04      	itt	eq
 800a7ea:	091b      	lsreq	r3, r3, #4
 800a7ec:	3204      	addeq	r2, #4
 800a7ee:	0799      	lsls	r1, r3, #30
 800a7f0:	bf04      	itt	eq
 800a7f2:	089b      	lsreq	r3, r3, #2
 800a7f4:	3202      	addeq	r2, #2
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d403      	bmi.n	800a802 <__lo0bits+0x4e>
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	f102 0201 	add.w	r2, r2, #1
 800a800:	d003      	beq.n	800a80a <__lo0bits+0x56>
 800a802:	6003      	str	r3, [r0, #0]
 800a804:	e7e5      	b.n	800a7d2 <__lo0bits+0x1e>
 800a806:	2200      	movs	r2, #0
 800a808:	e7e3      	b.n	800a7d2 <__lo0bits+0x1e>
 800a80a:	2220      	movs	r2, #32
 800a80c:	e7e1      	b.n	800a7d2 <__lo0bits+0x1e>
	...

0800a810 <__i2b>:
 800a810:	b510      	push	{r4, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	2101      	movs	r1, #1
 800a816:	f7ff ff05 	bl	800a624 <_Balloc>
 800a81a:	4602      	mov	r2, r0
 800a81c:	b928      	cbnz	r0, 800a82a <__i2b+0x1a>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <__i2b+0x24>)
 800a820:	4805      	ldr	r0, [pc, #20]	; (800a838 <__i2b+0x28>)
 800a822:	f240 1145 	movw	r1, #325	; 0x145
 800a826:	f7fe ff63 	bl	80096f0 <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	6144      	str	r4, [r0, #20]
 800a82e:	6103      	str	r3, [r0, #16]
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800cfa0 	.word	0x0800cfa0
 800a838:	0800cfb1 	.word	0x0800cfb1

0800a83c <__multiply>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	4691      	mov	r9, r2
 800a842:	690a      	ldr	r2, [r1, #16]
 800a844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bfb8      	it	lt
 800a84c:	460b      	movlt	r3, r1
 800a84e:	460c      	mov	r4, r1
 800a850:	bfbc      	itt	lt
 800a852:	464c      	movlt	r4, r9
 800a854:	4699      	movlt	r9, r3
 800a856:	6927      	ldr	r7, [r4, #16]
 800a858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	eb07 060a 	add.w	r6, r7, sl
 800a864:	42b3      	cmp	r3, r6
 800a866:	b085      	sub	sp, #20
 800a868:	bfb8      	it	lt
 800a86a:	3101      	addlt	r1, #1
 800a86c:	f7ff feda 	bl	800a624 <_Balloc>
 800a870:	b930      	cbnz	r0, 800a880 <__multiply+0x44>
 800a872:	4602      	mov	r2, r0
 800a874:	4b44      	ldr	r3, [pc, #272]	; (800a988 <__multiply+0x14c>)
 800a876:	4845      	ldr	r0, [pc, #276]	; (800a98c <__multiply+0x150>)
 800a878:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a87c:	f7fe ff38 	bl	80096f0 <__assert_func>
 800a880:	f100 0514 	add.w	r5, r0, #20
 800a884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a888:	462b      	mov	r3, r5
 800a88a:	2200      	movs	r2, #0
 800a88c:	4543      	cmp	r3, r8
 800a88e:	d321      	bcc.n	800a8d4 <__multiply+0x98>
 800a890:	f104 0314 	add.w	r3, r4, #20
 800a894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a898:	f109 0314 	add.w	r3, r9, #20
 800a89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8a0:	9202      	str	r2, [sp, #8]
 800a8a2:	1b3a      	subs	r2, r7, r4
 800a8a4:	3a15      	subs	r2, #21
 800a8a6:	f022 0203 	bic.w	r2, r2, #3
 800a8aa:	3204      	adds	r2, #4
 800a8ac:	f104 0115 	add.w	r1, r4, #21
 800a8b0:	428f      	cmp	r7, r1
 800a8b2:	bf38      	it	cc
 800a8b4:	2204      	movcc	r2, #4
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d80c      	bhi.n	800a8da <__multiply+0x9e>
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	dd03      	ble.n	800a8cc <__multiply+0x90>
 800a8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05b      	beq.n	800a984 <__multiply+0x148>
 800a8cc:	6106      	str	r6, [r0, #16]
 800a8ce:	b005      	add	sp, #20
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	f843 2b04 	str.w	r2, [r3], #4
 800a8d8:	e7d8      	b.n	800a88c <__multiply+0x50>
 800a8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	d024      	beq.n	800a92e <__multiply+0xf2>
 800a8e4:	f104 0e14 	add.w	lr, r4, #20
 800a8e8:	46a9      	mov	r9, r5
 800a8ea:	f04f 0c00 	mov.w	ip, #0
 800a8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800a8f6:	fa1f fb82 	uxth.w	fp, r2
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a904:	f8d9 2000 	ldr.w	r2, [r9]
 800a908:	4461      	add	r1, ip
 800a90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a916:	b289      	uxth	r1, r1
 800a918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a91c:	4577      	cmp	r7, lr
 800a91e:	f849 1b04 	str.w	r1, [r9], #4
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	d8e2      	bhi.n	800a8ee <__multiply+0xb2>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	f845 c002 	str.w	ip, [r5, r2]
 800a92e:	9a03      	ldr	r2, [sp, #12]
 800a930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a934:	3304      	adds	r3, #4
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d021      	beq.n	800a980 <__multiply+0x144>
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	f104 0c14 	add.w	ip, r4, #20
 800a942:	46ae      	mov	lr, r5
 800a944:	f04f 0a00 	mov.w	sl, #0
 800a948:	f8bc b000 	ldrh.w	fp, [ip]
 800a94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a950:	fb09 220b 	mla	r2, r9, fp, r2
 800a954:	4452      	add	r2, sl
 800a956:	b289      	uxth	r1, r1
 800a958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a95c:	f84e 1b04 	str.w	r1, [lr], #4
 800a960:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a968:	f8be 1000 	ldrh.w	r1, [lr]
 800a96c:	fb09 110a 	mla	r1, r9, sl, r1
 800a970:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a974:	4567      	cmp	r7, ip
 800a976:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a97a:	d8e5      	bhi.n	800a948 <__multiply+0x10c>
 800a97c:	9a01      	ldr	r2, [sp, #4]
 800a97e:	50a9      	str	r1, [r5, r2]
 800a980:	3504      	adds	r5, #4
 800a982:	e799      	b.n	800a8b8 <__multiply+0x7c>
 800a984:	3e01      	subs	r6, #1
 800a986:	e79b      	b.n	800a8c0 <__multiply+0x84>
 800a988:	0800cfa0 	.word	0x0800cfa0
 800a98c:	0800cfb1 	.word	0x0800cfb1

0800a990 <__pow5mult>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4615      	mov	r5, r2
 800a996:	f012 0203 	ands.w	r2, r2, #3
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	d007      	beq.n	800a9b0 <__pow5mult+0x20>
 800a9a0:	4c25      	ldr	r4, [pc, #148]	; (800aa38 <__pow5mult+0xa8>)
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9aa:	f7ff fe9d 	bl	800a6e8 <__multadd>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	10ad      	asrs	r5, r5, #2
 800a9b2:	d03d      	beq.n	800aa30 <__pow5mult+0xa0>
 800a9b4:	69f4      	ldr	r4, [r6, #28]
 800a9b6:	b97c      	cbnz	r4, 800a9d8 <__pow5mult+0x48>
 800a9b8:	2010      	movs	r0, #16
 800a9ba:	f7ff fd7f 	bl	800a4bc <malloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	61f0      	str	r0, [r6, #28]
 800a9c2:	b928      	cbnz	r0, 800a9d0 <__pow5mult+0x40>
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <__pow5mult+0xac>)
 800a9c6:	481e      	ldr	r0, [pc, #120]	; (800aa40 <__pow5mult+0xb0>)
 800a9c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a9cc:	f7fe fe90 	bl	80096f0 <__assert_func>
 800a9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9d4:	6004      	str	r4, [r0, #0]
 800a9d6:	60c4      	str	r4, [r0, #12]
 800a9d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9e0:	b94c      	cbnz	r4, 800a9f6 <__pow5mult+0x66>
 800a9e2:	f240 2171 	movw	r1, #625	; 0x271
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ff12 	bl	800a810 <__i2b>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 0900 	mov.w	r9, #0
 800a9fa:	07eb      	lsls	r3, r5, #31
 800a9fc:	d50a      	bpl.n	800aa14 <__pow5mult+0x84>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff1a 	bl	800a83c <__multiply>
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fe49 	bl	800a6a4 <_Bfree>
 800aa12:	4647      	mov	r7, r8
 800aa14:	106d      	asrs	r5, r5, #1
 800aa16:	d00b      	beq.n	800aa30 <__pow5mult+0xa0>
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	b938      	cbnz	r0, 800aa2c <__pow5mult+0x9c>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff0b 	bl	800a83c <__multiply>
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	f8c0 9000 	str.w	r9, [r0]
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	e7e4      	b.n	800a9fa <__pow5mult+0x6a>
 800aa30:	4638      	mov	r0, r7
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	bf00      	nop
 800aa38:	0800d100 	.word	0x0800d100
 800aa3c:	0800cf31 	.word	0x0800cf31
 800aa40:	0800cfb1 	.word	0x0800cfb1

0800aa44 <__lshift>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	6849      	ldr	r1, [r1, #4]
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	4607      	mov	r7, r0
 800aa56:	4691      	mov	r9, r2
 800aa58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa5c:	f108 0601 	add.w	r6, r8, #1
 800aa60:	42b3      	cmp	r3, r6
 800aa62:	db0b      	blt.n	800aa7c <__lshift+0x38>
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fddd 	bl	800a624 <_Balloc>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	b948      	cbnz	r0, 800aa82 <__lshift+0x3e>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b28      	ldr	r3, [pc, #160]	; (800ab14 <__lshift+0xd0>)
 800aa72:	4829      	ldr	r0, [pc, #164]	; (800ab18 <__lshift+0xd4>)
 800aa74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa78:	f7fe fe3a 	bl	80096f0 <__assert_func>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	e7ee      	b.n	800aa60 <__lshift+0x1c>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f100 0114 	add.w	r1, r0, #20
 800aa88:	f100 0210 	add.w	r2, r0, #16
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	4553      	cmp	r3, sl
 800aa90:	db33      	blt.n	800aafa <__lshift+0xb6>
 800aa92:	6920      	ldr	r0, [r4, #16]
 800aa94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa98:	f104 0314 	add.w	r3, r4, #20
 800aa9c:	f019 091f 	ands.w	r9, r9, #31
 800aaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaa8:	d02b      	beq.n	800ab02 <__lshift+0xbe>
 800aaaa:	f1c9 0e20 	rsb	lr, r9, #32
 800aaae:	468a      	mov	sl, r1
 800aab0:	2200      	movs	r2, #0
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	fa00 f009 	lsl.w	r0, r0, r9
 800aab8:	4310      	orrs	r0, r2
 800aaba:	f84a 0b04 	str.w	r0, [sl], #4
 800aabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac2:	459c      	cmp	ip, r3
 800aac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aac8:	d8f3      	bhi.n	800aab2 <__lshift+0x6e>
 800aaca:	ebac 0304 	sub.w	r3, ip, r4
 800aace:	3b15      	subs	r3, #21
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	f104 0015 	add.w	r0, r4, #21
 800aada:	4584      	cmp	ip, r0
 800aadc:	bf38      	it	cc
 800aade:	2304      	movcc	r3, #4
 800aae0:	50ca      	str	r2, [r1, r3]
 800aae2:	b10a      	cbz	r2, 800aae8 <__lshift+0xa4>
 800aae4:	f108 0602 	add.w	r6, r8, #2
 800aae8:	3e01      	subs	r6, #1
 800aaea:	4638      	mov	r0, r7
 800aaec:	612e      	str	r6, [r5, #16]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7ff fdd8 	bl	800a6a4 <_Bfree>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aafe:	3301      	adds	r3, #1
 800ab00:	e7c5      	b.n	800aa8e <__lshift+0x4a>
 800ab02:	3904      	subs	r1, #4
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab0c:	459c      	cmp	ip, r3
 800ab0e:	d8f9      	bhi.n	800ab04 <__lshift+0xc0>
 800ab10:	e7ea      	b.n	800aae8 <__lshift+0xa4>
 800ab12:	bf00      	nop
 800ab14:	0800cfa0 	.word	0x0800cfa0
 800ab18:	0800cfb1 	.word	0x0800cfb1

0800ab1c <__mcmp>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	6902      	ldr	r2, [r0, #16]
 800ab20:	690c      	ldr	r4, [r1, #16]
 800ab22:	1b12      	subs	r2, r2, r4
 800ab24:	d10e      	bne.n	800ab44 <__mcmp+0x28>
 800ab26:	f100 0314 	add.w	r3, r0, #20
 800ab2a:	3114      	adds	r1, #20
 800ab2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	d003      	beq.n	800ab48 <__mcmp+0x2c>
 800ab40:	d305      	bcc.n	800ab4e <__mcmp+0x32>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4610      	mov	r0, r2
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d3f3      	bcc.n	800ab34 <__mcmp+0x18>
 800ab4c:	e7fa      	b.n	800ab44 <__mcmp+0x28>
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e7f7      	b.n	800ab44 <__mcmp+0x28>

0800ab54 <__mdiff>:
 800ab54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff ffdb 	bl	800ab1c <__mcmp>
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	d110      	bne.n	800ab8c <__mdiff+0x38>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd59 	bl	800a624 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__mdiff+0x2e>
 800ab74:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <__mdiff+0x10c>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 2137 	movw	r1, #567	; 0x237
 800ab7c:	4839      	ldr	r0, [pc, #228]	; (800ac64 <__mdiff+0x110>)
 800ab7e:	f7fe fdb7 	bl	80096f0 <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	bfa4      	itt	ge
 800ab8e:	4643      	movge	r3, r8
 800ab90:	46a0      	movge	r8, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab98:	bfa6      	itte	ge
 800ab9a:	461c      	movge	r4, r3
 800ab9c:	2500      	movge	r5, #0
 800ab9e:	2501      	movlt	r5, #1
 800aba0:	f7ff fd40 	bl	800a624 <_Balloc>
 800aba4:	b920      	cbnz	r0, 800abb0 <__mdiff+0x5c>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__mdiff+0x10c>)
 800aba8:	4602      	mov	r2, r0
 800abaa:	f240 2145 	movw	r1, #581	; 0x245
 800abae:	e7e5      	b.n	800ab7c <__mdiff+0x28>
 800abb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abb4:	6926      	ldr	r6, [r4, #16]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	f104 0914 	add.w	r9, r4, #20
 800abbc:	f108 0514 	add.w	r5, r8, #20
 800abc0:	f100 0e14 	add.w	lr, r0, #20
 800abc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abcc:	f108 0210 	add.w	r2, r8, #16
 800abd0:	46f2      	mov	sl, lr
 800abd2:	2100      	movs	r1, #0
 800abd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abdc:	fa11 f88b 	uxtah	r8, r1, fp
 800abe0:	b299      	uxth	r1, r3
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	eba8 0801 	sub.w	r8, r8, r1
 800abe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abf0:	fa1f f888 	uxth.w	r8, r8
 800abf4:	1419      	asrs	r1, r3, #16
 800abf6:	454e      	cmp	r6, r9
 800abf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abfc:	f84a 3b04 	str.w	r3, [sl], #4
 800ac00:	d8e8      	bhi.n	800abd4 <__mdiff+0x80>
 800ac02:	1b33      	subs	r3, r6, r4
 800ac04:	3b15      	subs	r3, #21
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	3415      	adds	r4, #21
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	bf38      	it	cc
 800ac12:	2304      	movcc	r3, #4
 800ac14:	441d      	add	r5, r3
 800ac16:	4473      	add	r3, lr
 800ac18:	469e      	mov	lr, r3
 800ac1a:	462e      	mov	r6, r5
 800ac1c:	4566      	cmp	r6, ip
 800ac1e:	d30e      	bcc.n	800ac3e <__mdiff+0xea>
 800ac20:	f10c 0203 	add.w	r2, ip, #3
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	f022 0203 	bic.w	r2, r2, #3
 800ac2a:	3d03      	subs	r5, #3
 800ac2c:	45ac      	cmp	ip, r5
 800ac2e:	bf38      	it	cc
 800ac30:	2200      	movcc	r2, #0
 800ac32:	4413      	add	r3, r2
 800ac34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac38:	b17a      	cbz	r2, 800ac5a <__mdiff+0x106>
 800ac3a:	6107      	str	r7, [r0, #16]
 800ac3c:	e7a4      	b.n	800ab88 <__mdiff+0x34>
 800ac3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac42:	fa11 f288 	uxtah	r2, r1, r8
 800ac46:	1414      	asrs	r4, r2, #16
 800ac48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac4c:	b292      	uxth	r2, r2
 800ac4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac52:	f84e 2b04 	str.w	r2, [lr], #4
 800ac56:	1421      	asrs	r1, r4, #16
 800ac58:	e7e0      	b.n	800ac1c <__mdiff+0xc8>
 800ac5a:	3f01      	subs	r7, #1
 800ac5c:	e7ea      	b.n	800ac34 <__mdiff+0xe0>
 800ac5e:	bf00      	nop
 800ac60:	0800cfa0 	.word	0x0800cfa0
 800ac64:	0800cfb1 	.word	0x0800cfb1

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4616      	mov	r6, r2
 800ac76:	f7ff fcd5 	bl	800a624 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b24      	ldr	r3, [pc, #144]	; (800ad14 <__d2b+0xac>)
 800ac82:	4825      	ldr	r0, [pc, #148]	; (800ad18 <__d2b+0xb0>)
 800ac84:	f240 310f 	movw	r1, #783	; 0x30f
 800ac88:	f7fe fd32 	bl	80096f0 <__assert_func>
 800ac8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac94:	bb2d      	cbnz	r5, 800ace2 <__d2b+0x7a>
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	f1b8 0300 	subs.w	r3, r8, #0
 800ac9c:	d026      	beq.n	800acec <__d2b+0x84>
 800ac9e:	4668      	mov	r0, sp
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	f7ff fd87 	bl	800a7b4 <__lo0bits>
 800aca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acaa:	b1e8      	cbz	r0, 800ace8 <__d2b+0x80>
 800acac:	f1c0 0320 	rsb	r3, r0, #32
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	430b      	orrs	r3, r1
 800acb6:	40c2      	lsrs	r2, r0
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf14      	ite	ne
 800acc4:	2202      	movne	r2, #2
 800acc6:	2201      	moveq	r2, #1
 800acc8:	6122      	str	r2, [r4, #16]
 800acca:	b1bd      	cbz	r5, 800acfc <__d2b+0x94>
 800accc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd0:	4405      	add	r5, r0
 800acd2:	603d      	str	r5, [r7, #0]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace6:	e7d6      	b.n	800ac96 <__d2b+0x2e>
 800ace8:	6161      	str	r1, [r4, #20]
 800acea:	e7e7      	b.n	800acbc <__d2b+0x54>
 800acec:	a801      	add	r0, sp, #4
 800acee:	f7ff fd61 	bl	800a7b4 <__lo0bits>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	3020      	adds	r0, #32
 800acf8:	2201      	movs	r2, #1
 800acfa:	e7e5      	b.n	800acc8 <__d2b+0x60>
 800acfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad04:	6038      	str	r0, [r7, #0]
 800ad06:	6918      	ldr	r0, [r3, #16]
 800ad08:	f7ff fd34 	bl	800a774 <__hi0bits>
 800ad0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad10:	e7e2      	b.n	800acd8 <__d2b+0x70>
 800ad12:	bf00      	nop
 800ad14:	0800cfa0 	.word	0x0800cfa0
 800ad18:	0800cfb1 	.word	0x0800cfb1

0800ad1c <__sfputc_r>:
 800ad1c:	6893      	ldr	r3, [r2, #8]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	b410      	push	{r4}
 800ad24:	6093      	str	r3, [r2, #8]
 800ad26:	da08      	bge.n	800ad3a <__sfputc_r+0x1e>
 800ad28:	6994      	ldr	r4, [r2, #24]
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	db01      	blt.n	800ad32 <__sfputc_r+0x16>
 800ad2e:	290a      	cmp	r1, #10
 800ad30:	d103      	bne.n	800ad3a <__sfputc_r+0x1e>
 800ad32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad36:	f7fe bbb8 	b.w	80094aa <__swbuf_r>
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	1c58      	adds	r0, r3, #1
 800ad3e:	6010      	str	r0, [r2, #0]
 800ad40:	7019      	strb	r1, [r3, #0]
 800ad42:	4608      	mov	r0, r1
 800ad44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <__sfputs_r>:
 800ad4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	460f      	mov	r7, r1
 800ad50:	4614      	mov	r4, r2
 800ad52:	18d5      	adds	r5, r2, r3
 800ad54:	42ac      	cmp	r4, r5
 800ad56:	d101      	bne.n	800ad5c <__sfputs_r+0x12>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e007      	b.n	800ad6c <__sfputs_r+0x22>
 800ad5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad60:	463a      	mov	r2, r7
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ffda 	bl	800ad1c <__sfputc_r>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d1f3      	bne.n	800ad54 <__sfputs_r+0xa>
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad70 <_vfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	460d      	mov	r5, r1
 800ad76:	b09d      	sub	sp, #116	; 0x74
 800ad78:	4614      	mov	r4, r2
 800ad7a:	4698      	mov	r8, r3
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	b118      	cbz	r0, 800ad88 <_vfiprintf_r+0x18>
 800ad80:	6a03      	ldr	r3, [r0, #32]
 800ad82:	b90b      	cbnz	r3, 800ad88 <_vfiprintf_r+0x18>
 800ad84:	f7fe fb18 	bl	80093b8 <__sinit>
 800ad88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad8a:	07d9      	lsls	r1, r3, #31
 800ad8c:	d405      	bmi.n	800ad9a <_vfiprintf_r+0x2a>
 800ad8e:	89ab      	ldrh	r3, [r5, #12]
 800ad90:	059a      	lsls	r2, r3, #22
 800ad92:	d402      	bmi.n	800ad9a <_vfiprintf_r+0x2a>
 800ad94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad96:	f7fe fc9a 	bl	80096ce <__retarget_lock_acquire_recursive>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	071b      	lsls	r3, r3, #28
 800ad9e:	d501      	bpl.n	800ada4 <_vfiprintf_r+0x34>
 800ada0:	692b      	ldr	r3, [r5, #16]
 800ada2:	b99b      	cbnz	r3, 800adcc <_vfiprintf_r+0x5c>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4630      	mov	r0, r6
 800ada8:	f7fe fbbc 	bl	8009524 <__swsetup_r>
 800adac:	b170      	cbz	r0, 800adcc <_vfiprintf_r+0x5c>
 800adae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb0:	07dc      	lsls	r4, r3, #31
 800adb2:	d504      	bpl.n	800adbe <_vfiprintf_r+0x4e>
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	b01d      	add	sp, #116	; 0x74
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	0598      	lsls	r0, r3, #22
 800adc2:	d4f7      	bmi.n	800adb4 <_vfiprintf_r+0x44>
 800adc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adc6:	f7fe fc83 	bl	80096d0 <__retarget_lock_release_recursive>
 800adca:	e7f3      	b.n	800adb4 <_vfiprintf_r+0x44>
 800adcc:	2300      	movs	r3, #0
 800adce:	9309      	str	r3, [sp, #36]	; 0x24
 800add0:	2320      	movs	r3, #32
 800add2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800add6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adda:	2330      	movs	r3, #48	; 0x30
 800addc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af90 <_vfiprintf_r+0x220>
 800ade0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ade4:	f04f 0901 	mov.w	r9, #1
 800ade8:	4623      	mov	r3, r4
 800adea:	469a      	mov	sl, r3
 800adec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adf0:	b10a      	cbz	r2, 800adf6 <_vfiprintf_r+0x86>
 800adf2:	2a25      	cmp	r2, #37	; 0x25
 800adf4:	d1f9      	bne.n	800adea <_vfiprintf_r+0x7a>
 800adf6:	ebba 0b04 	subs.w	fp, sl, r4
 800adfa:	d00b      	beq.n	800ae14 <_vfiprintf_r+0xa4>
 800adfc:	465b      	mov	r3, fp
 800adfe:	4622      	mov	r2, r4
 800ae00:	4629      	mov	r1, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	f7ff ffa1 	bl	800ad4a <__sfputs_r>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f000 80a9 	beq.w	800af60 <_vfiprintf_r+0x1f0>
 800ae0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae10:	445a      	add	r2, fp
 800ae12:	9209      	str	r2, [sp, #36]	; 0x24
 800ae14:	f89a 3000 	ldrb.w	r3, [sl]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80a1 	beq.w	800af60 <_vfiprintf_r+0x1f0>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae28:	f10a 0a01 	add.w	sl, sl, #1
 800ae2c:	9304      	str	r3, [sp, #16]
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae34:	931a      	str	r3, [sp, #104]	; 0x68
 800ae36:	4654      	mov	r4, sl
 800ae38:	2205      	movs	r2, #5
 800ae3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3e:	4854      	ldr	r0, [pc, #336]	; (800af90 <_vfiprintf_r+0x220>)
 800ae40:	f7f5 f9ce 	bl	80001e0 <memchr>
 800ae44:	9a04      	ldr	r2, [sp, #16]
 800ae46:	b9d8      	cbnz	r0, 800ae80 <_vfiprintf_r+0x110>
 800ae48:	06d1      	lsls	r1, r2, #27
 800ae4a:	bf44      	itt	mi
 800ae4c:	2320      	movmi	r3, #32
 800ae4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae52:	0713      	lsls	r3, r2, #28
 800ae54:	bf44      	itt	mi
 800ae56:	232b      	movmi	r3, #43	; 0x2b
 800ae58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae60:	2b2a      	cmp	r3, #42	; 0x2a
 800ae62:	d015      	beq.n	800ae90 <_vfiprintf_r+0x120>
 800ae64:	9a07      	ldr	r2, [sp, #28]
 800ae66:	4654      	mov	r4, sl
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f04f 0c0a 	mov.w	ip, #10
 800ae6e:	4621      	mov	r1, r4
 800ae70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae74:	3b30      	subs	r3, #48	; 0x30
 800ae76:	2b09      	cmp	r3, #9
 800ae78:	d94d      	bls.n	800af16 <_vfiprintf_r+0x1a6>
 800ae7a:	b1b0      	cbz	r0, 800aeaa <_vfiprintf_r+0x13a>
 800ae7c:	9207      	str	r2, [sp, #28]
 800ae7e:	e014      	b.n	800aeaa <_vfiprintf_r+0x13a>
 800ae80:	eba0 0308 	sub.w	r3, r0, r8
 800ae84:	fa09 f303 	lsl.w	r3, r9, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	9304      	str	r3, [sp, #16]
 800ae8c:	46a2      	mov	sl, r4
 800ae8e:	e7d2      	b.n	800ae36 <_vfiprintf_r+0xc6>
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	1d19      	adds	r1, r3, #4
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	9103      	str	r1, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	bfbb      	ittet	lt
 800ae9c:	425b      	neglt	r3, r3
 800ae9e:	f042 0202 	orrlt.w	r2, r2, #2
 800aea2:	9307      	strge	r3, [sp, #28]
 800aea4:	9307      	strlt	r3, [sp, #28]
 800aea6:	bfb8      	it	lt
 800aea8:	9204      	strlt	r2, [sp, #16]
 800aeaa:	7823      	ldrb	r3, [r4, #0]
 800aeac:	2b2e      	cmp	r3, #46	; 0x2e
 800aeae:	d10c      	bne.n	800aeca <_vfiprintf_r+0x15a>
 800aeb0:	7863      	ldrb	r3, [r4, #1]
 800aeb2:	2b2a      	cmp	r3, #42	; 0x2a
 800aeb4:	d134      	bne.n	800af20 <_vfiprintf_r+0x1b0>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	1d1a      	adds	r2, r3, #4
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	9203      	str	r2, [sp, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfb8      	it	lt
 800aec2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aec6:	3402      	adds	r4, #2
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800afa0 <_vfiprintf_r+0x230>
 800aece:	7821      	ldrb	r1, [r4, #0]
 800aed0:	2203      	movs	r2, #3
 800aed2:	4650      	mov	r0, sl
 800aed4:	f7f5 f984 	bl	80001e0 <memchr>
 800aed8:	b138      	cbz	r0, 800aeea <_vfiprintf_r+0x17a>
 800aeda:	9b04      	ldr	r3, [sp, #16]
 800aedc:	eba0 000a 	sub.w	r0, r0, sl
 800aee0:	2240      	movs	r2, #64	; 0x40
 800aee2:	4082      	lsls	r2, r0
 800aee4:	4313      	orrs	r3, r2
 800aee6:	3401      	adds	r4, #1
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeee:	4829      	ldr	r0, [pc, #164]	; (800af94 <_vfiprintf_r+0x224>)
 800aef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aef4:	2206      	movs	r2, #6
 800aef6:	f7f5 f973 	bl	80001e0 <memchr>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d03f      	beq.n	800af7e <_vfiprintf_r+0x20e>
 800aefe:	4b26      	ldr	r3, [pc, #152]	; (800af98 <_vfiprintf_r+0x228>)
 800af00:	bb1b      	cbnz	r3, 800af4a <_vfiprintf_r+0x1da>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	3307      	adds	r3, #7
 800af06:	f023 0307 	bic.w	r3, r3, #7
 800af0a:	3308      	adds	r3, #8
 800af0c:	9303      	str	r3, [sp, #12]
 800af0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af10:	443b      	add	r3, r7
 800af12:	9309      	str	r3, [sp, #36]	; 0x24
 800af14:	e768      	b.n	800ade8 <_vfiprintf_r+0x78>
 800af16:	fb0c 3202 	mla	r2, ip, r2, r3
 800af1a:	460c      	mov	r4, r1
 800af1c:	2001      	movs	r0, #1
 800af1e:	e7a6      	b.n	800ae6e <_vfiprintf_r+0xfe>
 800af20:	2300      	movs	r3, #0
 800af22:	3401      	adds	r4, #1
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	4619      	mov	r1, r3
 800af28:	f04f 0c0a 	mov.w	ip, #10
 800af2c:	4620      	mov	r0, r4
 800af2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af32:	3a30      	subs	r2, #48	; 0x30
 800af34:	2a09      	cmp	r2, #9
 800af36:	d903      	bls.n	800af40 <_vfiprintf_r+0x1d0>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0c6      	beq.n	800aeca <_vfiprintf_r+0x15a>
 800af3c:	9105      	str	r1, [sp, #20]
 800af3e:	e7c4      	b.n	800aeca <_vfiprintf_r+0x15a>
 800af40:	fb0c 2101 	mla	r1, ip, r1, r2
 800af44:	4604      	mov	r4, r0
 800af46:	2301      	movs	r3, #1
 800af48:	e7f0      	b.n	800af2c <_vfiprintf_r+0x1bc>
 800af4a:	ab03      	add	r3, sp, #12
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	462a      	mov	r2, r5
 800af50:	4b12      	ldr	r3, [pc, #72]	; (800af9c <_vfiprintf_r+0x22c>)
 800af52:	a904      	add	r1, sp, #16
 800af54:	4630      	mov	r0, r6
 800af56:	f7fd fddd 	bl	8008b14 <_printf_float>
 800af5a:	4607      	mov	r7, r0
 800af5c:	1c78      	adds	r0, r7, #1
 800af5e:	d1d6      	bne.n	800af0e <_vfiprintf_r+0x19e>
 800af60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af62:	07d9      	lsls	r1, r3, #31
 800af64:	d405      	bmi.n	800af72 <_vfiprintf_r+0x202>
 800af66:	89ab      	ldrh	r3, [r5, #12]
 800af68:	059a      	lsls	r2, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_vfiprintf_r+0x202>
 800af6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af6e:	f7fe fbaf 	bl	80096d0 <__retarget_lock_release_recursive>
 800af72:	89ab      	ldrh	r3, [r5, #12]
 800af74:	065b      	lsls	r3, r3, #25
 800af76:	f53f af1d 	bmi.w	800adb4 <_vfiprintf_r+0x44>
 800af7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af7c:	e71c      	b.n	800adb8 <_vfiprintf_r+0x48>
 800af7e:	ab03      	add	r3, sp, #12
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	462a      	mov	r2, r5
 800af84:	4b05      	ldr	r3, [pc, #20]	; (800af9c <_vfiprintf_r+0x22c>)
 800af86:	a904      	add	r1, sp, #16
 800af88:	4630      	mov	r0, r6
 800af8a:	f7fe f867 	bl	800905c <_printf_i>
 800af8e:	e7e4      	b.n	800af5a <_vfiprintf_r+0x1ea>
 800af90:	0800d10c 	.word	0x0800d10c
 800af94:	0800d116 	.word	0x0800d116
 800af98:	08008b15 	.word	0x08008b15
 800af9c:	0800ad4b 	.word	0x0800ad4b
 800afa0:	0800d112 	.word	0x0800d112

0800afa4 <__sflush_r>:
 800afa4:	898a      	ldrh	r2, [r1, #12]
 800afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afaa:	4605      	mov	r5, r0
 800afac:	0710      	lsls	r0, r2, #28
 800afae:	460c      	mov	r4, r1
 800afb0:	d458      	bmi.n	800b064 <__sflush_r+0xc0>
 800afb2:	684b      	ldr	r3, [r1, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc05      	bgt.n	800afc4 <__sflush_r+0x20>
 800afb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dc02      	bgt.n	800afc4 <__sflush_r+0x20>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d0f9      	beq.n	800afbe <__sflush_r+0x1a>
 800afca:	2300      	movs	r3, #0
 800afcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afd0:	682f      	ldr	r7, [r5, #0]
 800afd2:	6a21      	ldr	r1, [r4, #32]
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	d032      	beq.n	800b03e <__sflush_r+0x9a>
 800afd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afda:	89a3      	ldrh	r3, [r4, #12]
 800afdc:	075a      	lsls	r2, r3, #29
 800afde:	d505      	bpl.n	800afec <__sflush_r+0x48>
 800afe0:	6863      	ldr	r3, [r4, #4]
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afe6:	b10b      	cbz	r3, 800afec <__sflush_r+0x48>
 800afe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afea:	1ac0      	subs	r0, r0, r3
 800afec:	2300      	movs	r3, #0
 800afee:	4602      	mov	r2, r0
 800aff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	d106      	bne.n	800b00c <__sflush_r+0x68>
 800affe:	6829      	ldr	r1, [r5, #0]
 800b000:	291d      	cmp	r1, #29
 800b002:	d82b      	bhi.n	800b05c <__sflush_r+0xb8>
 800b004:	4a29      	ldr	r2, [pc, #164]	; (800b0ac <__sflush_r+0x108>)
 800b006:	410a      	asrs	r2, r1
 800b008:	07d6      	lsls	r6, r2, #31
 800b00a:	d427      	bmi.n	800b05c <__sflush_r+0xb8>
 800b00c:	2200      	movs	r2, #0
 800b00e:	6062      	str	r2, [r4, #4]
 800b010:	04d9      	lsls	r1, r3, #19
 800b012:	6922      	ldr	r2, [r4, #16]
 800b014:	6022      	str	r2, [r4, #0]
 800b016:	d504      	bpl.n	800b022 <__sflush_r+0x7e>
 800b018:	1c42      	adds	r2, r0, #1
 800b01a:	d101      	bne.n	800b020 <__sflush_r+0x7c>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b903      	cbnz	r3, 800b022 <__sflush_r+0x7e>
 800b020:	6560      	str	r0, [r4, #84]	; 0x54
 800b022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b024:	602f      	str	r7, [r5, #0]
 800b026:	2900      	cmp	r1, #0
 800b028:	d0c9      	beq.n	800afbe <__sflush_r+0x1a>
 800b02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b02e:	4299      	cmp	r1, r3
 800b030:	d002      	beq.n	800b038 <__sflush_r+0x94>
 800b032:	4628      	mov	r0, r5
 800b034:	f7ff f9f6 	bl	800a424 <_free_r>
 800b038:	2000      	movs	r0, #0
 800b03a:	6360      	str	r0, [r4, #52]	; 0x34
 800b03c:	e7c0      	b.n	800afc0 <__sflush_r+0x1c>
 800b03e:	2301      	movs	r3, #1
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	1c41      	adds	r1, r0, #1
 800b046:	d1c8      	bne.n	800afda <__sflush_r+0x36>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d0c5      	beq.n	800afda <__sflush_r+0x36>
 800b04e:	2b1d      	cmp	r3, #29
 800b050:	d001      	beq.n	800b056 <__sflush_r+0xb2>
 800b052:	2b16      	cmp	r3, #22
 800b054:	d101      	bne.n	800b05a <__sflush_r+0xb6>
 800b056:	602f      	str	r7, [r5, #0]
 800b058:	e7b1      	b.n	800afbe <__sflush_r+0x1a>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b060:	81a3      	strh	r3, [r4, #12]
 800b062:	e7ad      	b.n	800afc0 <__sflush_r+0x1c>
 800b064:	690f      	ldr	r7, [r1, #16]
 800b066:	2f00      	cmp	r7, #0
 800b068:	d0a9      	beq.n	800afbe <__sflush_r+0x1a>
 800b06a:	0793      	lsls	r3, r2, #30
 800b06c:	680e      	ldr	r6, [r1, #0]
 800b06e:	bf08      	it	eq
 800b070:	694b      	ldreq	r3, [r1, #20]
 800b072:	600f      	str	r7, [r1, #0]
 800b074:	bf18      	it	ne
 800b076:	2300      	movne	r3, #0
 800b078:	eba6 0807 	sub.w	r8, r6, r7
 800b07c:	608b      	str	r3, [r1, #8]
 800b07e:	f1b8 0f00 	cmp.w	r8, #0
 800b082:	dd9c      	ble.n	800afbe <__sflush_r+0x1a>
 800b084:	6a21      	ldr	r1, [r4, #32]
 800b086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b088:	4643      	mov	r3, r8
 800b08a:	463a      	mov	r2, r7
 800b08c:	4628      	mov	r0, r5
 800b08e:	47b0      	blx	r6
 800b090:	2800      	cmp	r0, #0
 800b092:	dc06      	bgt.n	800b0a2 <__sflush_r+0xfe>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e78e      	b.n	800afc0 <__sflush_r+0x1c>
 800b0a2:	4407      	add	r7, r0
 800b0a4:	eba8 0800 	sub.w	r8, r8, r0
 800b0a8:	e7e9      	b.n	800b07e <__sflush_r+0xda>
 800b0aa:	bf00      	nop
 800b0ac:	dfbffffe 	.word	0xdfbffffe

0800b0b0 <_fflush_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	690b      	ldr	r3, [r1, #16]
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	b913      	cbnz	r3, 800b0c0 <_fflush_r+0x10>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	bd38      	pop	{r3, r4, r5, pc}
 800b0c0:	b118      	cbz	r0, 800b0ca <_fflush_r+0x1a>
 800b0c2:	6a03      	ldr	r3, [r0, #32]
 800b0c4:	b90b      	cbnz	r3, 800b0ca <_fflush_r+0x1a>
 800b0c6:	f7fe f977 	bl	80093b8 <__sinit>
 800b0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0f3      	beq.n	800b0ba <_fflush_r+0xa>
 800b0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0d4:	07d0      	lsls	r0, r2, #31
 800b0d6:	d404      	bmi.n	800b0e2 <_fflush_r+0x32>
 800b0d8:	0599      	lsls	r1, r3, #22
 800b0da:	d402      	bmi.n	800b0e2 <_fflush_r+0x32>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f7fe faf6 	bl	80096ce <__retarget_lock_acquire_recursive>
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	f7ff ff5d 	bl	800afa4 <__sflush_r>
 800b0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ec:	07da      	lsls	r2, r3, #31
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	d4e4      	bmi.n	800b0bc <_fflush_r+0xc>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	059b      	lsls	r3, r3, #22
 800b0f6:	d4e1      	bmi.n	800b0bc <_fflush_r+0xc>
 800b0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0fa:	f7fe fae9 	bl	80096d0 <__retarget_lock_release_recursive>
 800b0fe:	e7dd      	b.n	800b0bc <_fflush_r+0xc>

0800b100 <fiprintf>:
 800b100:	b40e      	push	{r1, r2, r3}
 800b102:	b503      	push	{r0, r1, lr}
 800b104:	4601      	mov	r1, r0
 800b106:	ab03      	add	r3, sp, #12
 800b108:	4805      	ldr	r0, [pc, #20]	; (800b120 <fiprintf+0x20>)
 800b10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10e:	6800      	ldr	r0, [r0, #0]
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	f7ff fe2d 	bl	800ad70 <_vfiprintf_r>
 800b116:	b002      	add	sp, #8
 800b118:	f85d eb04 	ldr.w	lr, [sp], #4
 800b11c:	b003      	add	sp, #12
 800b11e:	4770      	bx	lr
 800b120:	20000454 	.word	0x20000454

0800b124 <__swhatbuf_r>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	460c      	mov	r4, r1
 800b128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12c:	2900      	cmp	r1, #0
 800b12e:	b096      	sub	sp, #88	; 0x58
 800b130:	4615      	mov	r5, r2
 800b132:	461e      	mov	r6, r3
 800b134:	da0d      	bge.n	800b152 <__swhatbuf_r+0x2e>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b13c:	f04f 0100 	mov.w	r1, #0
 800b140:	bf0c      	ite	eq
 800b142:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b146:	2340      	movne	r3, #64	; 0x40
 800b148:	2000      	movs	r0, #0
 800b14a:	6031      	str	r1, [r6, #0]
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	b016      	add	sp, #88	; 0x58
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	466a      	mov	r2, sp
 800b154:	f000 f848 	bl	800b1e8 <_fstat_r>
 800b158:	2800      	cmp	r0, #0
 800b15a:	dbec      	blt.n	800b136 <__swhatbuf_r+0x12>
 800b15c:	9901      	ldr	r1, [sp, #4]
 800b15e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b162:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b166:	4259      	negs	r1, r3
 800b168:	4159      	adcs	r1, r3
 800b16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b16e:	e7eb      	b.n	800b148 <__swhatbuf_r+0x24>

0800b170 <__smakebuf_r>:
 800b170:	898b      	ldrh	r3, [r1, #12]
 800b172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b174:	079d      	lsls	r5, r3, #30
 800b176:	4606      	mov	r6, r0
 800b178:	460c      	mov	r4, r1
 800b17a:	d507      	bpl.n	800b18c <__smakebuf_r+0x1c>
 800b17c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	2301      	movs	r3, #1
 800b186:	6163      	str	r3, [r4, #20]
 800b188:	b002      	add	sp, #8
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	ab01      	add	r3, sp, #4
 800b18e:	466a      	mov	r2, sp
 800b190:	f7ff ffc8 	bl	800b124 <__swhatbuf_r>
 800b194:	9900      	ldr	r1, [sp, #0]
 800b196:	4605      	mov	r5, r0
 800b198:	4630      	mov	r0, r6
 800b19a:	f7ff f9b7 	bl	800a50c <_malloc_r>
 800b19e:	b948      	cbnz	r0, 800b1b4 <__smakebuf_r+0x44>
 800b1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d4ef      	bmi.n	800b188 <__smakebuf_r+0x18>
 800b1a8:	f023 0303 	bic.w	r3, r3, #3
 800b1ac:	f043 0302 	orr.w	r3, r3, #2
 800b1b0:	81a3      	strh	r3, [r4, #12]
 800b1b2:	e7e3      	b.n	800b17c <__smakebuf_r+0xc>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	6020      	str	r0, [r4, #0]
 800b1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	9b00      	ldr	r3, [sp, #0]
 800b1c0:	6163      	str	r3, [r4, #20]
 800b1c2:	9b01      	ldr	r3, [sp, #4]
 800b1c4:	6120      	str	r0, [r4, #16]
 800b1c6:	b15b      	cbz	r3, 800b1e0 <__smakebuf_r+0x70>
 800b1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f000 f81d 	bl	800b20c <_isatty_r>
 800b1d2:	b128      	cbz	r0, 800b1e0 <__smakebuf_r+0x70>
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f023 0303 	bic.w	r3, r3, #3
 800b1da:	f043 0301 	orr.w	r3, r3, #1
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	431d      	orrs	r5, r3
 800b1e4:	81a5      	strh	r5, [r4, #12]
 800b1e6:	e7cf      	b.n	800b188 <__smakebuf_r+0x18>

0800b1e8 <_fstat_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d07      	ldr	r5, [pc, #28]	; (800b208 <_fstat_r+0x20>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	602b      	str	r3, [r5, #0]
 800b1f6:	f7fa ff14 	bl	8006022 <_fstat>
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	d102      	bne.n	800b204 <_fstat_r+0x1c>
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	b103      	cbz	r3, 800b204 <_fstat_r+0x1c>
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	bf00      	nop
 800b208:	200010a0 	.word	0x200010a0

0800b20c <_isatty_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d06      	ldr	r5, [pc, #24]	; (800b228 <_isatty_r+0x1c>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	f7fa ff13 	bl	8006042 <_isatty>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_isatty_r+0x1a>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_isatty_r+0x1a>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	200010a0 	.word	0x200010a0

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d06      	ldr	r5, [pc, #24]	; (800b248 <_sbrk_r+0x1c>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7fa ff1c 	bl	8006074 <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	200010a0 	.word	0x200010a0

0800b24c <abort>:
 800b24c:	b508      	push	{r3, lr}
 800b24e:	2006      	movs	r0, #6
 800b250:	f000 f860 	bl	800b314 <raise>
 800b254:	2001      	movs	r0, #1
 800b256:	f7fa fe95 	bl	8005f84 <_exit>

0800b25a <_calloc_r>:
 800b25a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b25c:	fba1 2402 	umull	r2, r4, r1, r2
 800b260:	b94c      	cbnz	r4, 800b276 <_calloc_r+0x1c>
 800b262:	4611      	mov	r1, r2
 800b264:	9201      	str	r2, [sp, #4]
 800b266:	f7ff f951 	bl	800a50c <_malloc_r>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	4605      	mov	r5, r0
 800b26e:	b930      	cbnz	r0, 800b27e <_calloc_r+0x24>
 800b270:	4628      	mov	r0, r5
 800b272:	b003      	add	sp, #12
 800b274:	bd30      	pop	{r4, r5, pc}
 800b276:	220c      	movs	r2, #12
 800b278:	6002      	str	r2, [r0, #0]
 800b27a:	2500      	movs	r5, #0
 800b27c:	e7f8      	b.n	800b270 <_calloc_r+0x16>
 800b27e:	4621      	mov	r1, r4
 800b280:	f7fe f9a8 	bl	80095d4 <memset>
 800b284:	e7f4      	b.n	800b270 <_calloc_r+0x16>

0800b286 <__ascii_mbtowc>:
 800b286:	b082      	sub	sp, #8
 800b288:	b901      	cbnz	r1, 800b28c <__ascii_mbtowc+0x6>
 800b28a:	a901      	add	r1, sp, #4
 800b28c:	b142      	cbz	r2, 800b2a0 <__ascii_mbtowc+0x1a>
 800b28e:	b14b      	cbz	r3, 800b2a4 <__ascii_mbtowc+0x1e>
 800b290:	7813      	ldrb	r3, [r2, #0]
 800b292:	600b      	str	r3, [r1, #0]
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	1e10      	subs	r0, r2, #0
 800b298:	bf18      	it	ne
 800b29a:	2001      	movne	r0, #1
 800b29c:	b002      	add	sp, #8
 800b29e:	4770      	bx	lr
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	e7fb      	b.n	800b29c <__ascii_mbtowc+0x16>
 800b2a4:	f06f 0001 	mvn.w	r0, #1
 800b2a8:	e7f8      	b.n	800b29c <__ascii_mbtowc+0x16>

0800b2aa <__ascii_wctomb>:
 800b2aa:	b149      	cbz	r1, 800b2c0 <__ascii_wctomb+0x16>
 800b2ac:	2aff      	cmp	r2, #255	; 0xff
 800b2ae:	bf85      	ittet	hi
 800b2b0:	238a      	movhi	r3, #138	; 0x8a
 800b2b2:	6003      	strhi	r3, [r0, #0]
 800b2b4:	700a      	strbls	r2, [r1, #0]
 800b2b6:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2ba:	bf98      	it	ls
 800b2bc:	2001      	movls	r0, #1
 800b2be:	4770      	bx	lr
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	4770      	bx	lr

0800b2c4 <_raise_r>:
 800b2c4:	291f      	cmp	r1, #31
 800b2c6:	b538      	push	{r3, r4, r5, lr}
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	460d      	mov	r5, r1
 800b2cc:	d904      	bls.n	800b2d8 <_raise_r+0x14>
 800b2ce:	2316      	movs	r3, #22
 800b2d0:	6003      	str	r3, [r0, #0]
 800b2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b2da:	b112      	cbz	r2, 800b2e2 <_raise_r+0x1e>
 800b2dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2e0:	b94b      	cbnz	r3, 800b2f6 <_raise_r+0x32>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 f830 	bl	800b348 <_getpid_r>
 800b2e8:	462a      	mov	r2, r5
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2f2:	f000 b817 	b.w	800b324 <_kill_r>
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d00a      	beq.n	800b310 <_raise_r+0x4c>
 800b2fa:	1c59      	adds	r1, r3, #1
 800b2fc:	d103      	bne.n	800b306 <_raise_r+0x42>
 800b2fe:	2316      	movs	r3, #22
 800b300:	6003      	str	r3, [r0, #0]
 800b302:	2001      	movs	r0, #1
 800b304:	e7e7      	b.n	800b2d6 <_raise_r+0x12>
 800b306:	2400      	movs	r4, #0
 800b308:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b30c:	4628      	mov	r0, r5
 800b30e:	4798      	blx	r3
 800b310:	2000      	movs	r0, #0
 800b312:	e7e0      	b.n	800b2d6 <_raise_r+0x12>

0800b314 <raise>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <raise+0xc>)
 800b316:	4601      	mov	r1, r0
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f7ff bfd3 	b.w	800b2c4 <_raise_r>
 800b31e:	bf00      	nop
 800b320:	20000454 	.word	0x20000454

0800b324 <_kill_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4d07      	ldr	r5, [pc, #28]	; (800b344 <_kill_r+0x20>)
 800b328:	2300      	movs	r3, #0
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	f7fa fe17 	bl	8005f64 <_kill>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d102      	bne.n	800b340 <_kill_r+0x1c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	b103      	cbz	r3, 800b340 <_kill_r+0x1c>
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	bd38      	pop	{r3, r4, r5, pc}
 800b342:	bf00      	nop
 800b344:	200010a0 	.word	0x200010a0

0800b348 <_getpid_r>:
 800b348:	f7fa be04 	b.w	8005f54 <_getpid>

0800b34c <atan2>:
 800b34c:	f000 b9cc 	b.w	800b6e8 <__ieee754_atan2>

0800b350 <log10>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	ed2d 8b02 	vpush	{d8}
 800b356:	ec55 4b10 	vmov	r4, r5, d0
 800b35a:	f000 fa8d 	bl	800b878 <__ieee754_log10>
 800b35e:	4622      	mov	r2, r4
 800b360:	462b      	mov	r3, r5
 800b362:	4620      	mov	r0, r4
 800b364:	4629      	mov	r1, r5
 800b366:	eeb0 8a40 	vmov.f32	s16, s0
 800b36a:	eef0 8a60 	vmov.f32	s17, s1
 800b36e:	f7f5 fbe5 	bl	8000b3c <__aeabi_dcmpun>
 800b372:	b998      	cbnz	r0, 800b39c <log10+0x4c>
 800b374:	2200      	movs	r2, #0
 800b376:	2300      	movs	r3, #0
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f5 fbc0 	bl	8000b00 <__aeabi_dcmple>
 800b380:	b160      	cbz	r0, 800b39c <log10+0x4c>
 800b382:	2200      	movs	r2, #0
 800b384:	2300      	movs	r3, #0
 800b386:	4620      	mov	r0, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	f7f5 fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b38e:	b160      	cbz	r0, 800b3aa <log10+0x5a>
 800b390:	f7fe f972 	bl	8009678 <__errno>
 800b394:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b3c0 <log10+0x70>
 800b398:	2322      	movs	r3, #34	; 0x22
 800b39a:	6003      	str	r3, [r0, #0]
 800b39c:	eeb0 0a48 	vmov.f32	s0, s16
 800b3a0:	eef0 0a68 	vmov.f32	s1, s17
 800b3a4:	ecbd 8b02 	vpop	{d8}
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
 800b3aa:	f7fe f965 	bl	8009678 <__errno>
 800b3ae:	ecbd 8b02 	vpop	{d8}
 800b3b2:	2321      	movs	r3, #33	; 0x21
 800b3b4:	6003      	str	r3, [r0, #0]
 800b3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ba:	4803      	ldr	r0, [pc, #12]	; (800b3c8 <log10+0x78>)
 800b3bc:	f000 b8b0 	b.w	800b520 <nan>
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	fff00000 	.word	0xfff00000
 800b3c8:	0800cf23 	.word	0x0800cf23

0800b3cc <pow>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	ed2d 8b02 	vpush	{d8}
 800b3d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b3d6:	eef0 8a60 	vmov.f32	s17, s1
 800b3da:	ec55 4b11 	vmov	r4, r5, d1
 800b3de:	f000 fad7 	bl	800b990 <__ieee754_pow>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	ec57 6b10 	vmov	r6, r7, d0
 800b3ee:	f7f5 fba5 	bl	8000b3c <__aeabi_dcmpun>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d13b      	bne.n	800b46e <pow+0xa2>
 800b3f6:	ec51 0b18 	vmov	r0, r1, d8
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f7f5 fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b402:	b1b8      	cbz	r0, 800b434 <pow+0x68>
 800b404:	2200      	movs	r2, #0
 800b406:	2300      	movs	r3, #0
 800b408:	4620      	mov	r0, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	f7f5 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 800b410:	2800      	cmp	r0, #0
 800b412:	d146      	bne.n	800b4a2 <pow+0xd6>
 800b414:	ec45 4b10 	vmov	d0, r4, r5
 800b418:	f000 f874 	bl	800b504 <finite>
 800b41c:	b338      	cbz	r0, 800b46e <pow+0xa2>
 800b41e:	2200      	movs	r2, #0
 800b420:	2300      	movs	r3, #0
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 fb61 	bl	8000aec <__aeabi_dcmplt>
 800b42a:	b300      	cbz	r0, 800b46e <pow+0xa2>
 800b42c:	f7fe f924 	bl	8009678 <__errno>
 800b430:	2322      	movs	r3, #34	; 0x22
 800b432:	e01b      	b.n	800b46c <pow+0xa0>
 800b434:	ec47 6b10 	vmov	d0, r6, r7
 800b438:	f000 f864 	bl	800b504 <finite>
 800b43c:	b9e0      	cbnz	r0, 800b478 <pow+0xac>
 800b43e:	eeb0 0a48 	vmov.f32	s0, s16
 800b442:	eef0 0a68 	vmov.f32	s1, s17
 800b446:	f000 f85d 	bl	800b504 <finite>
 800b44a:	b1a8      	cbz	r0, 800b478 <pow+0xac>
 800b44c:	ec45 4b10 	vmov	d0, r4, r5
 800b450:	f000 f858 	bl	800b504 <finite>
 800b454:	b180      	cbz	r0, 800b478 <pow+0xac>
 800b456:	4632      	mov	r2, r6
 800b458:	463b      	mov	r3, r7
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f5 fb6d 	bl	8000b3c <__aeabi_dcmpun>
 800b462:	2800      	cmp	r0, #0
 800b464:	d0e2      	beq.n	800b42c <pow+0x60>
 800b466:	f7fe f907 	bl	8009678 <__errno>
 800b46a:	2321      	movs	r3, #33	; 0x21
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	ecbd 8b02 	vpop	{d8}
 800b472:	ec47 6b10 	vmov	d0, r6, r7
 800b476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b478:	2200      	movs	r2, #0
 800b47a:	2300      	movs	r3, #0
 800b47c:	4630      	mov	r0, r6
 800b47e:	4639      	mov	r1, r7
 800b480:	f7f5 fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b484:	2800      	cmp	r0, #0
 800b486:	d0f2      	beq.n	800b46e <pow+0xa2>
 800b488:	eeb0 0a48 	vmov.f32	s0, s16
 800b48c:	eef0 0a68 	vmov.f32	s1, s17
 800b490:	f000 f838 	bl	800b504 <finite>
 800b494:	2800      	cmp	r0, #0
 800b496:	d0ea      	beq.n	800b46e <pow+0xa2>
 800b498:	ec45 4b10 	vmov	d0, r4, r5
 800b49c:	f000 f832 	bl	800b504 <finite>
 800b4a0:	e7c3      	b.n	800b42a <pow+0x5e>
 800b4a2:	4f01      	ldr	r7, [pc, #4]	; (800b4a8 <pow+0xdc>)
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	e7e2      	b.n	800b46e <pow+0xa2>
 800b4a8:	3ff00000 	.word	0x3ff00000

0800b4ac <sqrt>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	ed2d 8b02 	vpush	{d8}
 800b4b2:	ec55 4b10 	vmov	r4, r5, d0
 800b4b6:	f000 f83b 	bl	800b530 <__ieee754_sqrt>
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	462b      	mov	r3, r5
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	eeb0 8a40 	vmov.f32	s16, s0
 800b4c6:	eef0 8a60 	vmov.f32	s17, s1
 800b4ca:	f7f5 fb37 	bl	8000b3c <__aeabi_dcmpun>
 800b4ce:	b990      	cbnz	r0, 800b4f6 <sqrt+0x4a>
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f5 fb08 	bl	8000aec <__aeabi_dcmplt>
 800b4dc:	b158      	cbz	r0, 800b4f6 <sqrt+0x4a>
 800b4de:	f7fe f8cb 	bl	8009678 <__errno>
 800b4e2:	2321      	movs	r3, #33	; 0x21
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	f7f5 f9b5 	bl	800085c <__aeabi_ddiv>
 800b4f2:	ec41 0b18 	vmov	d8, r0, r1
 800b4f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b4fa:	eef0 0a68 	vmov.f32	s1, s17
 800b4fe:	ecbd 8b02 	vpop	{d8}
 800b502:	bd38      	pop	{r3, r4, r5, pc}

0800b504 <finite>:
 800b504:	b082      	sub	sp, #8
 800b506:	ed8d 0b00 	vstr	d0, [sp]
 800b50a:	9801      	ldr	r0, [sp, #4]
 800b50c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b510:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b514:	0fc0      	lsrs	r0, r0, #31
 800b516:	b002      	add	sp, #8
 800b518:	4770      	bx	lr
 800b51a:	0000      	movs	r0, r0
 800b51c:	0000      	movs	r0, r0
	...

0800b520 <nan>:
 800b520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b528 <nan+0x8>
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	00000000 	.word	0x00000000
 800b52c:	7ff80000 	.word	0x7ff80000

0800b530 <__ieee754_sqrt>:
 800b530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	ec55 4b10 	vmov	r4, r5, d0
 800b538:	4e67      	ldr	r6, [pc, #412]	; (800b6d8 <__ieee754_sqrt+0x1a8>)
 800b53a:	43ae      	bics	r6, r5
 800b53c:	ee10 0a10 	vmov	r0, s0
 800b540:	ee10 2a10 	vmov	r2, s0
 800b544:	4629      	mov	r1, r5
 800b546:	462b      	mov	r3, r5
 800b548:	d10d      	bne.n	800b566 <__ieee754_sqrt+0x36>
 800b54a:	f7f5 f85d 	bl	8000608 <__aeabi_dmul>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	f7f4 fea1 	bl	800029c <__adddf3>
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	ec45 4b10 	vmov	d0, r4, r5
 800b562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	2d00      	cmp	r5, #0
 800b568:	dc0b      	bgt.n	800b582 <__ieee754_sqrt+0x52>
 800b56a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b56e:	4326      	orrs	r6, r4
 800b570:	d0f5      	beq.n	800b55e <__ieee754_sqrt+0x2e>
 800b572:	b135      	cbz	r5, 800b582 <__ieee754_sqrt+0x52>
 800b574:	f7f4 fe90 	bl	8000298 <__aeabi_dsub>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	f7f5 f96e 	bl	800085c <__aeabi_ddiv>
 800b580:	e7eb      	b.n	800b55a <__ieee754_sqrt+0x2a>
 800b582:	1509      	asrs	r1, r1, #20
 800b584:	f000 808d 	beq.w	800b6a2 <__ieee754_sqrt+0x172>
 800b588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b58c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b594:	07c9      	lsls	r1, r1, #31
 800b596:	bf5c      	itt	pl
 800b598:	005b      	lslpl	r3, r3, #1
 800b59a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b59e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b5a2:	bf58      	it	pl
 800b5a4:	0052      	lslpl	r2, r2, #1
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b5ac:	1076      	asrs	r6, r6, #1
 800b5ae:	0052      	lsls	r2, r2, #1
 800b5b0:	f04f 0e16 	mov.w	lr, #22
 800b5b4:	46ac      	mov	ip, r5
 800b5b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5ba:	eb0c 0001 	add.w	r0, ip, r1
 800b5be:	4298      	cmp	r0, r3
 800b5c0:	bfde      	ittt	le
 800b5c2:	1a1b      	suble	r3, r3, r0
 800b5c4:	eb00 0c01 	addle.w	ip, r0, r1
 800b5c8:	186d      	addle	r5, r5, r1
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	f1be 0e01 	subs.w	lr, lr, #1
 800b5d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b5d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5dc:	d1ed      	bne.n	800b5ba <__ieee754_sqrt+0x8a>
 800b5de:	4674      	mov	r4, lr
 800b5e0:	2720      	movs	r7, #32
 800b5e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b5e6:	4563      	cmp	r3, ip
 800b5e8:	eb01 000e 	add.w	r0, r1, lr
 800b5ec:	dc02      	bgt.n	800b5f4 <__ieee754_sqrt+0xc4>
 800b5ee:	d113      	bne.n	800b618 <__ieee754_sqrt+0xe8>
 800b5f0:	4290      	cmp	r0, r2
 800b5f2:	d811      	bhi.n	800b618 <__ieee754_sqrt+0xe8>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	eb00 0e01 	add.w	lr, r0, r1
 800b5fa:	da57      	bge.n	800b6ac <__ieee754_sqrt+0x17c>
 800b5fc:	f1be 0f00 	cmp.w	lr, #0
 800b600:	db54      	blt.n	800b6ac <__ieee754_sqrt+0x17c>
 800b602:	f10c 0801 	add.w	r8, ip, #1
 800b606:	eba3 030c 	sub.w	r3, r3, ip
 800b60a:	4290      	cmp	r0, r2
 800b60c:	bf88      	it	hi
 800b60e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b612:	1a12      	subs	r2, r2, r0
 800b614:	440c      	add	r4, r1
 800b616:	46c4      	mov	ip, r8
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	3f01      	subs	r7, #1
 800b61c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b620:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b624:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b628:	d1dd      	bne.n	800b5e6 <__ieee754_sqrt+0xb6>
 800b62a:	4313      	orrs	r3, r2
 800b62c:	d01b      	beq.n	800b666 <__ieee754_sqrt+0x136>
 800b62e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b6dc <__ieee754_sqrt+0x1ac>
 800b632:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b6e0 <__ieee754_sqrt+0x1b0>
 800b636:	e9da 0100 	ldrd	r0, r1, [sl]
 800b63a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b63e:	f7f4 fe2b 	bl	8000298 <__aeabi_dsub>
 800b642:	e9da 8900 	ldrd	r8, r9, [sl]
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f5 fa57 	bl	8000b00 <__aeabi_dcmple>
 800b652:	b140      	cbz	r0, 800b666 <__ieee754_sqrt+0x136>
 800b654:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b658:	e9da 0100 	ldrd	r0, r1, [sl]
 800b65c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b660:	d126      	bne.n	800b6b0 <__ieee754_sqrt+0x180>
 800b662:	3501      	adds	r5, #1
 800b664:	463c      	mov	r4, r7
 800b666:	106a      	asrs	r2, r5, #1
 800b668:	0863      	lsrs	r3, r4, #1
 800b66a:	07e9      	lsls	r1, r5, #31
 800b66c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b670:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b674:	bf48      	it	mi
 800b676:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b67a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b67e:	461c      	mov	r4, r3
 800b680:	e76d      	b.n	800b55e <__ieee754_sqrt+0x2e>
 800b682:	0ad3      	lsrs	r3, r2, #11
 800b684:	3815      	subs	r0, #21
 800b686:	0552      	lsls	r2, r2, #21
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0fa      	beq.n	800b682 <__ieee754_sqrt+0x152>
 800b68c:	02dc      	lsls	r4, r3, #11
 800b68e:	d50a      	bpl.n	800b6a6 <__ieee754_sqrt+0x176>
 800b690:	f1c1 0420 	rsb	r4, r1, #32
 800b694:	fa22 f404 	lsr.w	r4, r2, r4
 800b698:	1e4d      	subs	r5, r1, #1
 800b69a:	408a      	lsls	r2, r1
 800b69c:	4323      	orrs	r3, r4
 800b69e:	1b41      	subs	r1, r0, r5
 800b6a0:	e772      	b.n	800b588 <__ieee754_sqrt+0x58>
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	e7f0      	b.n	800b688 <__ieee754_sqrt+0x158>
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	e7ef      	b.n	800b68c <__ieee754_sqrt+0x15c>
 800b6ac:	46e0      	mov	r8, ip
 800b6ae:	e7aa      	b.n	800b606 <__ieee754_sqrt+0xd6>
 800b6b0:	f7f4 fdf4 	bl	800029c <__adddf3>
 800b6b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4640      	mov	r0, r8
 800b6be:	4649      	mov	r1, r9
 800b6c0:	f7f5 fa14 	bl	8000aec <__aeabi_dcmplt>
 800b6c4:	b120      	cbz	r0, 800b6d0 <__ieee754_sqrt+0x1a0>
 800b6c6:	1ca0      	adds	r0, r4, #2
 800b6c8:	bf08      	it	eq
 800b6ca:	3501      	addeq	r5, #1
 800b6cc:	3402      	adds	r4, #2
 800b6ce:	e7ca      	b.n	800b666 <__ieee754_sqrt+0x136>
 800b6d0:	3401      	adds	r4, #1
 800b6d2:	f024 0401 	bic.w	r4, r4, #1
 800b6d6:	e7c6      	b.n	800b666 <__ieee754_sqrt+0x136>
 800b6d8:	7ff00000 	.word	0x7ff00000
 800b6dc:	200005c8 	.word	0x200005c8
 800b6e0:	200005d0 	.word	0x200005d0
 800b6e4:	00000000 	.word	0x00000000

0800b6e8 <__ieee754_atan2>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	ec57 6b11 	vmov	r6, r7, d1
 800b6f0:	4273      	negs	r3, r6
 800b6f2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b870 <__ieee754_atan2+0x188>
 800b6f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b6fa:	4333      	orrs	r3, r6
 800b6fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b700:	4543      	cmp	r3, r8
 800b702:	ec51 0b10 	vmov	r0, r1, d0
 800b706:	ee11 5a10 	vmov	r5, s2
 800b70a:	d80a      	bhi.n	800b722 <__ieee754_atan2+0x3a>
 800b70c:	4244      	negs	r4, r0
 800b70e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b712:	4304      	orrs	r4, r0
 800b714:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b718:	4544      	cmp	r4, r8
 800b71a:	ee10 9a10 	vmov	r9, s0
 800b71e:	468e      	mov	lr, r1
 800b720:	d907      	bls.n	800b732 <__ieee754_atan2+0x4a>
 800b722:	4632      	mov	r2, r6
 800b724:	463b      	mov	r3, r7
 800b726:	f7f4 fdb9 	bl	800029c <__adddf3>
 800b72a:	ec41 0b10 	vmov	d0, r0, r1
 800b72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b732:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b736:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b73a:	4334      	orrs	r4, r6
 800b73c:	d103      	bne.n	800b746 <__ieee754_atan2+0x5e>
 800b73e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b742:	f000 be51 	b.w	800c3e8 <atan>
 800b746:	17bc      	asrs	r4, r7, #30
 800b748:	f004 0402 	and.w	r4, r4, #2
 800b74c:	ea53 0909 	orrs.w	r9, r3, r9
 800b750:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b754:	d107      	bne.n	800b766 <__ieee754_atan2+0x7e>
 800b756:	2c02      	cmp	r4, #2
 800b758:	d05f      	beq.n	800b81a <__ieee754_atan2+0x132>
 800b75a:	2c03      	cmp	r4, #3
 800b75c:	d1e5      	bne.n	800b72a <__ieee754_atan2+0x42>
 800b75e:	a140      	add	r1, pc, #256	; (adr r1, 800b860 <__ieee754_atan2+0x178>)
 800b760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b764:	e7e1      	b.n	800b72a <__ieee754_atan2+0x42>
 800b766:	4315      	orrs	r5, r2
 800b768:	d106      	bne.n	800b778 <__ieee754_atan2+0x90>
 800b76a:	f1be 0f00 	cmp.w	lr, #0
 800b76e:	da5f      	bge.n	800b830 <__ieee754_atan2+0x148>
 800b770:	a13d      	add	r1, pc, #244	; (adr r1, 800b868 <__ieee754_atan2+0x180>)
 800b772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b776:	e7d8      	b.n	800b72a <__ieee754_atan2+0x42>
 800b778:	4542      	cmp	r2, r8
 800b77a:	d10f      	bne.n	800b79c <__ieee754_atan2+0xb4>
 800b77c:	4293      	cmp	r3, r2
 800b77e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b782:	d107      	bne.n	800b794 <__ieee754_atan2+0xac>
 800b784:	2c02      	cmp	r4, #2
 800b786:	d84c      	bhi.n	800b822 <__ieee754_atan2+0x13a>
 800b788:	4b33      	ldr	r3, [pc, #204]	; (800b858 <__ieee754_atan2+0x170>)
 800b78a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b78e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b792:	e7ca      	b.n	800b72a <__ieee754_atan2+0x42>
 800b794:	2c02      	cmp	r4, #2
 800b796:	d848      	bhi.n	800b82a <__ieee754_atan2+0x142>
 800b798:	4b30      	ldr	r3, [pc, #192]	; (800b85c <__ieee754_atan2+0x174>)
 800b79a:	e7f6      	b.n	800b78a <__ieee754_atan2+0xa2>
 800b79c:	4543      	cmp	r3, r8
 800b79e:	d0e4      	beq.n	800b76a <__ieee754_atan2+0x82>
 800b7a0:	1a9b      	subs	r3, r3, r2
 800b7a2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b7a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7aa:	da1e      	bge.n	800b7ea <__ieee754_atan2+0x102>
 800b7ac:	2f00      	cmp	r7, #0
 800b7ae:	da01      	bge.n	800b7b4 <__ieee754_atan2+0xcc>
 800b7b0:	323c      	adds	r2, #60	; 0x3c
 800b7b2:	db1e      	blt.n	800b7f2 <__ieee754_atan2+0x10a>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	f7f5 f850 	bl	800085c <__aeabi_ddiv>
 800b7bc:	ec41 0b10 	vmov	d0, r0, r1
 800b7c0:	f000 ffb2 	bl	800c728 <fabs>
 800b7c4:	f000 fe10 	bl	800c3e8 <atan>
 800b7c8:	ec51 0b10 	vmov	r0, r1, d0
 800b7cc:	2c01      	cmp	r4, #1
 800b7ce:	d013      	beq.n	800b7f8 <__ieee754_atan2+0x110>
 800b7d0:	2c02      	cmp	r4, #2
 800b7d2:	d015      	beq.n	800b800 <__ieee754_atan2+0x118>
 800b7d4:	2c00      	cmp	r4, #0
 800b7d6:	d0a8      	beq.n	800b72a <__ieee754_atan2+0x42>
 800b7d8:	a317      	add	r3, pc, #92	; (adr r3, 800b838 <__ieee754_atan2+0x150>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f4 fd5b 	bl	8000298 <__aeabi_dsub>
 800b7e2:	a317      	add	r3, pc, #92	; (adr r3, 800b840 <__ieee754_atan2+0x158>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	e014      	b.n	800b814 <__ieee754_atan2+0x12c>
 800b7ea:	a117      	add	r1, pc, #92	; (adr r1, 800b848 <__ieee754_atan2+0x160>)
 800b7ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7f0:	e7ec      	b.n	800b7cc <__ieee754_atan2+0xe4>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	e7e9      	b.n	800b7cc <__ieee754_atan2+0xe4>
 800b7f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	e794      	b.n	800b72a <__ieee754_atan2+0x42>
 800b800:	a30d      	add	r3, pc, #52	; (adr r3, 800b838 <__ieee754_atan2+0x150>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	f7f4 fd47 	bl	8000298 <__aeabi_dsub>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	a10c      	add	r1, pc, #48	; (adr r1, 800b840 <__ieee754_atan2+0x158>)
 800b810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b814:	f7f4 fd40 	bl	8000298 <__aeabi_dsub>
 800b818:	e787      	b.n	800b72a <__ieee754_atan2+0x42>
 800b81a:	a109      	add	r1, pc, #36	; (adr r1, 800b840 <__ieee754_atan2+0x158>)
 800b81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b820:	e783      	b.n	800b72a <__ieee754_atan2+0x42>
 800b822:	a10b      	add	r1, pc, #44	; (adr r1, 800b850 <__ieee754_atan2+0x168>)
 800b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b828:	e77f      	b.n	800b72a <__ieee754_atan2+0x42>
 800b82a:	2000      	movs	r0, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	e77c      	b.n	800b72a <__ieee754_atan2+0x42>
 800b830:	a105      	add	r1, pc, #20	; (adr r1, 800b848 <__ieee754_atan2+0x160>)
 800b832:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b836:	e778      	b.n	800b72a <__ieee754_atan2+0x42>
 800b838:	33145c07 	.word	0x33145c07
 800b83c:	3ca1a626 	.word	0x3ca1a626
 800b840:	54442d18 	.word	0x54442d18
 800b844:	400921fb 	.word	0x400921fb
 800b848:	54442d18 	.word	0x54442d18
 800b84c:	3ff921fb 	.word	0x3ff921fb
 800b850:	54442d18 	.word	0x54442d18
 800b854:	3fe921fb 	.word	0x3fe921fb
 800b858:	0800d228 	.word	0x0800d228
 800b85c:	0800d240 	.word	0x0800d240
 800b860:	54442d18 	.word	0x54442d18
 800b864:	c00921fb 	.word	0xc00921fb
 800b868:	54442d18 	.word	0x54442d18
 800b86c:	bff921fb 	.word	0xbff921fb
 800b870:	7ff00000 	.word	0x7ff00000
 800b874:	00000000 	.word	0x00000000

0800b878 <__ieee754_log10>:
 800b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b87c:	ec55 4b10 	vmov	r4, r5, d0
 800b880:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800b884:	462b      	mov	r3, r5
 800b886:	da2f      	bge.n	800b8e8 <__ieee754_log10+0x70>
 800b888:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b88c:	4322      	orrs	r2, r4
 800b88e:	d109      	bne.n	800b8a4 <__ieee754_log10+0x2c>
 800b890:	493b      	ldr	r1, [pc, #236]	; (800b980 <__ieee754_log10+0x108>)
 800b892:	2200      	movs	r2, #0
 800b894:	2300      	movs	r3, #0
 800b896:	2000      	movs	r0, #0
 800b898:	f7f4 ffe0 	bl	800085c <__aeabi_ddiv>
 800b89c:	ec41 0b10 	vmov	d0, r0, r1
 800b8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	da09      	bge.n	800b8bc <__ieee754_log10+0x44>
 800b8a8:	ee10 2a10 	vmov	r2, s0
 800b8ac:	ee10 0a10 	vmov	r0, s0
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f4 fcf1 	bl	8000298 <__aeabi_dsub>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e7ed      	b.n	800b898 <__ieee754_log10+0x20>
 800b8bc:	4b31      	ldr	r3, [pc, #196]	; (800b984 <__ieee754_log10+0x10c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	ee10 0a10 	vmov	r0, s0
 800b8c6:	f7f4 fe9f 	bl	8000608 <__aeabi_dmul>
 800b8ca:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	492c      	ldr	r1, [pc, #176]	; (800b988 <__ieee754_log10+0x110>)
 800b8d6:	428b      	cmp	r3, r1
 800b8d8:	dd08      	ble.n	800b8ec <__ieee754_log10+0x74>
 800b8da:	4622      	mov	r2, r4
 800b8dc:	462b      	mov	r3, r5
 800b8de:	4620      	mov	r0, r4
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f7f4 fcdb 	bl	800029c <__adddf3>
 800b8e6:	e7d9      	b.n	800b89c <__ieee754_log10+0x24>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	e7f3      	b.n	800b8d4 <__ieee754_log10+0x5c>
 800b8ec:	1518      	asrs	r0, r3, #20
 800b8ee:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b8f2:	4410      	add	r0, r2
 800b8f4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800b8f8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b8fc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800b900:	f7f4 fe18 	bl	8000534 <__aeabi_i2d>
 800b904:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800b908:	3303      	adds	r3, #3
 800b90a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800b90e:	ec45 4b10 	vmov	d0, r4, r5
 800b912:	4606      	mov	r6, r0
 800b914:	460f      	mov	r7, r1
 800b916:	f000 ffc3 	bl	800c8a0 <__ieee754_log>
 800b91a:	a313      	add	r3, pc, #76	; (adr r3, 800b968 <__ieee754_log10+0xf0>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	4630      	mov	r0, r6
 800b922:	4639      	mov	r1, r7
 800b924:	ec59 8b10 	vmov	r8, r9, d0
 800b928:	f7f4 fe6e 	bl	8000608 <__aeabi_dmul>
 800b92c:	a310      	add	r3, pc, #64	; (adr r3, 800b970 <__ieee754_log10+0xf8>)
 800b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b932:	4604      	mov	r4, r0
 800b934:	460d      	mov	r5, r1
 800b936:	4640      	mov	r0, r8
 800b938:	4649      	mov	r1, r9
 800b93a:	f7f4 fe65 	bl	8000608 <__aeabi_dmul>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	f7f4 fca9 	bl	800029c <__adddf3>
 800b94a:	a30b      	add	r3, pc, #44	; (adr r3, 800b978 <__ieee754_log10+0x100>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f4 fe56 	bl	8000608 <__aeabi_dmul>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	e7bd      	b.n	800b8e2 <__ieee754_log10+0x6a>
 800b966:	bf00      	nop
 800b968:	11f12b36 	.word	0x11f12b36
 800b96c:	3d59fef3 	.word	0x3d59fef3
 800b970:	1526e50e 	.word	0x1526e50e
 800b974:	3fdbcb7b 	.word	0x3fdbcb7b
 800b978:	509f6000 	.word	0x509f6000
 800b97c:	3fd34413 	.word	0x3fd34413
 800b980:	c3500000 	.word	0xc3500000
 800b984:	43500000 	.word	0x43500000
 800b988:	7fefffff 	.word	0x7fefffff
 800b98c:	00000000 	.word	0x00000000

0800b990 <__ieee754_pow>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	ed2d 8b06 	vpush	{d8-d10}
 800b998:	b089      	sub	sp, #36	; 0x24
 800b99a:	ed8d 1b00 	vstr	d1, [sp]
 800b99e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b9a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b9a6:	ea58 0102 	orrs.w	r1, r8, r2
 800b9aa:	ec57 6b10 	vmov	r6, r7, d0
 800b9ae:	d115      	bne.n	800b9dc <__ieee754_pow+0x4c>
 800b9b0:	19b3      	adds	r3, r6, r6
 800b9b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b9b6:	4152      	adcs	r2, r2
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	4b89      	ldr	r3, [pc, #548]	; (800bbe0 <__ieee754_pow+0x250>)
 800b9bc:	4193      	sbcs	r3, r2
 800b9be:	f080 84d1 	bcs.w	800c364 <__ieee754_pow+0x9d4>
 800b9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f4 fc67 	bl	800029c <__adddf3>
 800b9ce:	ec41 0b10 	vmov	d0, r0, r1
 800b9d2:	b009      	add	sp, #36	; 0x24
 800b9d4:	ecbd 8b06 	vpop	{d8-d10}
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9dc:	4b81      	ldr	r3, [pc, #516]	; (800bbe4 <__ieee754_pow+0x254>)
 800b9de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b9e2:	429c      	cmp	r4, r3
 800b9e4:	ee10 aa10 	vmov	sl, s0
 800b9e8:	463d      	mov	r5, r7
 800b9ea:	dc06      	bgt.n	800b9fa <__ieee754_pow+0x6a>
 800b9ec:	d101      	bne.n	800b9f2 <__ieee754_pow+0x62>
 800b9ee:	2e00      	cmp	r6, #0
 800b9f0:	d1e7      	bne.n	800b9c2 <__ieee754_pow+0x32>
 800b9f2:	4598      	cmp	r8, r3
 800b9f4:	dc01      	bgt.n	800b9fa <__ieee754_pow+0x6a>
 800b9f6:	d10f      	bne.n	800ba18 <__ieee754_pow+0x88>
 800b9f8:	b172      	cbz	r2, 800ba18 <__ieee754_pow+0x88>
 800b9fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b9fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba02:	ea55 050a 	orrs.w	r5, r5, sl
 800ba06:	d1dc      	bne.n	800b9c2 <__ieee754_pow+0x32>
 800ba08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba0c:	18db      	adds	r3, r3, r3
 800ba0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba12:	4152      	adcs	r2, r2
 800ba14:	429d      	cmp	r5, r3
 800ba16:	e7d0      	b.n	800b9ba <__ieee754_pow+0x2a>
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	da3b      	bge.n	800ba94 <__ieee754_pow+0x104>
 800ba1c:	4b72      	ldr	r3, [pc, #456]	; (800bbe8 <__ieee754_pow+0x258>)
 800ba1e:	4598      	cmp	r8, r3
 800ba20:	dc51      	bgt.n	800bac6 <__ieee754_pow+0x136>
 800ba22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba26:	4598      	cmp	r8, r3
 800ba28:	f340 84ab 	ble.w	800c382 <__ieee754_pow+0x9f2>
 800ba2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba34:	2b14      	cmp	r3, #20
 800ba36:	dd0f      	ble.n	800ba58 <__ieee754_pow+0xc8>
 800ba38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba3c:	fa22 f103 	lsr.w	r1, r2, r3
 800ba40:	fa01 f303 	lsl.w	r3, r1, r3
 800ba44:	4293      	cmp	r3, r2
 800ba46:	f040 849c 	bne.w	800c382 <__ieee754_pow+0x9f2>
 800ba4a:	f001 0101 	and.w	r1, r1, #1
 800ba4e:	f1c1 0302 	rsb	r3, r1, #2
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	b182      	cbz	r2, 800ba78 <__ieee754_pow+0xe8>
 800ba56:	e05f      	b.n	800bb18 <__ieee754_pow+0x188>
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	d15b      	bne.n	800bb14 <__ieee754_pow+0x184>
 800ba5c:	f1c3 0314 	rsb	r3, r3, #20
 800ba60:	fa48 f103 	asr.w	r1, r8, r3
 800ba64:	fa01 f303 	lsl.w	r3, r1, r3
 800ba68:	4543      	cmp	r3, r8
 800ba6a:	f040 8487 	bne.w	800c37c <__ieee754_pow+0x9ec>
 800ba6e:	f001 0101 	and.w	r1, r1, #1
 800ba72:	f1c1 0302 	rsb	r3, r1, #2
 800ba76:	9304      	str	r3, [sp, #16]
 800ba78:	4b5c      	ldr	r3, [pc, #368]	; (800bbec <__ieee754_pow+0x25c>)
 800ba7a:	4598      	cmp	r8, r3
 800ba7c:	d132      	bne.n	800bae4 <__ieee754_pow+0x154>
 800ba7e:	f1b9 0f00 	cmp.w	r9, #0
 800ba82:	f280 8477 	bge.w	800c374 <__ieee754_pow+0x9e4>
 800ba86:	4959      	ldr	r1, [pc, #356]	; (800bbec <__ieee754_pow+0x25c>)
 800ba88:	4632      	mov	r2, r6
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	f7f4 fee5 	bl	800085c <__aeabi_ddiv>
 800ba92:	e79c      	b.n	800b9ce <__ieee754_pow+0x3e>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	d13d      	bne.n	800bb18 <__ieee754_pow+0x188>
 800ba9c:	4b51      	ldr	r3, [pc, #324]	; (800bbe4 <__ieee754_pow+0x254>)
 800ba9e:	4598      	cmp	r8, r3
 800baa0:	d1ea      	bne.n	800ba78 <__ieee754_pow+0xe8>
 800baa2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800baa6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800baaa:	ea53 030a 	orrs.w	r3, r3, sl
 800baae:	f000 8459 	beq.w	800c364 <__ieee754_pow+0x9d4>
 800bab2:	4b4f      	ldr	r3, [pc, #316]	; (800bbf0 <__ieee754_pow+0x260>)
 800bab4:	429c      	cmp	r4, r3
 800bab6:	dd08      	ble.n	800baca <__ieee754_pow+0x13a>
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	f2c0 8456 	blt.w	800c36c <__ieee754_pow+0x9dc>
 800bac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bac4:	e783      	b.n	800b9ce <__ieee754_pow+0x3e>
 800bac6:	2302      	movs	r3, #2
 800bac8:	e7e5      	b.n	800ba96 <__ieee754_pow+0x106>
 800baca:	f1b9 0f00 	cmp.w	r9, #0
 800bace:	f04f 0000 	mov.w	r0, #0
 800bad2:	f04f 0100 	mov.w	r1, #0
 800bad6:	f6bf af7a 	bge.w	800b9ce <__ieee754_pow+0x3e>
 800bada:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bade:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bae2:	e774      	b.n	800b9ce <__ieee754_pow+0x3e>
 800bae4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bae8:	d106      	bne.n	800baf8 <__ieee754_pow+0x168>
 800baea:	4632      	mov	r2, r6
 800baec:	463b      	mov	r3, r7
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fd89 	bl	8000608 <__aeabi_dmul>
 800baf6:	e76a      	b.n	800b9ce <__ieee754_pow+0x3e>
 800baf8:	4b3e      	ldr	r3, [pc, #248]	; (800bbf4 <__ieee754_pow+0x264>)
 800bafa:	4599      	cmp	r9, r3
 800bafc:	d10c      	bne.n	800bb18 <__ieee754_pow+0x188>
 800bafe:	2d00      	cmp	r5, #0
 800bb00:	db0a      	blt.n	800bb18 <__ieee754_pow+0x188>
 800bb02:	ec47 6b10 	vmov	d0, r6, r7
 800bb06:	b009      	add	sp, #36	; 0x24
 800bb08:	ecbd 8b06 	vpop	{d8-d10}
 800bb0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	f7ff bd0e 	b.w	800b530 <__ieee754_sqrt>
 800bb14:	2300      	movs	r3, #0
 800bb16:	9304      	str	r3, [sp, #16]
 800bb18:	ec47 6b10 	vmov	d0, r6, r7
 800bb1c:	f000 fe04 	bl	800c728 <fabs>
 800bb20:	ec51 0b10 	vmov	r0, r1, d0
 800bb24:	f1ba 0f00 	cmp.w	sl, #0
 800bb28:	d129      	bne.n	800bb7e <__ieee754_pow+0x1ee>
 800bb2a:	b124      	cbz	r4, 800bb36 <__ieee754_pow+0x1a6>
 800bb2c:	4b2f      	ldr	r3, [pc, #188]	; (800bbec <__ieee754_pow+0x25c>)
 800bb2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d123      	bne.n	800bb7e <__ieee754_pow+0x1ee>
 800bb36:	f1b9 0f00 	cmp.w	r9, #0
 800bb3a:	da05      	bge.n	800bb48 <__ieee754_pow+0x1b8>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	2000      	movs	r0, #0
 800bb42:	492a      	ldr	r1, [pc, #168]	; (800bbec <__ieee754_pow+0x25c>)
 800bb44:	f7f4 fe8a 	bl	800085c <__aeabi_ddiv>
 800bb48:	2d00      	cmp	r5, #0
 800bb4a:	f6bf af40 	bge.w	800b9ce <__ieee754_pow+0x3e>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb58:	431c      	orrs	r4, r3
 800bb5a:	d108      	bne.n	800bb6e <__ieee754_pow+0x1de>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4610      	mov	r0, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	f7f4 fb98 	bl	8000298 <__aeabi_dsub>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	e78f      	b.n	800ba8e <__ieee754_pow+0xfe>
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	f47f af2c 	bne.w	800b9ce <__ieee754_pow+0x3e>
 800bb76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	e727      	b.n	800b9ce <__ieee754_pow+0x3e>
 800bb7e:	0feb      	lsrs	r3, r5, #31
 800bb80:	3b01      	subs	r3, #1
 800bb82:	9306      	str	r3, [sp, #24]
 800bb84:	9a06      	ldr	r2, [sp, #24]
 800bb86:	9b04      	ldr	r3, [sp, #16]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d102      	bne.n	800bb92 <__ieee754_pow+0x202>
 800bb8c:	4632      	mov	r2, r6
 800bb8e:	463b      	mov	r3, r7
 800bb90:	e7e6      	b.n	800bb60 <__ieee754_pow+0x1d0>
 800bb92:	4b19      	ldr	r3, [pc, #100]	; (800bbf8 <__ieee754_pow+0x268>)
 800bb94:	4598      	cmp	r8, r3
 800bb96:	f340 80fb 	ble.w	800bd90 <__ieee754_pow+0x400>
 800bb9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bb9e:	4598      	cmp	r8, r3
 800bba0:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <__ieee754_pow+0x260>)
 800bba2:	dd0c      	ble.n	800bbbe <__ieee754_pow+0x22e>
 800bba4:	429c      	cmp	r4, r3
 800bba6:	dc0f      	bgt.n	800bbc8 <__ieee754_pow+0x238>
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	da0f      	bge.n	800bbce <__ieee754_pow+0x23e>
 800bbae:	2000      	movs	r0, #0
 800bbb0:	b009      	add	sp, #36	; 0x24
 800bbb2:	ecbd 8b06 	vpop	{d8-d10}
 800bbb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	f000 be66 	b.w	800c88a <__math_oflow>
 800bbbe:	429c      	cmp	r4, r3
 800bbc0:	dbf2      	blt.n	800bba8 <__ieee754_pow+0x218>
 800bbc2:	4b0a      	ldr	r3, [pc, #40]	; (800bbec <__ieee754_pow+0x25c>)
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	dd19      	ble.n	800bbfc <__ieee754_pow+0x26c>
 800bbc8:	f1b9 0f00 	cmp.w	r9, #0
 800bbcc:	dcef      	bgt.n	800bbae <__ieee754_pow+0x21e>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	b009      	add	sp, #36	; 0x24
 800bbd2:	ecbd 8b06 	vpop	{d8-d10}
 800bbd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	f000 be4d 	b.w	800c878 <__math_uflow>
 800bbde:	bf00      	nop
 800bbe0:	fff00000 	.word	0xfff00000
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	433fffff 	.word	0x433fffff
 800bbec:	3ff00000 	.word	0x3ff00000
 800bbf0:	3fefffff 	.word	0x3fefffff
 800bbf4:	3fe00000 	.word	0x3fe00000
 800bbf8:	41e00000 	.word	0x41e00000
 800bbfc:	4b60      	ldr	r3, [pc, #384]	; (800bd80 <__ieee754_pow+0x3f0>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f7f4 fb4a 	bl	8000298 <__aeabi_dsub>
 800bc04:	a354      	add	r3, pc, #336	; (adr r3, 800bd58 <__ieee754_pow+0x3c8>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	f7f4 fcfb 	bl	8000608 <__aeabi_dmul>
 800bc12:	a353      	add	r3, pc, #332	; (adr r3, 800bd60 <__ieee754_pow+0x3d0>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	f7f4 fcf2 	bl	8000608 <__aeabi_dmul>
 800bc24:	4b57      	ldr	r3, [pc, #348]	; (800bd84 <__ieee754_pow+0x3f4>)
 800bc26:	4682      	mov	sl, r0
 800bc28:	468b      	mov	fp, r1
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	f7f4 fcea 	bl	8000608 <__aeabi_dmul>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	a14b      	add	r1, pc, #300	; (adr r1, 800bd68 <__ieee754_pow+0x3d8>)
 800bc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3e:	f7f4 fb2b 	bl	8000298 <__aeabi_dsub>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	f7f4 fcdf 	bl	8000608 <__aeabi_dmul>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	2000      	movs	r0, #0
 800bc50:	494d      	ldr	r1, [pc, #308]	; (800bd88 <__ieee754_pow+0x3f8>)
 800bc52:	f7f4 fb21 	bl	8000298 <__aeabi_dsub>
 800bc56:	4622      	mov	r2, r4
 800bc58:	4680      	mov	r8, r0
 800bc5a:	4689      	mov	r9, r1
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	4620      	mov	r0, r4
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 fcd1 	bl	8000608 <__aeabi_dmul>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	f7f4 fccb 	bl	8000608 <__aeabi_dmul>
 800bc72:	a33f      	add	r3, pc, #252	; (adr r3, 800bd70 <__ieee754_pow+0x3e0>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f7f4 fcc6 	bl	8000608 <__aeabi_dmul>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4650      	mov	r0, sl
 800bc82:	4659      	mov	r1, fp
 800bc84:	f7f4 fb08 	bl	8000298 <__aeabi_dsub>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	4630      	mov	r0, r6
 800bc92:	4639      	mov	r1, r7
 800bc94:	f7f4 fb02 	bl	800029c <__adddf3>
 800bc98:	2000      	movs	r0, #0
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	463b      	mov	r3, r7
 800bc9e:	4604      	mov	r4, r0
 800bca0:	460d      	mov	r5, r1
 800bca2:	f7f4 faf9 	bl	8000298 <__aeabi_dsub>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 faf3 	bl	8000298 <__aeabi_dsub>
 800bcb2:	9b04      	ldr	r3, [sp, #16]
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	4682      	mov	sl, r0
 800bcbc:	468b      	mov	fp, r1
 800bcbe:	f040 81e7 	bne.w	800c090 <__ieee754_pow+0x700>
 800bcc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bd78 <__ieee754_pow+0x3e8>
 800bcc6:	eeb0 8a47 	vmov.f32	s16, s14
 800bcca:	eef0 8a67 	vmov.f32	s17, s15
 800bcce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bcd2:	2600      	movs	r6, #0
 800bcd4:	4632      	mov	r2, r6
 800bcd6:	463b      	mov	r3, r7
 800bcd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcdc:	f7f4 fadc 	bl	8000298 <__aeabi_dsub>
 800bce0:	4622      	mov	r2, r4
 800bce2:	462b      	mov	r3, r5
 800bce4:	f7f4 fc90 	bl	8000608 <__aeabi_dmul>
 800bce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcec:	4680      	mov	r8, r0
 800bcee:	4689      	mov	r9, r1
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	4659      	mov	r1, fp
 800bcf4:	f7f4 fc88 	bl	8000608 <__aeabi_dmul>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4649      	mov	r1, r9
 800bd00:	f7f4 facc 	bl	800029c <__adddf3>
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4689      	mov	r9, r1
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	4629      	mov	r1, r5
 800bd10:	f7f4 fc7a 	bl	8000608 <__aeabi_dmul>
 800bd14:	460b      	mov	r3, r1
 800bd16:	4604      	mov	r4, r0
 800bd18:	460d      	mov	r5, r1
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4640      	mov	r0, r8
 800bd20:	f7f4 fabc 	bl	800029c <__adddf3>
 800bd24:	4b19      	ldr	r3, [pc, #100]	; (800bd8c <__ieee754_pow+0x3fc>)
 800bd26:	4299      	cmp	r1, r3
 800bd28:	ec45 4b19 	vmov	d9, r4, r5
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	460f      	mov	r7, r1
 800bd30:	468b      	mov	fp, r1
 800bd32:	f340 82f0 	ble.w	800c316 <__ieee754_pow+0x986>
 800bd36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd3e:	4303      	orrs	r3, r0
 800bd40:	f000 81e4 	beq.w	800c10c <__ieee754_pow+0x77c>
 800bd44:	ec51 0b18 	vmov	r0, r1, d8
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f7f4 fece 	bl	8000aec <__aeabi_dcmplt>
 800bd50:	3800      	subs	r0, #0
 800bd52:	bf18      	it	ne
 800bd54:	2001      	movne	r0, #1
 800bd56:	e72b      	b.n	800bbb0 <__ieee754_pow+0x220>
 800bd58:	60000000 	.word	0x60000000
 800bd5c:	3ff71547 	.word	0x3ff71547
 800bd60:	f85ddf44 	.word	0xf85ddf44
 800bd64:	3e54ae0b 	.word	0x3e54ae0b
 800bd68:	55555555 	.word	0x55555555
 800bd6c:	3fd55555 	.word	0x3fd55555
 800bd70:	652b82fe 	.word	0x652b82fe
 800bd74:	3ff71547 	.word	0x3ff71547
 800bd78:	00000000 	.word	0x00000000
 800bd7c:	bff00000 	.word	0xbff00000
 800bd80:	3ff00000 	.word	0x3ff00000
 800bd84:	3fd00000 	.word	0x3fd00000
 800bd88:	3fe00000 	.word	0x3fe00000
 800bd8c:	408fffff 	.word	0x408fffff
 800bd90:	4bd5      	ldr	r3, [pc, #852]	; (800c0e8 <__ieee754_pow+0x758>)
 800bd92:	402b      	ands	r3, r5
 800bd94:	2200      	movs	r2, #0
 800bd96:	b92b      	cbnz	r3, 800bda4 <__ieee754_pow+0x414>
 800bd98:	4bd4      	ldr	r3, [pc, #848]	; (800c0ec <__ieee754_pow+0x75c>)
 800bd9a:	f7f4 fc35 	bl	8000608 <__aeabi_dmul>
 800bd9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bda2:	460c      	mov	r4, r1
 800bda4:	1523      	asrs	r3, r4, #20
 800bda6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdaa:	4413      	add	r3, r2
 800bdac:	9305      	str	r3, [sp, #20]
 800bdae:	4bd0      	ldr	r3, [pc, #832]	; (800c0f0 <__ieee754_pow+0x760>)
 800bdb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bdb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdbe:	dd08      	ble.n	800bdd2 <__ieee754_pow+0x442>
 800bdc0:	4bcc      	ldr	r3, [pc, #816]	; (800c0f4 <__ieee754_pow+0x764>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	f340 8162 	ble.w	800c08c <__ieee754_pow+0x6fc>
 800bdc8:	9b05      	ldr	r3, [sp, #20]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	00e3      	lsls	r3, r4, #3
 800bdd6:	9307      	str	r3, [sp, #28]
 800bdd8:	4bc7      	ldr	r3, [pc, #796]	; (800c0f8 <__ieee754_pow+0x768>)
 800bdda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdde:	ed93 7b00 	vldr	d7, [r3]
 800bde2:	4629      	mov	r1, r5
 800bde4:	ec53 2b17 	vmov	r2, r3, d7
 800bde8:	eeb0 9a47 	vmov.f32	s18, s14
 800bdec:	eef0 9a67 	vmov.f32	s19, s15
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	f7f4 fa51 	bl	8000298 <__aeabi_dsub>
 800bdf6:	4652      	mov	r2, sl
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	ec51 0b19 	vmov	r0, r1, d9
 800be02:	f7f4 fa4b 	bl	800029c <__adddf3>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	2000      	movs	r0, #0
 800be0c:	49bb      	ldr	r1, [pc, #748]	; (800c0fc <__ieee754_pow+0x76c>)
 800be0e:	f7f4 fd25 	bl	800085c <__aeabi_ddiv>
 800be12:	ec41 0b1a 	vmov	d10, r0, r1
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4630      	mov	r0, r6
 800be1c:	4639      	mov	r1, r7
 800be1e:	f7f4 fbf3 	bl	8000608 <__aeabi_dmul>
 800be22:	2300      	movs	r3, #0
 800be24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be28:	9302      	str	r3, [sp, #8]
 800be2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be2e:	46ab      	mov	fp, r5
 800be30:	106d      	asrs	r5, r5, #1
 800be32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be3a:	ec41 0b18 	vmov	d8, r0, r1
 800be3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be42:	2200      	movs	r2, #0
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	4614      	mov	r4, r2
 800be4a:	461d      	mov	r5, r3
 800be4c:	f7f4 fbdc 	bl	8000608 <__aeabi_dmul>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fa1e 	bl	8000298 <__aeabi_dsub>
 800be5c:	ec53 2b19 	vmov	r2, r3, d9
 800be60:	4606      	mov	r6, r0
 800be62:	460f      	mov	r7, r1
 800be64:	4620      	mov	r0, r4
 800be66:	4629      	mov	r1, r5
 800be68:	f7f4 fa16 	bl	8000298 <__aeabi_dsub>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4650      	mov	r0, sl
 800be72:	4659      	mov	r1, fp
 800be74:	f7f4 fa10 	bl	8000298 <__aeabi_dsub>
 800be78:	4642      	mov	r2, r8
 800be7a:	464b      	mov	r3, r9
 800be7c:	f7f4 fbc4 	bl	8000608 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fa06 	bl	8000298 <__aeabi_dsub>
 800be8c:	ec53 2b1a 	vmov	r2, r3, d10
 800be90:	f7f4 fbba 	bl	8000608 <__aeabi_dmul>
 800be94:	ec53 2b18 	vmov	r2, r3, d8
 800be98:	ec41 0b19 	vmov	d9, r0, r1
 800be9c:	ec51 0b18 	vmov	r0, r1, d8
 800bea0:	f7f4 fbb2 	bl	8000608 <__aeabi_dmul>
 800bea4:	a37c      	add	r3, pc, #496	; (adr r3, 800c098 <__ieee754_pow+0x708>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	4604      	mov	r4, r0
 800beac:	460d      	mov	r5, r1
 800beae:	f7f4 fbab 	bl	8000608 <__aeabi_dmul>
 800beb2:	a37b      	add	r3, pc, #492	; (adr r3, 800c0a0 <__ieee754_pow+0x710>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 f9f0 	bl	800029c <__adddf3>
 800bebc:	4622      	mov	r2, r4
 800bebe:	462b      	mov	r3, r5
 800bec0:	f7f4 fba2 	bl	8000608 <__aeabi_dmul>
 800bec4:	a378      	add	r3, pc, #480	; (adr r3, 800c0a8 <__ieee754_pow+0x718>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 f9e7 	bl	800029c <__adddf3>
 800bece:	4622      	mov	r2, r4
 800bed0:	462b      	mov	r3, r5
 800bed2:	f7f4 fb99 	bl	8000608 <__aeabi_dmul>
 800bed6:	a376      	add	r3, pc, #472	; (adr r3, 800c0b0 <__ieee754_pow+0x720>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	f7f4 f9de 	bl	800029c <__adddf3>
 800bee0:	4622      	mov	r2, r4
 800bee2:	462b      	mov	r3, r5
 800bee4:	f7f4 fb90 	bl	8000608 <__aeabi_dmul>
 800bee8:	a373      	add	r3, pc, #460	; (adr r3, 800c0b8 <__ieee754_pow+0x728>)
 800beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beee:	f7f4 f9d5 	bl	800029c <__adddf3>
 800bef2:	4622      	mov	r2, r4
 800bef4:	462b      	mov	r3, r5
 800bef6:	f7f4 fb87 	bl	8000608 <__aeabi_dmul>
 800befa:	a371      	add	r3, pc, #452	; (adr r3, 800c0c0 <__ieee754_pow+0x730>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	f7f4 f9cc 	bl	800029c <__adddf3>
 800bf04:	4622      	mov	r2, r4
 800bf06:	4606      	mov	r6, r0
 800bf08:	460f      	mov	r7, r1
 800bf0a:	462b      	mov	r3, r5
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 fb7a 	bl	8000608 <__aeabi_dmul>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4630      	mov	r0, r6
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	f7f4 fb74 	bl	8000608 <__aeabi_dmul>
 800bf20:	4642      	mov	r2, r8
 800bf22:	4604      	mov	r4, r0
 800bf24:	460d      	mov	r5, r1
 800bf26:	464b      	mov	r3, r9
 800bf28:	ec51 0b18 	vmov	r0, r1, d8
 800bf2c:	f7f4 f9b6 	bl	800029c <__adddf3>
 800bf30:	ec53 2b19 	vmov	r2, r3, d9
 800bf34:	f7f4 fb68 	bl	8000608 <__aeabi_dmul>
 800bf38:	4622      	mov	r2, r4
 800bf3a:	462b      	mov	r3, r5
 800bf3c:	f7f4 f9ae 	bl	800029c <__adddf3>
 800bf40:	4642      	mov	r2, r8
 800bf42:	4682      	mov	sl, r0
 800bf44:	468b      	mov	fp, r1
 800bf46:	464b      	mov	r3, r9
 800bf48:	4640      	mov	r0, r8
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 fb5c 	bl	8000608 <__aeabi_dmul>
 800bf50:	4b6b      	ldr	r3, [pc, #428]	; (800c100 <__ieee754_pow+0x770>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	f7f4 f9a0 	bl	800029c <__adddf3>
 800bf5c:	4652      	mov	r2, sl
 800bf5e:	465b      	mov	r3, fp
 800bf60:	f7f4 f99c 	bl	800029c <__adddf3>
 800bf64:	2000      	movs	r0, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4640      	mov	r0, r8
 800bf70:	4649      	mov	r1, r9
 800bf72:	f7f4 fb49 	bl	8000608 <__aeabi_dmul>
 800bf76:	4b62      	ldr	r3, [pc, #392]	; (800c100 <__ieee754_pow+0x770>)
 800bf78:	4680      	mov	r8, r0
 800bf7a:	4689      	mov	r9, r1
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	f7f4 f989 	bl	8000298 <__aeabi_dsub>
 800bf86:	4632      	mov	r2, r6
 800bf88:	463b      	mov	r3, r7
 800bf8a:	f7f4 f985 	bl	8000298 <__aeabi_dsub>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4650      	mov	r0, sl
 800bf94:	4659      	mov	r1, fp
 800bf96:	f7f4 f97f 	bl	8000298 <__aeabi_dsub>
 800bf9a:	ec53 2b18 	vmov	r2, r3, d8
 800bf9e:	f7f4 fb33 	bl	8000608 <__aeabi_dmul>
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	460f      	mov	r7, r1
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	ec51 0b19 	vmov	r0, r1, d9
 800bfae:	f7f4 fb2b 	bl	8000608 <__aeabi_dmul>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 f96f 	bl	800029c <__adddf3>
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460f      	mov	r7, r1
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	4640      	mov	r0, r8
 800bfc8:	4649      	mov	r1, r9
 800bfca:	f7f4 f967 	bl	800029c <__adddf3>
 800bfce:	a33e      	add	r3, pc, #248	; (adr r3, 800c0c8 <__ieee754_pow+0x738>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	f7f4 fb15 	bl	8000608 <__aeabi_dmul>
 800bfde:	4642      	mov	r2, r8
 800bfe0:	ec41 0b18 	vmov	d8, r0, r1
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 f955 	bl	8000298 <__aeabi_dsub>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 f94f 	bl	8000298 <__aeabi_dsub>
 800bffa:	a335      	add	r3, pc, #212	; (adr r3, 800c0d0 <__ieee754_pow+0x740>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 fb02 	bl	8000608 <__aeabi_dmul>
 800c004:	a334      	add	r3, pc, #208	; (adr r3, 800c0d8 <__ieee754_pow+0x748>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	4606      	mov	r6, r0
 800c00c:	460f      	mov	r7, r1
 800c00e:	4620      	mov	r0, r4
 800c010:	4629      	mov	r1, r5
 800c012:	f7f4 faf9 	bl	8000608 <__aeabi_dmul>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 f93d 	bl	800029c <__adddf3>
 800c022:	9a07      	ldr	r2, [sp, #28]
 800c024:	4b37      	ldr	r3, [pc, #220]	; (800c104 <__ieee754_pow+0x774>)
 800c026:	4413      	add	r3, r2
 800c028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02c:	f7f4 f936 	bl	800029c <__adddf3>
 800c030:	4682      	mov	sl, r0
 800c032:	9805      	ldr	r0, [sp, #20]
 800c034:	468b      	mov	fp, r1
 800c036:	f7f4 fa7d 	bl	8000534 <__aeabi_i2d>
 800c03a:	9a07      	ldr	r2, [sp, #28]
 800c03c:	4b32      	ldr	r3, [pc, #200]	; (800c108 <__ieee754_pow+0x778>)
 800c03e:	4413      	add	r3, r2
 800c040:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c044:	4606      	mov	r6, r0
 800c046:	460f      	mov	r7, r1
 800c048:	4652      	mov	r2, sl
 800c04a:	465b      	mov	r3, fp
 800c04c:	ec51 0b18 	vmov	r0, r1, d8
 800c050:	f7f4 f924 	bl	800029c <__adddf3>
 800c054:	4642      	mov	r2, r8
 800c056:	464b      	mov	r3, r9
 800c058:	f7f4 f920 	bl	800029c <__adddf3>
 800c05c:	4632      	mov	r2, r6
 800c05e:	463b      	mov	r3, r7
 800c060:	f7f4 f91c 	bl	800029c <__adddf3>
 800c064:	2000      	movs	r0, #0
 800c066:	4632      	mov	r2, r6
 800c068:	463b      	mov	r3, r7
 800c06a:	4604      	mov	r4, r0
 800c06c:	460d      	mov	r5, r1
 800c06e:	f7f4 f913 	bl	8000298 <__aeabi_dsub>
 800c072:	4642      	mov	r2, r8
 800c074:	464b      	mov	r3, r9
 800c076:	f7f4 f90f 	bl	8000298 <__aeabi_dsub>
 800c07a:	ec53 2b18 	vmov	r2, r3, d8
 800c07e:	f7f4 f90b 	bl	8000298 <__aeabi_dsub>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4650      	mov	r0, sl
 800c088:	4659      	mov	r1, fp
 800c08a:	e610      	b.n	800bcae <__ieee754_pow+0x31e>
 800c08c:	2401      	movs	r4, #1
 800c08e:	e6a1      	b.n	800bdd4 <__ieee754_pow+0x444>
 800c090:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c0e0 <__ieee754_pow+0x750>
 800c094:	e617      	b.n	800bcc6 <__ieee754_pow+0x336>
 800c096:	bf00      	nop
 800c098:	4a454eef 	.word	0x4a454eef
 800c09c:	3fca7e28 	.word	0x3fca7e28
 800c0a0:	93c9db65 	.word	0x93c9db65
 800c0a4:	3fcd864a 	.word	0x3fcd864a
 800c0a8:	a91d4101 	.word	0xa91d4101
 800c0ac:	3fd17460 	.word	0x3fd17460
 800c0b0:	518f264d 	.word	0x518f264d
 800c0b4:	3fd55555 	.word	0x3fd55555
 800c0b8:	db6fabff 	.word	0xdb6fabff
 800c0bc:	3fdb6db6 	.word	0x3fdb6db6
 800c0c0:	33333303 	.word	0x33333303
 800c0c4:	3fe33333 	.word	0x3fe33333
 800c0c8:	e0000000 	.word	0xe0000000
 800c0cc:	3feec709 	.word	0x3feec709
 800c0d0:	dc3a03fd 	.word	0xdc3a03fd
 800c0d4:	3feec709 	.word	0x3feec709
 800c0d8:	145b01f5 	.word	0x145b01f5
 800c0dc:	be3e2fe0 	.word	0xbe3e2fe0
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	3ff00000 	.word	0x3ff00000
 800c0e8:	7ff00000 	.word	0x7ff00000
 800c0ec:	43400000 	.word	0x43400000
 800c0f0:	0003988e 	.word	0x0003988e
 800c0f4:	000bb679 	.word	0x000bb679
 800c0f8:	0800d258 	.word	0x0800d258
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	40080000 	.word	0x40080000
 800c104:	0800d278 	.word	0x0800d278
 800c108:	0800d268 	.word	0x0800d268
 800c10c:	a3b3      	add	r3, pc, #716	; (adr r3, 800c3dc <__ieee754_pow+0xa4c>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	4640      	mov	r0, r8
 800c114:	4649      	mov	r1, r9
 800c116:	f7f4 f8c1 	bl	800029c <__adddf3>
 800c11a:	4622      	mov	r2, r4
 800c11c:	ec41 0b1a 	vmov	d10, r0, r1
 800c120:	462b      	mov	r3, r5
 800c122:	4630      	mov	r0, r6
 800c124:	4639      	mov	r1, r7
 800c126:	f7f4 f8b7 	bl	8000298 <__aeabi_dsub>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	ec51 0b1a 	vmov	r0, r1, d10
 800c132:	f7f4 fcf9 	bl	8000b28 <__aeabi_dcmpgt>
 800c136:	2800      	cmp	r0, #0
 800c138:	f47f ae04 	bne.w	800bd44 <__ieee754_pow+0x3b4>
 800c13c:	4aa2      	ldr	r2, [pc, #648]	; (800c3c8 <__ieee754_pow+0xa38>)
 800c13e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c142:	4293      	cmp	r3, r2
 800c144:	f340 8107 	ble.w	800c356 <__ieee754_pow+0x9c6>
 800c148:	151b      	asrs	r3, r3, #20
 800c14a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c14e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c152:	fa4a fa03 	asr.w	sl, sl, r3
 800c156:	44da      	add	sl, fp
 800c158:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c15c:	489b      	ldr	r0, [pc, #620]	; (800c3cc <__ieee754_pow+0xa3c>)
 800c15e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c162:	4108      	asrs	r0, r1
 800c164:	ea00 030a 	and.w	r3, r0, sl
 800c168:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c16c:	f1c1 0114 	rsb	r1, r1, #20
 800c170:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c174:	fa4a fa01 	asr.w	sl, sl, r1
 800c178:	f1bb 0f00 	cmp.w	fp, #0
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	bfb8      	it	lt
 800c186:	f1ca 0a00 	rsblt	sl, sl, #0
 800c18a:	f7f4 f885 	bl	8000298 <__aeabi_dsub>
 800c18e:	ec41 0b19 	vmov	d9, r0, r1
 800c192:	4642      	mov	r2, r8
 800c194:	464b      	mov	r3, r9
 800c196:	ec51 0b19 	vmov	r0, r1, d9
 800c19a:	f7f4 f87f 	bl	800029c <__adddf3>
 800c19e:	a37a      	add	r3, pc, #488	; (adr r3, 800c388 <__ieee754_pow+0x9f8>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	f7f4 fa2d 	bl	8000608 <__aeabi_dmul>
 800c1ae:	ec53 2b19 	vmov	r2, r3, d9
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460f      	mov	r7, r1
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f7f4 f86d 	bl	8000298 <__aeabi_dsub>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	a371      	add	r3, pc, #452	; (adr r3, 800c390 <__ieee754_pow+0xa00>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 fa1a 	bl	8000608 <__aeabi_dmul>
 800c1d4:	a370      	add	r3, pc, #448	; (adr r3, 800c398 <__ieee754_pow+0xa08>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	4680      	mov	r8, r0
 800c1dc:	4689      	mov	r9, r1
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fa11 	bl	8000608 <__aeabi_dmul>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	f7f4 f855 	bl	800029c <__adddf3>
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	460d      	mov	r5, r1
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	f7f4 f84d 	bl	800029c <__adddf3>
 800c202:	4632      	mov	r2, r6
 800c204:	463b      	mov	r3, r7
 800c206:	4680      	mov	r8, r0
 800c208:	4689      	mov	r9, r1
 800c20a:	f7f4 f845 	bl	8000298 <__aeabi_dsub>
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4620      	mov	r0, r4
 800c214:	4629      	mov	r1, r5
 800c216:	f7f4 f83f 	bl	8000298 <__aeabi_dsub>
 800c21a:	4642      	mov	r2, r8
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	464b      	mov	r3, r9
 800c222:	4640      	mov	r0, r8
 800c224:	4649      	mov	r1, r9
 800c226:	f7f4 f9ef 	bl	8000608 <__aeabi_dmul>
 800c22a:	a35d      	add	r3, pc, #372	; (adr r3, 800c3a0 <__ieee754_pow+0xa10>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	4604      	mov	r4, r0
 800c232:	460d      	mov	r5, r1
 800c234:	f7f4 f9e8 	bl	8000608 <__aeabi_dmul>
 800c238:	a35b      	add	r3, pc, #364	; (adr r3, 800c3a8 <__ieee754_pow+0xa18>)
 800c23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23e:	f7f4 f82b 	bl	8000298 <__aeabi_dsub>
 800c242:	4622      	mov	r2, r4
 800c244:	462b      	mov	r3, r5
 800c246:	f7f4 f9df 	bl	8000608 <__aeabi_dmul>
 800c24a:	a359      	add	r3, pc, #356	; (adr r3, 800c3b0 <__ieee754_pow+0xa20>)
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	f7f4 f824 	bl	800029c <__adddf3>
 800c254:	4622      	mov	r2, r4
 800c256:	462b      	mov	r3, r5
 800c258:	f7f4 f9d6 	bl	8000608 <__aeabi_dmul>
 800c25c:	a356      	add	r3, pc, #344	; (adr r3, 800c3b8 <__ieee754_pow+0xa28>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 f819 	bl	8000298 <__aeabi_dsub>
 800c266:	4622      	mov	r2, r4
 800c268:	462b      	mov	r3, r5
 800c26a:	f7f4 f9cd 	bl	8000608 <__aeabi_dmul>
 800c26e:	a354      	add	r3, pc, #336	; (adr r3, 800c3c0 <__ieee754_pow+0xa30>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f4 f812 	bl	800029c <__adddf3>
 800c278:	4622      	mov	r2, r4
 800c27a:	462b      	mov	r3, r5
 800c27c:	f7f4 f9c4 	bl	8000608 <__aeabi_dmul>
 800c280:	4602      	mov	r2, r0
 800c282:	460b      	mov	r3, r1
 800c284:	4640      	mov	r0, r8
 800c286:	4649      	mov	r1, r9
 800c288:	f7f4 f806 	bl	8000298 <__aeabi_dsub>
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4640      	mov	r0, r8
 800c296:	4649      	mov	r1, r9
 800c298:	f7f4 f9b6 	bl	8000608 <__aeabi_dmul>
 800c29c:	2200      	movs	r2, #0
 800c29e:	ec41 0b19 	vmov	d9, r0, r1
 800c2a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f3 fff5 	bl	8000298 <__aeabi_dsub>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	ec51 0b19 	vmov	r0, r1, d9
 800c2b6:	f7f4 fad1 	bl	800085c <__aeabi_ddiv>
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	4604      	mov	r4, r0
 800c2be:	460d      	mov	r5, r1
 800c2c0:	463b      	mov	r3, r7
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	f7f4 f99f 	bl	8000608 <__aeabi_dmul>
 800c2ca:	4632      	mov	r2, r6
 800c2cc:	463b      	mov	r3, r7
 800c2ce:	f7f3 ffe5 	bl	800029c <__adddf3>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	4629      	mov	r1, r5
 800c2da:	f7f3 ffdd 	bl	8000298 <__aeabi_dsub>
 800c2de:	4642      	mov	r2, r8
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	f7f3 ffd9 	bl	8000298 <__aeabi_dsub>
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	4939      	ldr	r1, [pc, #228]	; (800c3d0 <__ieee754_pow+0xa40>)
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	f7f3 ffd3 	bl	8000298 <__aeabi_dsub>
 800c2f2:	ec41 0b10 	vmov	d0, r0, r1
 800c2f6:	ee10 3a90 	vmov	r3, s1
 800c2fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c302:	da2b      	bge.n	800c35c <__ieee754_pow+0x9cc>
 800c304:	4650      	mov	r0, sl
 800c306:	f000 fa1b 	bl	800c740 <scalbn>
 800c30a:	ec51 0b10 	vmov	r0, r1, d0
 800c30e:	ec53 2b18 	vmov	r2, r3, d8
 800c312:	f7ff bbee 	b.w	800baf2 <__ieee754_pow+0x162>
 800c316:	4b2f      	ldr	r3, [pc, #188]	; (800c3d4 <__ieee754_pow+0xa44>)
 800c318:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c31c:	429e      	cmp	r6, r3
 800c31e:	f77f af0d 	ble.w	800c13c <__ieee754_pow+0x7ac>
 800c322:	4b2d      	ldr	r3, [pc, #180]	; (800c3d8 <__ieee754_pow+0xa48>)
 800c324:	440b      	add	r3, r1
 800c326:	4303      	orrs	r3, r0
 800c328:	d009      	beq.n	800c33e <__ieee754_pow+0x9ae>
 800c32a:	ec51 0b18 	vmov	r0, r1, d8
 800c32e:	2200      	movs	r2, #0
 800c330:	2300      	movs	r3, #0
 800c332:	f7f4 fbdb 	bl	8000aec <__aeabi_dcmplt>
 800c336:	3800      	subs	r0, #0
 800c338:	bf18      	it	ne
 800c33a:	2001      	movne	r0, #1
 800c33c:	e448      	b.n	800bbd0 <__ieee754_pow+0x240>
 800c33e:	4622      	mov	r2, r4
 800c340:	462b      	mov	r3, r5
 800c342:	f7f3 ffa9 	bl	8000298 <__aeabi_dsub>
 800c346:	4642      	mov	r2, r8
 800c348:	464b      	mov	r3, r9
 800c34a:	f7f4 fbe3 	bl	8000b14 <__aeabi_dcmpge>
 800c34e:	2800      	cmp	r0, #0
 800c350:	f43f aef4 	beq.w	800c13c <__ieee754_pow+0x7ac>
 800c354:	e7e9      	b.n	800c32a <__ieee754_pow+0x99a>
 800c356:	f04f 0a00 	mov.w	sl, #0
 800c35a:	e71a      	b.n	800c192 <__ieee754_pow+0x802>
 800c35c:	ec51 0b10 	vmov	r0, r1, d0
 800c360:	4619      	mov	r1, r3
 800c362:	e7d4      	b.n	800c30e <__ieee754_pow+0x97e>
 800c364:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <__ieee754_pow+0xa40>)
 800c366:	2000      	movs	r0, #0
 800c368:	f7ff bb31 	b.w	800b9ce <__ieee754_pow+0x3e>
 800c36c:	2000      	movs	r0, #0
 800c36e:	2100      	movs	r1, #0
 800c370:	f7ff bb2d 	b.w	800b9ce <__ieee754_pow+0x3e>
 800c374:	4630      	mov	r0, r6
 800c376:	4639      	mov	r1, r7
 800c378:	f7ff bb29 	b.w	800b9ce <__ieee754_pow+0x3e>
 800c37c:	9204      	str	r2, [sp, #16]
 800c37e:	f7ff bb7b 	b.w	800ba78 <__ieee754_pow+0xe8>
 800c382:	2300      	movs	r3, #0
 800c384:	f7ff bb65 	b.w	800ba52 <__ieee754_pow+0xc2>
 800c388:	00000000 	.word	0x00000000
 800c38c:	3fe62e43 	.word	0x3fe62e43
 800c390:	fefa39ef 	.word	0xfefa39ef
 800c394:	3fe62e42 	.word	0x3fe62e42
 800c398:	0ca86c39 	.word	0x0ca86c39
 800c39c:	be205c61 	.word	0xbe205c61
 800c3a0:	72bea4d0 	.word	0x72bea4d0
 800c3a4:	3e663769 	.word	0x3e663769
 800c3a8:	c5d26bf1 	.word	0xc5d26bf1
 800c3ac:	3ebbbd41 	.word	0x3ebbbd41
 800c3b0:	af25de2c 	.word	0xaf25de2c
 800c3b4:	3f11566a 	.word	0x3f11566a
 800c3b8:	16bebd93 	.word	0x16bebd93
 800c3bc:	3f66c16c 	.word	0x3f66c16c
 800c3c0:	5555553e 	.word	0x5555553e
 800c3c4:	3fc55555 	.word	0x3fc55555
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	fff00000 	.word	0xfff00000
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	4090cbff 	.word	0x4090cbff
 800c3d8:	3f6f3400 	.word	0x3f6f3400
 800c3dc:	652b82fe 	.word	0x652b82fe
 800c3e0:	3c971547 	.word	0x3c971547
 800c3e4:	00000000 	.word	0x00000000

0800c3e8 <atan>:
 800c3e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	ec55 4b10 	vmov	r4, r5, d0
 800c3f0:	4bc3      	ldr	r3, [pc, #780]	; (800c700 <atan+0x318>)
 800c3f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3f6:	429e      	cmp	r6, r3
 800c3f8:	46ab      	mov	fp, r5
 800c3fa:	dd18      	ble.n	800c42e <atan+0x46>
 800c3fc:	4bc1      	ldr	r3, [pc, #772]	; (800c704 <atan+0x31c>)
 800c3fe:	429e      	cmp	r6, r3
 800c400:	dc01      	bgt.n	800c406 <atan+0x1e>
 800c402:	d109      	bne.n	800c418 <atan+0x30>
 800c404:	b144      	cbz	r4, 800c418 <atan+0x30>
 800c406:	4622      	mov	r2, r4
 800c408:	462b      	mov	r3, r5
 800c40a:	4620      	mov	r0, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7f3 ff45 	bl	800029c <__adddf3>
 800c412:	4604      	mov	r4, r0
 800c414:	460d      	mov	r5, r1
 800c416:	e006      	b.n	800c426 <atan+0x3e>
 800c418:	f1bb 0f00 	cmp.w	fp, #0
 800c41c:	f300 8131 	bgt.w	800c682 <atan+0x29a>
 800c420:	a59b      	add	r5, pc, #620	; (adr r5, 800c690 <atan+0x2a8>)
 800c422:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c426:	ec45 4b10 	vmov	d0, r4, r5
 800c42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	4bb6      	ldr	r3, [pc, #728]	; (800c708 <atan+0x320>)
 800c430:	429e      	cmp	r6, r3
 800c432:	dc14      	bgt.n	800c45e <atan+0x76>
 800c434:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c438:	429e      	cmp	r6, r3
 800c43a:	dc0d      	bgt.n	800c458 <atan+0x70>
 800c43c:	a396      	add	r3, pc, #600	; (adr r3, 800c698 <atan+0x2b0>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	ee10 0a10 	vmov	r0, s0
 800c446:	4629      	mov	r1, r5
 800c448:	f7f3 ff28 	bl	800029c <__adddf3>
 800c44c:	4baf      	ldr	r3, [pc, #700]	; (800c70c <atan+0x324>)
 800c44e:	2200      	movs	r2, #0
 800c450:	f7f4 fb6a 	bl	8000b28 <__aeabi_dcmpgt>
 800c454:	2800      	cmp	r0, #0
 800c456:	d1e6      	bne.n	800c426 <atan+0x3e>
 800c458:	f04f 3aff 	mov.w	sl, #4294967295
 800c45c:	e02b      	b.n	800c4b6 <atan+0xce>
 800c45e:	f000 f963 	bl	800c728 <fabs>
 800c462:	4bab      	ldr	r3, [pc, #684]	; (800c710 <atan+0x328>)
 800c464:	429e      	cmp	r6, r3
 800c466:	ec55 4b10 	vmov	r4, r5, d0
 800c46a:	f300 80bf 	bgt.w	800c5ec <atan+0x204>
 800c46e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c472:	429e      	cmp	r6, r3
 800c474:	f300 80a0 	bgt.w	800c5b8 <atan+0x1d0>
 800c478:	ee10 2a10 	vmov	r2, s0
 800c47c:	ee10 0a10 	vmov	r0, s0
 800c480:	462b      	mov	r3, r5
 800c482:	4629      	mov	r1, r5
 800c484:	f7f3 ff0a 	bl	800029c <__adddf3>
 800c488:	4ba0      	ldr	r3, [pc, #640]	; (800c70c <atan+0x324>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	f7f3 ff04 	bl	8000298 <__aeabi_dsub>
 800c490:	2200      	movs	r2, #0
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f7f3 fefd 	bl	800029c <__adddf3>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	f7f4 f9d7 	bl	800085c <__aeabi_ddiv>
 800c4ae:	f04f 0a00 	mov.w	sl, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	462b      	mov	r3, r5
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	f7f4 f8a3 	bl	8000608 <__aeabi_dmul>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	4689      	mov	r9, r1
 800c4ca:	f7f4 f89d 	bl	8000608 <__aeabi_dmul>
 800c4ce:	a374      	add	r3, pc, #464	; (adr r3, 800c6a0 <atan+0x2b8>)
 800c4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	f7f4 f896 	bl	8000608 <__aeabi_dmul>
 800c4dc:	a372      	add	r3, pc, #456	; (adr r3, 800c6a8 <atan+0x2c0>)
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	f7f3 fedb 	bl	800029c <__adddf3>
 800c4e6:	4632      	mov	r2, r6
 800c4e8:	463b      	mov	r3, r7
 800c4ea:	f7f4 f88d 	bl	8000608 <__aeabi_dmul>
 800c4ee:	a370      	add	r3, pc, #448	; (adr r3, 800c6b0 <atan+0x2c8>)
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f7f3 fed2 	bl	800029c <__adddf3>
 800c4f8:	4632      	mov	r2, r6
 800c4fa:	463b      	mov	r3, r7
 800c4fc:	f7f4 f884 	bl	8000608 <__aeabi_dmul>
 800c500:	a36d      	add	r3, pc, #436	; (adr r3, 800c6b8 <atan+0x2d0>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f3 fec9 	bl	800029c <__adddf3>
 800c50a:	4632      	mov	r2, r6
 800c50c:	463b      	mov	r3, r7
 800c50e:	f7f4 f87b 	bl	8000608 <__aeabi_dmul>
 800c512:	a36b      	add	r3, pc, #428	; (adr r3, 800c6c0 <atan+0x2d8>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f3 fec0 	bl	800029c <__adddf3>
 800c51c:	4632      	mov	r2, r6
 800c51e:	463b      	mov	r3, r7
 800c520:	f7f4 f872 	bl	8000608 <__aeabi_dmul>
 800c524:	a368      	add	r3, pc, #416	; (adr r3, 800c6c8 <atan+0x2e0>)
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	f7f3 feb7 	bl	800029c <__adddf3>
 800c52e:	4642      	mov	r2, r8
 800c530:	464b      	mov	r3, r9
 800c532:	f7f4 f869 	bl	8000608 <__aeabi_dmul>
 800c536:	a366      	add	r3, pc, #408	; (adr r3, 800c6d0 <atan+0x2e8>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	4680      	mov	r8, r0
 800c53e:	4689      	mov	r9, r1
 800c540:	4630      	mov	r0, r6
 800c542:	4639      	mov	r1, r7
 800c544:	f7f4 f860 	bl	8000608 <__aeabi_dmul>
 800c548:	a363      	add	r3, pc, #396	; (adr r3, 800c6d8 <atan+0x2f0>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f3 fea3 	bl	8000298 <__aeabi_dsub>
 800c552:	4632      	mov	r2, r6
 800c554:	463b      	mov	r3, r7
 800c556:	f7f4 f857 	bl	8000608 <__aeabi_dmul>
 800c55a:	a361      	add	r3, pc, #388	; (adr r3, 800c6e0 <atan+0x2f8>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f3 fe9a 	bl	8000298 <__aeabi_dsub>
 800c564:	4632      	mov	r2, r6
 800c566:	463b      	mov	r3, r7
 800c568:	f7f4 f84e 	bl	8000608 <__aeabi_dmul>
 800c56c:	a35e      	add	r3, pc, #376	; (adr r3, 800c6e8 <atan+0x300>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7f3 fe91 	bl	8000298 <__aeabi_dsub>
 800c576:	4632      	mov	r2, r6
 800c578:	463b      	mov	r3, r7
 800c57a:	f7f4 f845 	bl	8000608 <__aeabi_dmul>
 800c57e:	a35c      	add	r3, pc, #368	; (adr r3, 800c6f0 <atan+0x308>)
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f3 fe88 	bl	8000298 <__aeabi_dsub>
 800c588:	4632      	mov	r2, r6
 800c58a:	463b      	mov	r3, r7
 800c58c:	f7f4 f83c 	bl	8000608 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f3 fe80 	bl	800029c <__adddf3>
 800c59c:	4622      	mov	r2, r4
 800c59e:	462b      	mov	r3, r5
 800c5a0:	f7f4 f832 	bl	8000608 <__aeabi_dmul>
 800c5a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	d14b      	bne.n	800c646 <atan+0x25e>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4629      	mov	r1, r5
 800c5b2:	f7f3 fe71 	bl	8000298 <__aeabi_dsub>
 800c5b6:	e72c      	b.n	800c412 <atan+0x2a>
 800c5b8:	ee10 0a10 	vmov	r0, s0
 800c5bc:	4b53      	ldr	r3, [pc, #332]	; (800c70c <atan+0x324>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f3 fe69 	bl	8000298 <__aeabi_dsub>
 800c5c6:	4b51      	ldr	r3, [pc, #324]	; (800c70c <atan+0x324>)
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7f3 fe63 	bl	800029c <__adddf3>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f4 f93d 	bl	800085c <__aeabi_ddiv>
 800c5e2:	f04f 0a01 	mov.w	sl, #1
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	460d      	mov	r5, r1
 800c5ea:	e764      	b.n	800c4b6 <atan+0xce>
 800c5ec:	4b49      	ldr	r3, [pc, #292]	; (800c714 <atan+0x32c>)
 800c5ee:	429e      	cmp	r6, r3
 800c5f0:	da1d      	bge.n	800c62e <atan+0x246>
 800c5f2:	ee10 0a10 	vmov	r0, s0
 800c5f6:	4b48      	ldr	r3, [pc, #288]	; (800c718 <atan+0x330>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	f7f3 fe4c 	bl	8000298 <__aeabi_dsub>
 800c600:	4b45      	ldr	r3, [pc, #276]	; (800c718 <atan+0x330>)
 800c602:	4606      	mov	r6, r0
 800c604:	460f      	mov	r7, r1
 800c606:	2200      	movs	r2, #0
 800c608:	4620      	mov	r0, r4
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7f3 fffc 	bl	8000608 <__aeabi_dmul>
 800c610:	4b3e      	ldr	r3, [pc, #248]	; (800c70c <atan+0x324>)
 800c612:	2200      	movs	r2, #0
 800c614:	f7f3 fe42 	bl	800029c <__adddf3>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4630      	mov	r0, r6
 800c61e:	4639      	mov	r1, r7
 800c620:	f7f4 f91c 	bl	800085c <__aeabi_ddiv>
 800c624:	f04f 0a02 	mov.w	sl, #2
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	e743      	b.n	800c4b6 <atan+0xce>
 800c62e:	462b      	mov	r3, r5
 800c630:	ee10 2a10 	vmov	r2, s0
 800c634:	4939      	ldr	r1, [pc, #228]	; (800c71c <atan+0x334>)
 800c636:	2000      	movs	r0, #0
 800c638:	f7f4 f910 	bl	800085c <__aeabi_ddiv>
 800c63c:	f04f 0a03 	mov.w	sl, #3
 800c640:	4604      	mov	r4, r0
 800c642:	460d      	mov	r5, r1
 800c644:	e737      	b.n	800c4b6 <atan+0xce>
 800c646:	4b36      	ldr	r3, [pc, #216]	; (800c720 <atan+0x338>)
 800c648:	4e36      	ldr	r6, [pc, #216]	; (800c724 <atan+0x33c>)
 800c64a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fe21 	bl	8000298 <__aeabi_dsub>
 800c656:	4622      	mov	r2, r4
 800c658:	462b      	mov	r3, r5
 800c65a:	f7f3 fe1d 	bl	8000298 <__aeabi_dsub>
 800c65e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c66a:	f7f3 fe15 	bl	8000298 <__aeabi_dsub>
 800c66e:	f1bb 0f00 	cmp.w	fp, #0
 800c672:	4604      	mov	r4, r0
 800c674:	460d      	mov	r5, r1
 800c676:	f6bf aed6 	bge.w	800c426 <atan+0x3e>
 800c67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c67e:	461d      	mov	r5, r3
 800c680:	e6d1      	b.n	800c426 <atan+0x3e>
 800c682:	a51d      	add	r5, pc, #116	; (adr r5, 800c6f8 <atan+0x310>)
 800c684:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c688:	e6cd      	b.n	800c426 <atan+0x3e>
 800c68a:	bf00      	nop
 800c68c:	f3af 8000 	nop.w
 800c690:	54442d18 	.word	0x54442d18
 800c694:	bff921fb 	.word	0xbff921fb
 800c698:	8800759c 	.word	0x8800759c
 800c69c:	7e37e43c 	.word	0x7e37e43c
 800c6a0:	e322da11 	.word	0xe322da11
 800c6a4:	3f90ad3a 	.word	0x3f90ad3a
 800c6a8:	24760deb 	.word	0x24760deb
 800c6ac:	3fa97b4b 	.word	0x3fa97b4b
 800c6b0:	a0d03d51 	.word	0xa0d03d51
 800c6b4:	3fb10d66 	.word	0x3fb10d66
 800c6b8:	c54c206e 	.word	0xc54c206e
 800c6bc:	3fb745cd 	.word	0x3fb745cd
 800c6c0:	920083ff 	.word	0x920083ff
 800c6c4:	3fc24924 	.word	0x3fc24924
 800c6c8:	5555550d 	.word	0x5555550d
 800c6cc:	3fd55555 	.word	0x3fd55555
 800c6d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c6d4:	bfa2b444 	.word	0xbfa2b444
 800c6d8:	52defd9a 	.word	0x52defd9a
 800c6dc:	3fadde2d 	.word	0x3fadde2d
 800c6e0:	af749a6d 	.word	0xaf749a6d
 800c6e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c6e8:	fe231671 	.word	0xfe231671
 800c6ec:	3fbc71c6 	.word	0x3fbc71c6
 800c6f0:	9998ebc4 	.word	0x9998ebc4
 800c6f4:	3fc99999 	.word	0x3fc99999
 800c6f8:	54442d18 	.word	0x54442d18
 800c6fc:	3ff921fb 	.word	0x3ff921fb
 800c700:	440fffff 	.word	0x440fffff
 800c704:	7ff00000 	.word	0x7ff00000
 800c708:	3fdbffff 	.word	0x3fdbffff
 800c70c:	3ff00000 	.word	0x3ff00000
 800c710:	3ff2ffff 	.word	0x3ff2ffff
 800c714:	40038000 	.word	0x40038000
 800c718:	3ff80000 	.word	0x3ff80000
 800c71c:	bff00000 	.word	0xbff00000
 800c720:	0800d2a8 	.word	0x0800d2a8
 800c724:	0800d288 	.word	0x0800d288

0800c728 <fabs>:
 800c728:	ec51 0b10 	vmov	r0, r1, d0
 800c72c:	ee10 2a10 	vmov	r2, s0
 800c730:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c734:	ec43 2b10 	vmov	d0, r2, r3
 800c738:	4770      	bx	lr
 800c73a:	0000      	movs	r0, r0
 800c73c:	0000      	movs	r0, r0
	...

0800c740 <scalbn>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	ec55 4b10 	vmov	r4, r5, d0
 800c746:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c74a:	4606      	mov	r6, r0
 800c74c:	462b      	mov	r3, r5
 800c74e:	b999      	cbnz	r1, 800c778 <scalbn+0x38>
 800c750:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c754:	4323      	orrs	r3, r4
 800c756:	d03f      	beq.n	800c7d8 <scalbn+0x98>
 800c758:	4b35      	ldr	r3, [pc, #212]	; (800c830 <scalbn+0xf0>)
 800c75a:	4629      	mov	r1, r5
 800c75c:	ee10 0a10 	vmov	r0, s0
 800c760:	2200      	movs	r2, #0
 800c762:	f7f3 ff51 	bl	8000608 <__aeabi_dmul>
 800c766:	4b33      	ldr	r3, [pc, #204]	; (800c834 <scalbn+0xf4>)
 800c768:	429e      	cmp	r6, r3
 800c76a:	4604      	mov	r4, r0
 800c76c:	460d      	mov	r5, r1
 800c76e:	da10      	bge.n	800c792 <scalbn+0x52>
 800c770:	a327      	add	r3, pc, #156	; (adr r3, 800c810 <scalbn+0xd0>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	e01f      	b.n	800c7b8 <scalbn+0x78>
 800c778:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c77c:	4291      	cmp	r1, r2
 800c77e:	d10c      	bne.n	800c79a <scalbn+0x5a>
 800c780:	ee10 2a10 	vmov	r2, s0
 800c784:	4620      	mov	r0, r4
 800c786:	4629      	mov	r1, r5
 800c788:	f7f3 fd88 	bl	800029c <__adddf3>
 800c78c:	4604      	mov	r4, r0
 800c78e:	460d      	mov	r5, r1
 800c790:	e022      	b.n	800c7d8 <scalbn+0x98>
 800c792:	460b      	mov	r3, r1
 800c794:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c798:	3936      	subs	r1, #54	; 0x36
 800c79a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c79e:	4296      	cmp	r6, r2
 800c7a0:	dd0d      	ble.n	800c7be <scalbn+0x7e>
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	a11c      	add	r1, pc, #112	; (adr r1, 800c818 <scalbn+0xd8>)
 800c7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7aa:	da02      	bge.n	800c7b2 <scalbn+0x72>
 800c7ac:	a11c      	add	r1, pc, #112	; (adr r1, 800c820 <scalbn+0xe0>)
 800c7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7b2:	a319      	add	r3, pc, #100	; (adr r3, 800c818 <scalbn+0xd8>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 ff26 	bl	8000608 <__aeabi_dmul>
 800c7bc:	e7e6      	b.n	800c78c <scalbn+0x4c>
 800c7be:	1872      	adds	r2, r6, r1
 800c7c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c7c4:	428a      	cmp	r2, r1
 800c7c6:	dcec      	bgt.n	800c7a2 <scalbn+0x62>
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	dd08      	ble.n	800c7de <scalbn+0x9e>
 800c7cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c7d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7d8:	ec45 4b10 	vmov	d0, r4, r5
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
 800c7de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c7e2:	da08      	bge.n	800c7f6 <scalbn+0xb6>
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	a10a      	add	r1, pc, #40	; (adr r1, 800c810 <scalbn+0xd0>)
 800c7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ec:	dac0      	bge.n	800c770 <scalbn+0x30>
 800c7ee:	a10e      	add	r1, pc, #56	; (adr r1, 800c828 <scalbn+0xe8>)
 800c7f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7f4:	e7bc      	b.n	800c770 <scalbn+0x30>
 800c7f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7fa:	3236      	adds	r2, #54	; 0x36
 800c7fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c804:	4620      	mov	r0, r4
 800c806:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <scalbn+0xf8>)
 800c808:	2200      	movs	r2, #0
 800c80a:	e7d5      	b.n	800c7b8 <scalbn+0x78>
 800c80c:	f3af 8000 	nop.w
 800c810:	c2f8f359 	.word	0xc2f8f359
 800c814:	01a56e1f 	.word	0x01a56e1f
 800c818:	8800759c 	.word	0x8800759c
 800c81c:	7e37e43c 	.word	0x7e37e43c
 800c820:	8800759c 	.word	0x8800759c
 800c824:	fe37e43c 	.word	0xfe37e43c
 800c828:	c2f8f359 	.word	0xc2f8f359
 800c82c:	81a56e1f 	.word	0x81a56e1f
 800c830:	43500000 	.word	0x43500000
 800c834:	ffff3cb0 	.word	0xffff3cb0
 800c838:	3c900000 	.word	0x3c900000

0800c83c <with_errno>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	460d      	mov	r5, r1
 800c842:	4616      	mov	r6, r2
 800c844:	f7fc ff18 	bl	8009678 <__errno>
 800c848:	4629      	mov	r1, r5
 800c84a:	6006      	str	r6, [r0, #0]
 800c84c:	4620      	mov	r0, r4
 800c84e:	bd70      	pop	{r4, r5, r6, pc}

0800c850 <xflow>:
 800c850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c852:	4614      	mov	r4, r2
 800c854:	461d      	mov	r5, r3
 800c856:	b108      	cbz	r0, 800c85c <xflow+0xc>
 800c858:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c85c:	e9cd 2300 	strd	r2, r3, [sp]
 800c860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 fece 	bl	8000608 <__aeabi_dmul>
 800c86c:	2222      	movs	r2, #34	; 0x22
 800c86e:	b003      	add	sp, #12
 800c870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c874:	f7ff bfe2 	b.w	800c83c <with_errno>

0800c878 <__math_uflow>:
 800c878:	b508      	push	{r3, lr}
 800c87a:	2200      	movs	r2, #0
 800c87c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c880:	f7ff ffe6 	bl	800c850 <xflow>
 800c884:	ec41 0b10 	vmov	d0, r0, r1
 800c888:	bd08      	pop	{r3, pc}

0800c88a <__math_oflow>:
 800c88a:	b508      	push	{r3, lr}
 800c88c:	2200      	movs	r2, #0
 800c88e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c892:	f7ff ffdd 	bl	800c850 <xflow>
 800c896:	ec41 0b10 	vmov	d0, r0, r1
 800c89a:	bd08      	pop	{r3, pc}
 800c89c:	0000      	movs	r0, r0
	...

0800c8a0 <__ieee754_log>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ec51 0b10 	vmov	r0, r1, d0
 800c8a8:	ed2d 8b04 	vpush	{d8-d9}
 800c8ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	da29      	bge.n	800c90a <__ieee754_log+0x6a>
 800c8b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8ba:	4303      	orrs	r3, r0
 800c8bc:	ee10 2a10 	vmov	r2, s0
 800c8c0:	d10c      	bne.n	800c8dc <__ieee754_log+0x3c>
 800c8c2:	49cf      	ldr	r1, [pc, #828]	; (800cc00 <__ieee754_log+0x360>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f7f3 ffc7 	bl	800085c <__aeabi_ddiv>
 800c8ce:	ec41 0b10 	vmov	d0, r0, r1
 800c8d2:	b003      	add	sp, #12
 800c8d4:	ecbd 8b04 	vpop	{d8-d9}
 800c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8dc:	2900      	cmp	r1, #0
 800c8de:	da05      	bge.n	800c8ec <__ieee754_log+0x4c>
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	f7f3 fcd9 	bl	8000298 <__aeabi_dsub>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	e7ee      	b.n	800c8ca <__ieee754_log+0x2a>
 800c8ec:	4bc5      	ldr	r3, [pc, #788]	; (800cc04 <__ieee754_log+0x364>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f7f3 fe8a 	bl	8000608 <__aeabi_dmul>
 800c8f4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	4ac3      	ldr	r2, [pc, #780]	; (800cc08 <__ieee754_log+0x368>)
 800c8fc:	4295      	cmp	r5, r2
 800c8fe:	dd06      	ble.n	800c90e <__ieee754_log+0x6e>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	f7f3 fcca 	bl	800029c <__adddf3>
 800c908:	e7e1      	b.n	800c8ce <__ieee754_log+0x2e>
 800c90a:	2300      	movs	r3, #0
 800c90c:	e7f5      	b.n	800c8fa <__ieee754_log+0x5a>
 800c90e:	152c      	asrs	r4, r5, #20
 800c910:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c914:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c918:	441c      	add	r4, r3
 800c91a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c91e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c926:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c92a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c92e:	ea42 0105 	orr.w	r1, r2, r5
 800c932:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c936:	2200      	movs	r2, #0
 800c938:	4bb4      	ldr	r3, [pc, #720]	; (800cc0c <__ieee754_log+0x36c>)
 800c93a:	f7f3 fcad 	bl	8000298 <__aeabi_dsub>
 800c93e:	1cab      	adds	r3, r5, #2
 800c940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c944:	2b02      	cmp	r3, #2
 800c946:	4682      	mov	sl, r0
 800c948:	468b      	mov	fp, r1
 800c94a:	f04f 0200 	mov.w	r2, #0
 800c94e:	dc53      	bgt.n	800c9f8 <__ieee754_log+0x158>
 800c950:	2300      	movs	r3, #0
 800c952:	f7f4 f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c956:	b1d0      	cbz	r0, 800c98e <__ieee754_log+0xee>
 800c958:	2c00      	cmp	r4, #0
 800c95a:	f000 8122 	beq.w	800cba2 <__ieee754_log+0x302>
 800c95e:	4620      	mov	r0, r4
 800c960:	f7f3 fde8 	bl	8000534 <__aeabi_i2d>
 800c964:	a390      	add	r3, pc, #576	; (adr r3, 800cba8 <__ieee754_log+0x308>)
 800c966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96a:	4606      	mov	r6, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	f7f3 fe4b 	bl	8000608 <__aeabi_dmul>
 800c972:	a38f      	add	r3, pc, #572	; (adr r3, 800cbb0 <__ieee754_log+0x310>)
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	4604      	mov	r4, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	f7f3 fe42 	bl	8000608 <__aeabi_dmul>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4620      	mov	r0, r4
 800c98a:	4629      	mov	r1, r5
 800c98c:	e7ba      	b.n	800c904 <__ieee754_log+0x64>
 800c98e:	a38a      	add	r3, pc, #552	; (adr r3, 800cbb8 <__ieee754_log+0x318>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	4650      	mov	r0, sl
 800c996:	4659      	mov	r1, fp
 800c998:	f7f3 fe36 	bl	8000608 <__aeabi_dmul>
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	499b      	ldr	r1, [pc, #620]	; (800cc10 <__ieee754_log+0x370>)
 800c9a4:	f7f3 fc78 	bl	8000298 <__aeabi_dsub>
 800c9a8:	4652      	mov	r2, sl
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	460f      	mov	r7, r1
 800c9ae:	465b      	mov	r3, fp
 800c9b0:	4650      	mov	r0, sl
 800c9b2:	4659      	mov	r1, fp
 800c9b4:	f7f3 fe28 	bl	8000608 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4630      	mov	r0, r6
 800c9be:	4639      	mov	r1, r7
 800c9c0:	f7f3 fe22 	bl	8000608 <__aeabi_dmul>
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460f      	mov	r7, r1
 800c9c8:	b914      	cbnz	r4, 800c9d0 <__ieee754_log+0x130>
 800c9ca:	4632      	mov	r2, r6
 800c9cc:	463b      	mov	r3, r7
 800c9ce:	e0a2      	b.n	800cb16 <__ieee754_log+0x276>
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f7f3 fdaf 	bl	8000534 <__aeabi_i2d>
 800c9d6:	a374      	add	r3, pc, #464	; (adr r3, 800cba8 <__ieee754_log+0x308>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	4680      	mov	r8, r0
 800c9de:	4689      	mov	r9, r1
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	a372      	add	r3, pc, #456	; (adr r3, 800cbb0 <__ieee754_log+0x310>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	460d      	mov	r5, r1
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f3 fe09 	bl	8000608 <__aeabi_dmul>
 800c9f6:	e0a7      	b.n	800cb48 <__ieee754_log+0x2a8>
 800c9f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9fc:	f7f3 fc4e 	bl	800029c <__adddf3>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4650      	mov	r0, sl
 800ca06:	4659      	mov	r1, fp
 800ca08:	f7f3 ff28 	bl	800085c <__aeabi_ddiv>
 800ca0c:	ec41 0b18 	vmov	d8, r0, r1
 800ca10:	4620      	mov	r0, r4
 800ca12:	f7f3 fd8f 	bl	8000534 <__aeabi_i2d>
 800ca16:	ec53 2b18 	vmov	r2, r3, d8
 800ca1a:	ec41 0b19 	vmov	d9, r0, r1
 800ca1e:	ec51 0b18 	vmov	r0, r1, d8
 800ca22:	f7f3 fdf1 	bl	8000608 <__aeabi_dmul>
 800ca26:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ca2a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	4602      	mov	r2, r0
 800ca32:	460b      	mov	r3, r1
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	f7f3 fde6 	bl	8000608 <__aeabi_dmul>
 800ca3c:	a360      	add	r3, pc, #384	; (adr r3, 800cbc0 <__ieee754_log+0x320>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	f7f3 fddf 	bl	8000608 <__aeabi_dmul>
 800ca4a:	a35f      	add	r3, pc, #380	; (adr r3, 800cbc8 <__ieee754_log+0x328>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fc24 	bl	800029c <__adddf3>
 800ca54:	4632      	mov	r2, r6
 800ca56:	463b      	mov	r3, r7
 800ca58:	f7f3 fdd6 	bl	8000608 <__aeabi_dmul>
 800ca5c:	a35c      	add	r3, pc, #368	; (adr r3, 800cbd0 <__ieee754_log+0x330>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	f7f3 fc1b 	bl	800029c <__adddf3>
 800ca66:	4632      	mov	r2, r6
 800ca68:	463b      	mov	r3, r7
 800ca6a:	f7f3 fdcd 	bl	8000608 <__aeabi_dmul>
 800ca6e:	a35a      	add	r3, pc, #360	; (adr r3, 800cbd8 <__ieee754_log+0x338>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	f7f3 fc12 	bl	800029c <__adddf3>
 800ca78:	4642      	mov	r2, r8
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	f7f3 fdc4 	bl	8000608 <__aeabi_dmul>
 800ca80:	a357      	add	r3, pc, #348	; (adr r3, 800cbe0 <__ieee754_log+0x340>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	4680      	mov	r8, r0
 800ca88:	4689      	mov	r9, r1
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f3 fdbb 	bl	8000608 <__aeabi_dmul>
 800ca92:	a355      	add	r3, pc, #340	; (adr r3, 800cbe8 <__ieee754_log+0x348>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	f7f3 fc00 	bl	800029c <__adddf3>
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	463b      	mov	r3, r7
 800caa0:	f7f3 fdb2 	bl	8000608 <__aeabi_dmul>
 800caa4:	a352      	add	r3, pc, #328	; (adr r3, 800cbf0 <__ieee754_log+0x350>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fbf7 	bl	800029c <__adddf3>
 800caae:	4632      	mov	r2, r6
 800cab0:	463b      	mov	r3, r7
 800cab2:	f7f3 fda9 	bl	8000608 <__aeabi_dmul>
 800cab6:	460b      	mov	r3, r1
 800cab8:	4602      	mov	r2, r0
 800caba:	4649      	mov	r1, r9
 800cabc:	4640      	mov	r0, r8
 800cabe:	f7f3 fbed 	bl	800029c <__adddf3>
 800cac2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	3551      	adds	r5, #81	; 0x51
 800caca:	431d      	orrs	r5, r3
 800cacc:	2d00      	cmp	r5, #0
 800cace:	4680      	mov	r8, r0
 800cad0:	4689      	mov	r9, r1
 800cad2:	dd48      	ble.n	800cb66 <__ieee754_log+0x2c6>
 800cad4:	4b4e      	ldr	r3, [pc, #312]	; (800cc10 <__ieee754_log+0x370>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	4650      	mov	r0, sl
 800cada:	4659      	mov	r1, fp
 800cadc:	f7f3 fd94 	bl	8000608 <__aeabi_dmul>
 800cae0:	4652      	mov	r2, sl
 800cae2:	465b      	mov	r3, fp
 800cae4:	f7f3 fd90 	bl	8000608 <__aeabi_dmul>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4606      	mov	r6, r0
 800caee:	460f      	mov	r7, r1
 800caf0:	4640      	mov	r0, r8
 800caf2:	4649      	mov	r1, r9
 800caf4:	f7f3 fbd2 	bl	800029c <__adddf3>
 800caf8:	ec53 2b18 	vmov	r2, r3, d8
 800cafc:	f7f3 fd84 	bl	8000608 <__aeabi_dmul>
 800cb00:	4680      	mov	r8, r0
 800cb02:	4689      	mov	r9, r1
 800cb04:	b964      	cbnz	r4, 800cb20 <__ieee754_log+0x280>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f3 fbc3 	bl	8000298 <__aeabi_dsub>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	4650      	mov	r0, sl
 800cb18:	4659      	mov	r1, fp
 800cb1a:	f7f3 fbbd 	bl	8000298 <__aeabi_dsub>
 800cb1e:	e6d6      	b.n	800c8ce <__ieee754_log+0x2e>
 800cb20:	a321      	add	r3, pc, #132	; (adr r3, 800cba8 <__ieee754_log+0x308>)
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	ec51 0b19 	vmov	r0, r1, d9
 800cb2a:	f7f3 fd6d 	bl	8000608 <__aeabi_dmul>
 800cb2e:	a320      	add	r3, pc, #128	; (adr r3, 800cbb0 <__ieee754_log+0x310>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	4604      	mov	r4, r0
 800cb36:	460d      	mov	r5, r1
 800cb38:	ec51 0b19 	vmov	r0, r1, d9
 800cb3c:	f7f3 fd64 	bl	8000608 <__aeabi_dmul>
 800cb40:	4642      	mov	r2, r8
 800cb42:	464b      	mov	r3, r9
 800cb44:	f7f3 fbaa 	bl	800029c <__adddf3>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	4639      	mov	r1, r7
 800cb50:	f7f3 fba2 	bl	8000298 <__aeabi_dsub>
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	f7f3 fb9e 	bl	8000298 <__aeabi_dsub>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	e7d9      	b.n	800cb1a <__ieee754_log+0x27a>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	4659      	mov	r1, fp
 800cb6e:	f7f3 fb93 	bl	8000298 <__aeabi_dsub>
 800cb72:	ec53 2b18 	vmov	r2, r3, d8
 800cb76:	f7f3 fd47 	bl	8000608 <__aeabi_dmul>
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	2c00      	cmp	r4, #0
 800cb80:	f43f af23 	beq.w	800c9ca <__ieee754_log+0x12a>
 800cb84:	a308      	add	r3, pc, #32	; (adr r3, 800cba8 <__ieee754_log+0x308>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	ec51 0b19 	vmov	r0, r1, d9
 800cb8e:	f7f3 fd3b 	bl	8000608 <__aeabi_dmul>
 800cb92:	a307      	add	r3, pc, #28	; (adr r3, 800cbb0 <__ieee754_log+0x310>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	4604      	mov	r4, r0
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	ec51 0b19 	vmov	r0, r1, d9
 800cba0:	e727      	b.n	800c9f2 <__ieee754_log+0x152>
 800cba2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cbf8 <__ieee754_log+0x358>
 800cba6:	e694      	b.n	800c8d2 <__ieee754_log+0x32>
 800cba8:	fee00000 	.word	0xfee00000
 800cbac:	3fe62e42 	.word	0x3fe62e42
 800cbb0:	35793c76 	.word	0x35793c76
 800cbb4:	3dea39ef 	.word	0x3dea39ef
 800cbb8:	55555555 	.word	0x55555555
 800cbbc:	3fd55555 	.word	0x3fd55555
 800cbc0:	df3e5244 	.word	0xdf3e5244
 800cbc4:	3fc2f112 	.word	0x3fc2f112
 800cbc8:	96cb03de 	.word	0x96cb03de
 800cbcc:	3fc74664 	.word	0x3fc74664
 800cbd0:	94229359 	.word	0x94229359
 800cbd4:	3fd24924 	.word	0x3fd24924
 800cbd8:	55555593 	.word	0x55555593
 800cbdc:	3fe55555 	.word	0x3fe55555
 800cbe0:	d078c69f 	.word	0xd078c69f
 800cbe4:	3fc39a09 	.word	0x3fc39a09
 800cbe8:	1d8e78af 	.word	0x1d8e78af
 800cbec:	3fcc71c5 	.word	0x3fcc71c5
 800cbf0:	9997fa04 	.word	0x9997fa04
 800cbf4:	3fd99999 	.word	0x3fd99999
	...
 800cc00:	c3500000 	.word	0xc3500000
 800cc04:	43500000 	.word	0x43500000
 800cc08:	7fefffff 	.word	0x7fefffff
 800cc0c:	3ff00000 	.word	0x3ff00000
 800cc10:	3fe00000 	.word	0x3fe00000

0800cc14 <_init>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	bf00      	nop
 800cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1a:	bc08      	pop	{r3}
 800cc1c:	469e      	mov	lr, r3
 800cc1e:	4770      	bx	lr

0800cc20 <_fini>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	bf00      	nop
 800cc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc26:	bc08      	pop	{r3}
 800cc28:	469e      	mov	lr, r3
 800cc2a:	4770      	bx	lr
